{
  "id": "2016-02-20-dos-and-donts-for-testers-2016-edition",
  "title": "Do's and don'ts for testers - 2016 edition",
  "date": "2016-02-20",
  "categories": [
    "Testing thoughts"
  ],
  "tags": [
    "testing",
    "testops",
    "test automation",
    "learning"
  ],
  "permalink": "/2016/02/dos-and-donts-for-testers-2016-edition",
  "content": "<p><img src=\"/images/blog/dos_and_donts.jpg\" alt=\"\" style=\"width: 100%;\"></p>\n<p>Time is flying pretty fast. Christmas has just finished and we have February already. Probably everyone who wanted to<br>post 2016 testing predictions has already done it. Hopefully, I&#39;m the last one (lots of scientists say<br>it&#39;s <a href=\"http://mrshmooze.com/2015/01/13/when-is-the-best-time-to-present-first-middle-or-last/\" target=\"_blank\" rel=\"noreferrer\">the best possible scenario</a>).<br>Before I start I&#39;d like to introduce two controversial definitions, which are not covered<br>in <a href=\"http://www.istqb.org/downloads/category/20-istqb-glossary.html\" target=\"_blank\" rel=\"noreferrer\">ISTQB Glossary</a>. Quotes from James Bach and Micheal<br>Bolton (<a href=\"http://www.satisfice.com/blog/archives/856\" target=\"_blank\" rel=\"noreferrer\">source</a>):</p>\n<p><strong>Testing</strong> is the process of evaluating a product by learning about it through exploration and experimentation, which<br>includes to some degree: questioning, study, modeling, observation, inference, etc.</p>\n<p><strong>Checking</strong> is the process of making evaluations by applying algorithmic decision rules to specific observations of a<br>product.</p>\n<p>I&#39;m not a fan of reinventing the testing field entirely, but this distinction seems pretty reasonable for me.</p>\n<h3>Part I - Do&#39;s</h3>\n<p><strong>1. Keep learning</strong></p>\n<p>Probably the most important one. It can even mitigate our flaws in other areas. I have recently read great Erik<br>Dietrich&#39;s article about developers who have stopped learning and<br>become <a href=\"http://www.daedtech.com/how-developers-stop-learning-rise-of-the-expert-beginner/\" target=\"_blank\" rel=\"noreferrer\">Expert Beginners</a>. It can not<br>only lead to your personal stagnation but also affect our most ambitious peers who may decide<br>to <a href=\"http://www.daedtech.com/how-to-keep-your-best-programmers\" target=\"_blank\" rel=\"noreferrer\">change their job</a>. We have a great community with many<br>helpful people. With uncle Google, we find almost everything in space of a few minutes. It seems all we need to improve<br>is a little bit of desire. Keep your mind open and adapt the beginners&#39; minds. Read an inspirational book<br>like <a href=\"http://awesome-bookreviews.blogspot.com/2016/01/mastery-robert-greene.html\" target=\"_blank\" rel=\"noreferrer\">Mastery</a> to find motivation.</p>\n<p><strong>2. Improve your skills in check automation</strong></p>\n<p>The ability to automate checks in one of the<br>leading <a href=\"http://blog.testproject.io/2015/12/03/worlds-most-desirable-automation-skills/\" target=\"_blank\" rel=\"noreferrer\">programming languages</a>(Java,<br>C#, Python, JavaScript, Ruby...) is crucial. That&#39;s definitely the most important hard skill for testers. We should be<br>proficient with Selenium and API level testing. I&#39;m not sure about unit testing (shouldn&#39;t we coach programmers to write<br>them?), but some knowledge about Mockito and EasyMock is required. Our peers (developers, business, managers) all expect<br>us to write working (stable!) automated checks on<br>all <a href=\"http://googletesting.blogspot.com/2015/04/just-say-no-to-more-end-to-end-tests.html\" target=\"_blank\" rel=\"noreferrer\">pyramid levels</a>. Personally, I<br>hope to spend a considerable amount of time working to improve my skills in this area.</p>\n<p><strong>3. Learn to manage the testing environment</strong></p>\n<p>It seems like the time when testers asked for deployment and just waited are long gone. Now we should be able to care<br>about our environment (configure CI tool, manage Selenium Grid, etc.) and prepare appropriate scripts (Bash, Perl).<br>Servers need to be orchestration by a tool (Puppet, Ansible, Chef...). We have virtualization (Vagrant), clouds (AWS,<br>Google Cloud), and containers (Docker). This is a lot to learn, but we don&#39;t have to be experts in this field (unless of<br>course, we test app that uses them). They&#39;re just useful tools, and we should know how to use them appropriately. I<br>would say that more and more companies expect testers to maintain those tools not only for themselves but also for<br>developers.</p>\n<p><strong>4. Adopt Agile / Lean principles and improve social skills</strong></p>\n<p>Software development<br>is<a href=\"http://glen-ford.blogspot.com/2009/04/software-development-is-social-activity.html\" target=\"_blank\" rel=\"noreferrer\">a social activity</a>now. Crazy<br>geeks who can speak only boolean aren&#39;t really desirable. The tester should add value to a team. We need to coach<br>programmers how to care not only about new features, but also unit tests, quality, and refactoring. I strongly suggest<br>reading both Lisa Crispin and Janet Gregory&#39;s books,<br>especially <a href=\"http://www.amazon.com/More-Agile-Testing-Addison-Wesley-Signature/dp/0321967054\" target=\"_blank\" rel=\"noreferrer\">More Agile Testing</a>. They<br>are available via Safari Books. I&#39;m not an expert in Lean, but kaizen / continuous improvement is surely worth applying.<br>I&#39;d like to read a lot in this area this year.</p>\n<p><strong>5. Find your niche, specialize in one type of testing</strong></p>\n<p>From my perspective, there is a huge demand for skilled testers. Pentesting has to performed almost in every company,<br>but even after <a href=\"https://www.owasp.org/index.php/Main_Page\" target=\"_blank\" rel=\"noreferrer\">the OWASP</a>project, those skills aren&#39;t common among testers.<br>If you love nitpicking give yourself a chance. With various online scanners and powerful tools<br>like <a href=\"https://portswigger.net/burp/\" target=\"_blank\" rel=\"noreferrer\">Burp</a>, it&#39;s no longer rocket science. Performance/user testing skills are desirable<br>too. Rare testing field specialization is the only reasonable alternative for automation.</p>\n<p><strong>6. Go Mobile</strong></p>\n<p>Mobile is booming. We are more and more addicted to our smartphones. It&#39;s kinda sad, but it&#39;s reality. The good company<br>simply has to have a mobile site version and Android/iOS native app. Those are at least three more products to test.<br>With <a href=\"https://codemyviews.com/blog/mobilefirst\" target=\"_blank\" rel=\"noreferrer\">the mobile-first</a> movement, we need to make a good first impression,<br>i.e. release quality product. There are so<br>many <a href=\"http://testdroid.com/tech/top-5-android-testing-frameworks-with-examples\" target=\"_blank\" rel=\"noreferrer\">mobile testing frameworks</a>what this<br>branch of testing already has its own life. Surely, we will have to join it eventually.</p>\n<h3>Part II - Don&#39;ts</h3>\n<p><strong>1. Manual checking is dead</strong></p>\n<p>A few years ago<a href=\"http://www.amazon.com/Google-Tests-Software-James-Whittaker/dp/0321803027\" target=\"_blank\" rel=\"noreferrer\">Google testers</a>realized that<br>people in their company are valued by coding skills. So they dumped manual checking completely and started writing<br>automated checks. Sooner or later this activity will be abandoned entirely (replaced by automated checks and skilled<br>exploratory tests). If you have doubts just ask yourself a question: would you hire someone who only writes test cases<br>and checks if it works as desired?</p>\n<p><strong>2. Don&#39;t go all-in on ISTQB certificates</strong></p>\n<p>This topic probably bore you already, so only a few words. Pass ISTQB FL because it may give you an edge during<br>recruitment, but don&#39;t waste time going higher. Read<br>my <a href=\"http://awesome-testing.blogspot.com/2016/01/infamous-testers.html\" target=\"_blank\" rel=\"noreferrer\">recent post</a><br>or <a href=\"https://leanpub.com/theproblemswithsoftwaretesting\" target=\"_blank\" rel=\"noreferrer\">Rob Lambert&#39;s book</a> for details.</p>\n<p><strong>3. Don&#39;t treat external training as shortcuts</strong></p>\n<p>We are lazier and lazier as a society. That&#39;s why we love shortcuts. People naively send SMS, because they except big<br>rewards. Yet even if they win, they<br>usually <a href=\"http://www.cleveland.com/business/index.ssf/2016/01/why_do_70_percent_of_lottery_w.html\" target=\"_blank\" rel=\"noreferrer\">lose it right after</a>.<br>Shortcuts don&#39;t work, we have to slowly go forward. Don&#39;t expect external coaches to teach you everything. Even if<br>training is perfect, there is simply not enough time. Make sure you pay for quality stuff before attending.</p>\n<p><strong>4. Don&#39;t be shy</strong></p>\n<p>In my previous post**,**I talked about<br>our <a href=\"http://awesome-testing.blogspot.com/2016/01/infamous-testers.html\" target=\"_blank\" rel=\"noreferrer\">testing brand</a>. If you are smart share your<br>knowledge. I guarantee you will gain a lot by doing it. Submit a paper for the conference, start blogging or just<br>comment here :)</p>\n"
}