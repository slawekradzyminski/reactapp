{
  "id": "2017-05-25-headless-testing-with-google-chrome",
  "title": "Headless testing with Google Chrome",
  "date": "2017-05-25",
  "categories": [
    "Selenium"
  ],
  "tags": [
    "selenium"
  ],
  "permalink": "/2017/05/headless-testing-with-google-chrome",
  "content": "<p><img src=\"/images/blog/suit-158820_1280.png\" alt=\"\" style=\"width: 100%;\"></p>\n<p>Headless Testing means running a browser UI test without the graphical user interface, i.e. without the head. Such a<br>test requires a headless browser, which (according to <a href=\"https://en.wikipedia.org/wiki/Headless_browser\" target=\"_blank\" rel=\"noreferrer\">Wikipedia</a>)<br>provides automated control of a web page in an environment similar to popular web browsers, but are executed via a<br>command-line interface or using network communication. They are particularly useful for testing web pages as they are<br>able to render and understand HTML the same way a browser would, including styling elements such as page layout, colour,<br>font selection and execution of JavaScript and AJAX which are usually not available when using other testing methods.</p>\n<p>Why would we want to execute UI tests in headless browser?</p>\n<p>The main reason is continuous integration. We might not always have a display output (X-server) installed. For example<br>all unix systems (that usually act as enterprise CI servers) don&#39;t have it by default. Let&#39;s say you have Jenkins<br>installed on amazon EC2 ubuntu instance. In order to run UI tests there you<br>need <a href=\"http://elementalselenium.com/tips/38-headless\" target=\"_blank\" rel=\"noreferrer\">Xvfb installation + configuration</a>. Headless testing requires<br>browser only.</p>\n<h2>Headless browsers overview</h2>\n<p>As for today <a href=\"https://github.com/ariya/phantomjs\" target=\"_blank\" rel=\"noreferrer\">PhantomJS</a> is an unquestionable leader. Unfortunately the project has<br>more than 1800 open issues and its maintainer<br>has <a href=\"https://groups.google.com/forum/#!topic/phantomjs/9aI5d-LDuNE\" target=\"_blank\" rel=\"noreferrer\">just announced</a> that he will no longer support it.<br>The main reason being:</p>\n<blockquote class=\"blog-quote\"><p>Headless Chrome is coming (...) I think people will switch to it, eventually. Chrome is faster and more stable than</p><p>PhantomJS. And it doesn&#39;t eat memory like crazy.  </p></p></blockquote><p>Headless mode would be added into Google Chrome in <a href=\"https://www.chromestatus.com/features/5678767817097216\" target=\"_blank\" rel=\"noreferrer\">version 59</a>.</p>\n<p>Firefox <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=1338004\" target=\"_blank\" rel=\"noreferrer\">is planning</a> to introduce it as well.</p>\n<h2>Prerequisites for running headless tests on Chrome</h2>\n<p>I managed to run headless test on my Mac. Prerequisites require only two steps:</p>\n<p>a) downloading <a href=\"https://chromedriver.storage.googleapis.com/index.html?path=2.29/\" target=\"_blank\" rel=\"noreferrer\">ChromeDriver 2.29</a><br>b) downloading <a href=\"https://www.chromium.org/getting-involved/dev-channel\" target=\"_blank\" rel=\"noreferrer\">Google Chrome 59</a> (beta currently)</p>\n<h2>Demo in Java</h2>\n<p>As usual I prepared a demo on<br>my <a href=\"https://github.com/slawekradzyminski/AwesomeTesting/commit/7f13e2f5f8f2253ccfcd8c6bafd393661526a7e3\" target=\"_blank\" rel=\"noreferrer\">GitHub project</a>.<br>It was a lot easier this time - I used example test<br>from <a href=\"http://www.awesome-testing.com/2016/04/introducing-fluentlenium-2-selenium.html\" target=\"_blank\" rel=\"noreferrer\">Selenium Waiting Game post</a>and<br>Chrome Manipulation code<br>from <a href=\"http://www.awesome-testing.com/2016/02/selenium-browser-capabilities-explained.html\" target=\"_blank\" rel=\"noreferrer\">Browser Capabilities Explained post</a>.<br>I&#39;m using <a href=\"http://fluentlenium.org/\" target=\"_blank\" rel=\"noreferrer\">FluentLenium</a> syntax.</p>\n<p>Turns out, all you need to do is add &#39;headless&#39; option into Chrome BrowserCapabilites.</p>\n<p>Test:</p>\n<pre><code class=\"language-java\">public class HeadlessChromeTest extends HeadlessChromeConfig {\n\n    private static final String URL = &quot;https://resttesttest.com/&quot;;\n    private static final String SUCCESS_TEXT = &quot;HTTP 200 OK&quot;;\n\n    private static final String AJAX_BUTTON_CSS = &quot;#submitajax&quot;;\n    private static final String ALERT_RESULT_CSS = &quot;.alert-success&quot;;\n\n    @Test\n    public void ajaxCallTest() {\n        goTo(URL);\n        await().until(el(AJAX_BUTTON_CSS)).clickable();\n        el(AJAX_BUTTON_CSS).click();\n        await().atMost(5, TimeUnit.SECONDS).untilPredicate(ajaxCallCompleted);\n        assertThat(el(ALERT_RESULT_CSS).text()).isEqualTo(SUCCESS_TEXT);\n    }\n\n    private Predicate&lt;FluentControl&gt; ajaxCallCompleted = fluent -&gt; {\n        final JavascriptExecutor driver = (JavascriptExecutor) getDriver();\n        return (Boolean) driver\n                .executeScript(&quot;return (window.jQuery != null) &amp;&amp; (jQuery.active === 0);&quot;);\n    };\n\n}\n</code></pre>\n<p>ChromeDriver runner:</p>\n<pre><code class=\"language-java\">public class HeadlessChromeConfig extends FluentTestNg {\n\n    private static final String HEADLESS = &quot;headless&quot;;\n\n    @Override\n    public WebDriver newWebDriver() {\n        return new ChromeDriver(getChromeCapabilities());\n    }\n\n    private DesiredCapabilities getChromeCapabilities() {\n        DesiredCapabilities capabilities = DesiredCapabilities.chrome();\n        capabilities.setCapability(ChromeOptions.CAPABILITY, getChromeOptions());\n        return capabilities;\n    }\n\n    private ChromeOptions getChromeOptions() {\n        ChromeOptions options = new ChromeOptions();\n        options.addArguments(getChromeSwitches());\n        return options;\n    }\n\n    private List&lt;String&gt; getChromeSwitches() {\n        List&lt;String&gt; chromeSwitches = new ArrayList&lt;&gt;();\n        chromeSwitches.add(HEADLESS);\n        return chromeSwitches;\n    }\n\n}\n</code></pre>\n<p>Try it on your own. You should see no GUI and the test should pass. Now comment out line 24 (adding &#39;headless&#39; switch)<br>and you should see real Chrome.</p>\n<p>All code from my technical posts is available and maintained on<br>my <a href=\"https://github.com/slawekradzyminski/AwesomeTesting\" target=\"_blank\" rel=\"noreferrer\">GitHub project</a>. Check it out for more details and subscribe to<br>updates.  </p>\n<p><strong>Update:</strong> Headless Chrome doesn&#39;t work on Windows yet. Big thanks for <a href=\"https://twitter.com/rafalfusik\" target=\"_blank\" rel=\"noreferrer\">@rafalfusik</a>.<br>See link for details.</p>\n<blockquote class=\"blog-quote\"><p><strong><a href=\"https://twitter.com/s_radzyminski\" target=\"_blank\" rel=\"noreferrer\">@s_radzyminski</a> <a href=\"https://t.co/hW8x2l9vVW\" target=\"_blank\" rel=\"noreferrer\">https://t.co/hW8x2l9vVW</a></strong>  </p>\n<p><strong>â€” rafalfusik (@rafalfusik) <a href=\"https://twitter.com/rafalfusik/status/861151982379204608\" target=\"_blank\" rel=\"noreferrer\">May 7, 2017</a></strong>  </p></p></blockquote><p><strong>Update2:</strong> Google Chrome Developer tools support<br>details - <a href=\"https://developers.google.com/web/updates/2017/04/headless-chrome\" target=\"_blank\" rel=\"noreferrer\">article from official blog</a>.</p>\n"
}