{
  "id": "2018-09-25-how-to-speed-up-your-tests-in-one-simple-step",
  "title": "How to speed up your tests in one simple step",
  "date": "2018-09-25",
  "category": "CI/CD",
  "permalink": "/2018/09/how-to-speed-up-your-tests-in-one",
  "content": "<img src=\"/images/blog/traffic-car-vehicle-black.jpg\" alt=\"\">\n\n<p>Every tester with <a href=\"https://www.awesome-testing.com/2017/01/testops-4-continuous-improvement.html\" target=\"_blank\" rel=\"noreferrer\">Continuous Improvement</a> mindset cares about overall test execution time. We aim for quick feedback loops ending before developer switches to another task. This is not always easy as projects becomes bigger and bigger, teams focus on delivering new features and other issues receive higher priority.</p><p>Today I&#39;d like to present you a very simple way of speeding up your tests. Most of the times we try to introduce test parallelism on code level. Unfortunately that&#39;s usually very costly and hard to implement. Often we end up with complicated code that resolves our timing problems, but introduces new issues (increased code maintenance costs, flaky tests, timing problems, random test dependencies).</p><p>Approach presented here is different. Instead of costly software test parallelism we multiply test environments and split tests by basic regex (or <a href=\"https://github.com/isaacs/node-glob#glob-primer\" target=\"_blank\" rel=\"noreferrer\">Globs</a> for Javascript).</p><h2>Concept</h2>\n<p>Idea is very simple. We spawn multiple test environment instances (ideally using lightweight Dockers) and execute only arbitrary percent of full test suite. In my example I split the tests by name. First suite execute tests matched by [a-m]* pattern and the second suite is running tests matched by [n-z]* pattern. This should theoretically create split close to 50-50.</p><h2>Implementation</h2>\n<p>In order to give you better view on how it works I prepared complete Continuous Integration job definition using <a href=\"https://about.gitlab.com/features/gitlab-ci-cd/\" target=\"_blank\" rel=\"noreferrer\">Gitlab CI</a> .gitlab-ci.yml file. First example is from Java world (<a href=\"https://maven.apache.org/\" target=\"_blank\" rel=\"noreferrer\">Maven</a>) and the second one is from Javascript world (<a href=\"http://node.js/\" target=\"_blank\" rel=\"noreferrer\">Node.js</a>, <a href=\"https://www.npmjs.com/\" target=\"_blank\" rel=\"noreferrer\">npm</a>, <a href=\"https://mochajs.org/\" target=\"_blank\" rel=\"noreferrer\">mocha</a>).</p><h3>Java example</h3>\n<pre><code class=\"hljs language-yml\">\n<span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">maven:3-jdk-8</span>\n\n<span class=\"hljs-attr\">stages:</span>\n  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">build</span>\n  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">test</span>\n\n<span class=\"hljs-attr\">compile:</span>\n  <span class=\"hljs-attr\">stage:</span> <span class=\"hljs-string\">build</span>\n  <span class=\"hljs-attr\">script:</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">mvn</span> <span class=\"hljs-string\">-U</span> <span class=\"hljs-string\">-B</span> <span class=\"hljs-string\">clean</span> <span class=\"hljs-string\">compile</span>\n\n<span class=\"hljs-attr\">tests-am:</span>\n  <span class=\"hljs-attr\">stage:</span> <span class=\"hljs-string\">test</span>\n  <span class=\"hljs-attr\">script:</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">echo</span> <span class=\"hljs-string\">&#x27;[A-M] TESTS&#x27;</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">mvn</span> <span class=\"hljs-string\">-U</span> <span class=\"hljs-string\">-B</span> <span class=\"hljs-string\">test</span> <span class=\"hljs-string\">-Dtest=&#x27;%regex[.*/[A-M].*Test.class]&#x27;</span>\n\n<span class=\"hljs-attr\">tests-nz:</span>\n  <span class=\"hljs-attr\">stage:</span> <span class=\"hljs-string\">test</span>\n  <span class=\"hljs-attr\">script:</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">echo</span> <span class=\"hljs-string\">&#x27;[N-Z] TESTS&#x27;</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">mvn</span> <span class=\"hljs-string\">-U</span> <span class=\"hljs-string\">-B</span> <span class=\"hljs-string\">test</span> <span class=\"hljs-string\">-Dtest=&#x27;%regex[.*/[N-Z].*Test.class]&#x27;</span>\n</code></pre><p>To those unfamiliar with Gitlab CI few words of explanation. This is <a href=\"http://yaml.org/\" target=\"_blank\" rel=\"noreferrer\">YAML</a> file that stores our Continuous Integration job definition. First line (image) defines Docker container which will be pulled from Docker registry at the beginning. We get official maven image which guarantees us that <em>mvn</em> command is working properly. Next the application code is downloaded inside a container and scipt starts.</p><p>We split the tasks into two stages. First stage (build) contains only one job: execute &#39;<em>mvn -U -B clean compile</em>&#39; command. Remember that we want to detect failures as soon as possible, so compilation is our first quality gate.</p><p>If first stage succeeds we move into phase two (test). This time though tasks start simultaneously. Two set of tests (matched by regex) are executed on the same time.</p><h3>Javascript example</h3>\n<pre><code class=\"hljs language-yml\">\n<span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">node:10</span>\n\n<span class=\"hljs-attr\">stages:</span>\n  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">test</span>\n\n<span class=\"hljs-attr\">tests-am:</span>\n  <span class=\"hljs-attr\">stage:</span> <span class=\"hljs-string\">test</span>\n  <span class=\"hljs-attr\">script:</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">npm</span> <span class=\"hljs-string\">install</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">echo</span> <span class=\"hljs-string\">&#x27;[A-M] TESTS&#x27;</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">mocha</span> <span class=\"hljs-string\">&quot;server-test/[a-m]*/**/*.js&quot;</span>\n\n<span class=\"hljs-attr\">tests-nz:</span>\n  <span class=\"hljs-attr\">stage:</span> <span class=\"hljs-string\">test</span>\n  <span class=\"hljs-attr\">script:</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">npm</span> <span class=\"hljs-string\">install</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">echo</span> <span class=\"hljs-string\">&#x27;[N-Z] TESTS&#x27;</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">mocha</span> <span class=\"hljs-string\">&quot;server-test/[n-z]*/**/*.js&quot;</span>\n</code></pre><p>This time we have only one stage (test). Each one use mocha to run ~50% of tests present in server-test folder.</p><h2>Conclusion</h2>\n<p>This simple trick shortens overall test execution time and provides us with faster feedback. Please note that this solution is also scalable (by adding new Docker and splitting test suite into more separate chunks).</p>"
}