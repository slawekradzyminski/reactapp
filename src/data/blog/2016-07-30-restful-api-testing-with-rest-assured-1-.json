{
  "id": "2016-07-30-restful-api-testing-with-rest-assured-1-",
  "title": "RESTful API Testing with Rest-Assured (1)",
  "date": "2016-07-30",
  "category": "API testing",
  "permalink": "/2016/07/restful-api-testing-with-rest-assured-1",
  "content": "<img src=\"/images/blog/Rest-Assured-new-brand-identity-lr.jpg\" alt=\"\">\n\n<p>Before I start writing about API testing let me announce the big news. I released all my Selenium related Java code snippets on <a href=\"https://github.com/slawekradzyminski/AwesomeTesting\" target=\"_blank\" rel=\"noreferrer\">the Github Awesome Testing</a> project. I will update it with every new technical post (including this one - the Rest-Assured tests were already pushed <a href=\"https://github.com/slawekradzyminski/AwesomeTesting/tree/master/src/test/java/restassuredjsonplaceholder\" target=\"_blank\" rel=\"noreferrer\">here</a>). You can follow it and just type <em>&#39;git pull&#39;</em> to get the latest code updates. From my experience, it&#39;s always better to check how things work with IDE/Maven support.</p><p>Some time ago in my <a href=\"http://awesome-testing.com/2016/04/testers-toolbox-alternative-guide.html\" target=\"_blank\" rel=\"noreferrer\">Tester&#39;s toolbox - an alternative guide</a> post I recommended you online resources on which you can train your testing skills. <a href=\"http://jsonplaceholder.typicode.com/\" target=\"_blank\" rel=\"noreferrer\">JSONplaceholder</a> is a perfect example of free RESTful API which can be utilized for improving API testing skills. In this post, I&#39;ll show you how to write tests in <a href=\"https://github.com/rest-assured/rest-assured\" target=\"_blank\" rel=\"noreferrer\">the Rest Assured</a> framework.</p><h2>Getting started</h2>\n<p>Rest-Assured tests follow Behaviour-Driven Development <em>given, when, then</em> approach. As <a href=\"http://martinfowler.com/bliki/GivenWhenThen.html\" target=\"_blank\" rel=\"noreferrer\">Martin Fowler</a> nicely explained it:</p><blockquote class=\"blog-quote\"><p>The <strong>given</strong> part describes the state of the world before you begin the behavior you&#39;re specifying in this scenario. You can think of it as the pre-conditions to the test.</p><p></p><p></p><p></p><p>The <strong>when</strong> section is that behavior that you&#39;re specifying.</p><p></p><p></p><p></p><p>Finally the <strong>then</strong> section describes the changes you expect due to the specified behavior.</p><p></p></blockquote><p>To use Rest-Assured, you need to add the following libraries to your project.</p><pre><code class=\"hljs language-xml\">\n\n</code></pre><h2>Writing the first test</h2>\n<p>Before I start let me explain the convention that I use for Rest-Assured tests. Basically, I split scenarios into two classes:</p><p>a) The first one, called NameAPI (for example <a href=\"https://github.com/slawekradzyminski/AwesomeTesting/blob/master/src/test/java/restassuredjsonplaceholder/utils/JsonPlaceholderAPI.java\" target=\"_blank\" rel=\"noreferrer\">JsonPlaceholderAPI</a>) is responsible for defining requests (<strong>given</strong>+ <strong>when</strong>) and returning ready to validate responses. Each method name in this class starts with <a href=\"http://www.tutorialspoint.com/http/http_methods.htm\" target=\"_blank\" rel=\"noreferrer\">the HTTP method</a> name (get, post, delete...).</p><p>b) The second class, called NameTest (for example <a href=\"https://github.com/slawekradzyminski/AwesomeTesting/blob/master/src/test/java/restassuredjsonplaceholder/tests/GetTest.java\" target=\"_blank\" rel=\"noreferrer\">GetTest</a>) contains all the assertions (<strong>then</strong>).</p><p>This approach nicely separates the setup and assertion phase. You don&#39;t have to follow this path though, that&#39;s my way of keeping those tests readable and maintainable.</p><p>Here is how to code looks like</p><pre><code class=\"hljs language-java\">\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">URL</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;http://jsonplaceholder.typicode.com&quot;</span>;\n\n    <span class=\"hljs-keyword\">public</span> Response <span class=\"hljs-title function_\">getPostContent</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> postNumber)</span> {\n        <span class=\"hljs-keyword\">return</span> given()\n                .contentType(JSON)\n\n                .<span class=\"hljs-keyword\">when</span>()\n                .get(format(<span class=\"hljs-string\">&quot;%s/posts/%s&quot;</span>, URL, Integer.toString(postNumber)));\n    }\n</code></pre><pre><code class=\"hljs language-java\">\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">JsonPlaceholderAPI</span> <span class=\"hljs-variable\">jsonPlaceholderAPI</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">JsonPlaceholderAPI</span>();\n\n    <span class=\"hljs-meta\">@Test</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testGetPostTitle</span><span class=\"hljs-params\">()</span> {\n        jsonPlaceholderAPI.getPostContent(<span class=\"hljs-number\">1</span>)\n\n                .then()\n                .body(<span class=\"hljs-string\">&quot;title&quot;</span>, equalTo(<span class=\"hljs-string\">&quot;sunt aut facere repellat provident occaecati excepturi optio reprehenderit&quot;</span>));\n    }\n</code></pre><p>We are checking here that get a request for <a href=\"http://jsonplaceholder.typicode.com/posts/1\" target=\"_blank\" rel=\"noreferrer\">http://jsonplaceholder.typicode.com/posts/1</a> gives us the correct title. As you can see that&#39;s indeed the case.</p><p>Rest-Assured uses <a href=\"http://www.vogella.com/tutorials/Hamcrest/article.html\" target=\"_blank\" rel=\"noreferrer\">Hamcrest matchers</a> for validation. There are quite a few of them (<a href=\"https://github.com/slawekradzyminski/AwesomeTesting/blob/master/src/test/java/restassuredjsonplaceholder/tests/GetTest.java\" target=\"_blank\" rel=\"noreferrer\">I used 4 different ones</a>), and they are easily expandable. I will show you how to write custom matchers in one of the future posts soon.</p><h2>Schema validation</h2>\n<p>Sometimes you may not want to assert details. You care more about the response types and structure. Rest-Assured supports this approach nicely with <a href=\"https://github.com/rest-assured/rest-assured/wiki/Usage#json-schema-validation\" target=\"_blank\" rel=\"noreferrer\">Schema Validation</a>. <a href=\"https://github.com/slawekradzyminski/AwesomeTesting/blob/master/src/test/java/restassuredjsonplaceholder/tests/SchemaValidationTest.java\" target=\"_blank\" rel=\"noreferrer\">SchemaValidationTest</a> shows you how it works:</p><pre><code class=\"hljs language-java\">\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">JsonPlaceholderAPI</span> <span class=\"hljs-variable\">jsonPlaceholderAPI</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">JsonPlaceholderAPI</span>();\n\n    <span class=\"hljs-meta\">@Test</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">schemaValidation</span><span class=\"hljs-params\">()</span> {\n        jsonPlaceholderAPI.getPostContent(<span class=\"hljs-number\">1</span>)\n\n                .then()\n                .body(matchesJsonSchemaInClasspath(<span class=\"hljs-string\">&quot;jsonplaceholder-posts-schema.json&quot;</span>));\n    }\n</code></pre><p>You just need to define the schema:</p><pre><code class=\"hljs language-json\">\n<span class=\"hljs-punctuation\">{</span>\n  <span class=\"hljs-attr\">&quot;title&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;Posts schema&quot;</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-attr\">&quot;type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;object&quot;</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-attr\">&quot;properties&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\n    <span class=\"hljs-attr\">&quot;userId&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\n      <span class=\"hljs-attr\">&quot;type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;integer&quot;</span>\n    <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">&quot;id&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\n      <span class=\"hljs-attr\">&quot;type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;integer&quot;</span>\n    <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">&quot;title&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\n      <span class=\"hljs-attr\">&quot;type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;string&quot;</span>\n    <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">&quot;body&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\n      <span class=\"hljs-attr\">&quot;type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;string&quot;</span>\n    <span class=\"hljs-punctuation\">}</span>\n  <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-attr\">&quot;required&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-string\">&quot;userId&quot;</span><span class=\"hljs-punctuation\">,</span> <span class=\"hljs-string\">&quot;id&quot;</span><span class=\"hljs-punctuation\">,</span> <span class=\"hljs-string\">&quot;title&quot;</span><span class=\"hljs-punctuation\">,</span> <span class=\"hljs-string\">&quot;body&quot;</span><span class=\"hljs-punctuation\">]</span>\n<span class=\"hljs-punctuation\">}</span>\n</code></pre><h2>Other methods</h2>\n<p>Obviously, Rest-Assured isn&#39;t limited to get method only. You can add data as well. Let me show how you can simulate a user adding something to your forum. Jsonplaceholder requires UTF-8 encoding, so I needed to modify it.</p><pre><code class=\"hljs language-java\">\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">RestAssuredConfig</span> <span class=\"hljs-variable\">restAssuredConfig</span> <span class=\"hljs-operator\">=</span> RestAssured.config()\n        .encoderConfig(encoderConfig()\n        .defaultContentCharset(<span class=\"hljs-string\">&quot;UTF-8&quot;</span>));\n\n    <span class=\"hljs-keyword\">public</span> Response <span class=\"hljs-title function_\">putNewPost</span><span class=\"hljs-params\">(User user, <span class=\"hljs-type\">int</span> postNumber)</span> {\n        <span class=\"hljs-keyword\">return</span> given()\n                .config(restAssuredConfig)\n                .contentType(JSON)\n                .body(user)\n\n                .<span class=\"hljs-keyword\">when</span>()\n                .put(format(<span class=\"hljs-string\">&quot;%s/posts/%s&quot;</span>, URL, Integer.toString(postNumber)));\n    }\n</code></pre><p>Here is the test:</p><pre><code class=\"hljs language-java\">\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">JsonPlaceholderAPI</span> <span class=\"hljs-variable\">jsonPlaceholderAPI</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">JsonPlaceholderAPI</span>();\n\n    <span class=\"hljs-meta\">@Test</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testPutMethod</span><span class=\"hljs-params\">()</span> {\n        <span class=\"hljs-type\">User</span> <span class=\"hljs-variable\">user</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">User</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">&quot;foo&quot;</span>, <span class=\"hljs-string\">&quot;bar&quot;</span>, <span class=\"hljs-number\">1</span>);\n        jsonPlaceholderAPI.putNewPost(user, <span class=\"hljs-number\">1</span>)\n\n                .then()\n                .statusCode(SC_OK);\n    }\n</code></pre><p>You may wonder if you have to write a custom JSON parser. Fortunately, Rest-Assured does all the work for us, and you just have to specify basic class:</p><pre><code class=\"hljs language-java\">\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">User</span> {\n\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> id;\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> String title;\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> String body;\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> userId;\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">User</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> id, String title, String body, <span class=\"hljs-type\">int</span> userId)</span> {\n        <span class=\"hljs-built_in\">this</span>.id = id;\n        <span class=\"hljs-built_in\">this</span>.title = title;\n        <span class=\"hljs-built_in\">this</span>.body = body;\n        <span class=\"hljs-built_in\">this</span>.userId = userId;\n    }\n}\n</code></pre><p>All tests are available for download on my <a href=\"https://github.com/slawekradzyminski/AwesomeTesting\" target=\"_blank\" rel=\"noreferrer\">GitHub project</a>.</p>"
}