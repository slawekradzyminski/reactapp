{
  "id": "2016-07-30-restful-api-testing-with-rest-assured-1-",
  "title": "RESTful API Testing with Rest-Assured (1)",
  "date": "2016-07-30",
  "categories": [
    "API testing"
  ],
  "tags": [
    "rest-assured",
    "API testing",
    "test automation"
  ],
  "permalink": "/2016/07/restful-api-testing-with-rest-assured-1",
  "content": "<p><img src=\"/images/blog/Rest-Assured-new-brand-identity-lr.jpg\" alt=\"\" style=\"width: 100%;\"></p>\n<p>Before I start writing about API testing let me announce the big news. I released all my Selenium related Java code<br>snippets on <a href=\"https://github.com/slawekradzyminski/AwesomeTesting\" target=\"_blank\" rel=\"noreferrer\">the Github Awesome Testing</a> project. I will update it<br>with every new technical post (including this one - the Rest-Assured tests were already<br>pushed <a href=\"https://github.com/slawekradzyminski/AwesomeTesting/tree/master/src/test/java/restassuredjsonplaceholder\" target=\"_blank\" rel=\"noreferrer\">here</a>).<br>You can follow it and just type <em>&#39;git pull&#39;</em> to get the latest code updates. From my experience, it&#39;s always better to<br>check how things work with IDE/Maven support.</p>\n<p>Some time ago in<br>my <a href=\"http://awesome-testing.com/2016/04/testers-toolbox-alternative-guide.html\" target=\"_blank\" rel=\"noreferrer\">Tester&#39;s toolbox - an alternative guide</a><br>post I recommended you online resources on which you can train your testing<br>skills. <a href=\"http://jsonplaceholder.typicode.com/\" target=\"_blank\" rel=\"noreferrer\">JSONplaceholder</a> is a perfect example of free RESTful API which can be<br>utilized for improving API testing skills. In this post, I&#39;ll show you how to write tests<br>in <a href=\"https://github.com/rest-assured/rest-assured\" target=\"_blank\" rel=\"noreferrer\">the Rest Assured</a> framework.</p>\n<h2>Getting started</h2>\n<p>Rest-Assured tests follow Behaviour-Driven Development <em>given, when, then</em> approach.<br>As <a href=\"http://martinfowler.com/bliki/GivenWhenThen.html\" target=\"_blank\" rel=\"noreferrer\">Martin Fowler</a> nicely explained it:</p>\n<blockquote class=\"blog-quote\"><p>The essential idea is to break down writing a scenario (or test) into three sections:  </p>\n<ul>\n<li><p>The <strong>given</strong> part describes the state of the world before you begin the behavior you&#39;re specifying in this</p><p>  scenario. You can think of it as the pre-conditions to the test.  </p>\n</li>\n<li><p>The <strong>when</strong> section is that behavior that you&#39;re specifying.  </p>\n</li>\n<li><p>Finally the <strong>then</strong> section describes the changes you expect due to the specified behavior.</p>\n</li>\n</ul></p></blockquote><p>To use Rest-Assured, you need to add the following libraries to your project.</p>\n<pre><code class=\"language-xml\">\n</code></pre>\n<h2>Writing the first test</h2>\n<p>Before I start let me explain the convention that I use for Rest-Assured tests. Basically, I split scenarios into two<br>classes:</p>\n<p>a) The first one, called NameAPI (for<br>example <a href=\"https://github.com/slawekradzyminski/AwesomeTesting/blob/master/src/test/java/restassuredjsonplaceholder/utils/JsonPlaceholderAPI.java\" target=\"_blank\" rel=\"noreferrer\">JsonPlaceholderAPI</a>)<br>is responsible for defining requests (<strong>given</strong>+ <strong>when</strong>) and returning ready to validate responses. Each method name<br>in this class starts with <a href=\"http://www.tutorialspoint.com/http/http_methods.htm\" target=\"_blank\" rel=\"noreferrer\">the HTTP method</a> name (get, post,<br>delete...).</p>\n<p>b) The second class, called NameTest (for<br>example <a href=\"https://github.com/slawekradzyminski/AwesomeTesting/blob/master/src/test/java/restassuredjsonplaceholder/tests/GetTest.java\" target=\"_blank\" rel=\"noreferrer\">GetTest</a>)<br>contains all the assertions (<strong>then</strong>).</p>\n<p>This approach nicely separates the setup and assertion phase. You don&#39;t have to follow this path though, that&#39;s my way<br>of keeping those tests readable and maintainable.</p>\n<p>Here is how to code looks like</p>\n<pre><code class=\"language-java\">private static final String URL = &quot;http://jsonplaceholder.typicode.com&quot;;\n\n    public Response getPostContent(int postNumber) {\n        return given()\n                .contentType(JSON)\n\n                .when()\n                .get(format(&quot;%s/posts/%s&quot;, URL, Integer.toString(postNumber)));\n    }\n</code></pre>\n<pre><code class=\"language-java\">private JsonPlaceholderAPI jsonPlaceholderAPI = new JsonPlaceholderAPI();\n\n    @Test\n    public void testGetPostTitle() {\n        jsonPlaceholderAPI.getPostContent(1)\n\n                .then()\n                .body(&quot;title&quot;, equalTo(&quot;sunt aut facere repellat provident occaecati excepturi optio reprehenderit&quot;));\n    }\n</code></pre>\n<p>We are checking here that get a request<br>for <a href=\"http://jsonplaceholder.typicode.com/posts/1\" target=\"_blank\" rel=\"noreferrer\">http://jsonplaceholder.typicode.com/posts/1</a> gives us the correct<br>title. As you can see that&#39;s indeed the case.</p>\n<p>Rest-Assured uses <a href=\"http://www.vogella.com/tutorials/Hamcrest/article.html\" target=\"_blank\" rel=\"noreferrer\">Hamcrest matchers</a> for validation. There are<br>quite a few of<br>them (<a href=\"https://github.com/slawekradzyminski/AwesomeTesting/blob/master/src/test/java/restassuredjsonplaceholder/tests/GetTest.java\" target=\"_blank\" rel=\"noreferrer\">I used 4 different ones</a>),<br>and they are easily expandable. I will show you how to write custom matchers in one of the future posts soon.</p>\n<h2>Schema validation</h2>\n<p>Sometimes you may not want to assert details. You care more about the response types and structure. Rest-Assured<br>supports this approach nicely<br>with <a href=\"https://github.com/rest-assured/rest-assured/wiki/Usage#json-schema-validation\" target=\"_blank\" rel=\"noreferrer\">Schema Validation</a>. <a href=\"https://github.com/slawekradzyminski/AwesomeTesting/blob/master/src/test/java/restassuredjsonplaceholder/tests/SchemaValidationTest.java\" target=\"_blank\" rel=\"noreferrer\">SchemaValidationTest</a><br>shows you how it works:</p>\n<pre><code class=\"language-java\">private JsonPlaceholderAPI jsonPlaceholderAPI = new JsonPlaceholderAPI();\n\n    @Test\n    public void schemaValidation() {\n        jsonPlaceholderAPI.getPostContent(1)\n\n                .then()\n                .body(matchesJsonSchemaInClasspath(&quot;jsonplaceholder-posts-schema.json&quot;));\n    }\n</code></pre>\n<p>You just need to define the schema:</p>\n<pre><code class=\"language-json\">{\n  &quot;title&quot;: &quot;Posts schema&quot;,\n  &quot;type&quot;: &quot;object&quot;,\n  &quot;properties&quot;: {\n    &quot;userId&quot;: {\n      &quot;type&quot;: &quot;integer&quot;\n    },\n    &quot;id&quot;: {\n      &quot;type&quot;: &quot;integer&quot;\n    },\n    &quot;title&quot;: {\n      &quot;type&quot;: &quot;string&quot;\n    },\n    &quot;body&quot;: {\n      &quot;type&quot;: &quot;string&quot;\n    }\n  },\n  &quot;required&quot;: [&quot;userId&quot;, &quot;id&quot;, &quot;title&quot;, &quot;body&quot;]\n}\n</code></pre>\n<h2>Other methods</h2>\n<p>Obviously, Rest-Assured isn&#39;t limited to get method only. You can add data as well. Let me show how you can simulate a<br>user adding something to your forum. Jsonplaceholder requires UTF-8 encoding, so I needed to modify it.</p>\n<pre><code class=\"language-java\">private final RestAssuredConfig restAssuredConfig = RestAssured.config()\n        .encoderConfig(encoderConfig()\n        .defaultContentCharset(&quot;UTF-8&quot;));\n\n    public Response putNewPost(User user, int postNumber) {\n        return given()\n                .config(restAssuredConfig)\n                .contentType(JSON)\n                .body(user)\n\n                .when()\n                .put(format(&quot;%s/posts/%s&quot;, URL, Integer.toString(postNumber)));\n    }\n</code></pre>\n<p>Here is the test:</p>\n<pre><code class=\"language-java\">private JsonPlaceholderAPI jsonPlaceholderAPI = new JsonPlaceholderAPI();\n\n    @Test\n    public void testPutMethod() {\n        User user = new User(1, &quot;foo&quot;, &quot;bar&quot;, 1);\n        jsonPlaceholderAPI.putNewPost(user, 1)\n\n                .then()\n                .statusCode(SC_OK);\n    }\n</code></pre>\n<p>You may wonder if you have to write a custom JSON parser. Fortunately, Rest-Assured does all the work for us, and you<br>just have to specify basic class:</p>\n<pre><code class=\"language-java\">public class User {\n\n    private int id;\n    private final String title;\n    private final String body;\n    private final int userId;\n\n    public User(int id, String title, String body, int userId) {\n        this.id = id;\n        this.title = title;\n        this.body = body;\n        this.userId = userId;\n    }\n}\n</code></pre>\n<p>Simple, isn&#39;t it? :)</p>\n<p>All tests are available for download on my <a href=\"https://github.com/slawekradzyminski/AwesomeTesting\" target=\"_blank\" rel=\"noreferrer\">GitHub project</a>.</p>\n"
}