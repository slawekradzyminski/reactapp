{
  "id": "2019-03-30-disabling-javascript-using-selenium",
  "title": "Disabling JavaScript using Selenium",
  "date": "2019-03-30",
  "categories": [
    "Selenium"
  ],
  "tags": [
    "selenium"
  ],
  "permalink": "/2019/03/disabling-javascript-using-selenium",
  "content": "<img src=\"/images/blog/pobrane2.png\" alt=\"\">\n\n<h2>Introduction</h2>\n<p>Some days ago I was looking for an easy way to disable JavaScript using chromedriver. It turned out to be surprisingly hard and once again I had to find proper <a href=\"https://src.chromium.org/viewvc/chrome/trunk/src/chrome/common/pref_names.cc?view=markup\" target=\"_blank\" rel=\"noreferrer\">Chrome preference</a>in the Chromium source code. If you ever wonder how to do something with your Chrome using Selenium I recommend my own <a href=\"https://www.awesome-testing.com/2016/02/selenium-browser-capabilities-explained.html\" target=\"_blank\" rel=\"noreferrer\">Browser Capabilities explained</a><br>post which has a lot of examples and links where to look for.</p><h2>Why is Javascript-disabled page worth testing?</h2>\n<p>Before we move on to Java demo let&#39;s wonder for a while: why do people disable JavaScript?</p><p><em>a) Speed &amp; Bandwidth</em></p><p>Using Internet with an old computer and a slow connection is incredibly frustrating these days. You can try to throttle bandwidth in your Chrome via Developer tools and try it yourself... For your responsibility.</p><p><em>b) Usability &amp; Accessibility</em></p><p>Relying on javascript does not automatically mean the page is not accessible, although it makes it significantly harder for disabled people. Imagine that content blind person wants to find is hidden behind three JS-invoked actions. Would it be possible to access? Yes. Would it be usable? No.</p><p><em>c) Security &amp; Privacy</em></p><p>Any website can use JavaScript to gather information about things you do (or did) during your browsing session and upload them to an external server. That&#39;s enough reason for privacy-concerned people to disable it. JavaScript can also be used for <a href=\"https://www.awesome-testing.com/2017/11/automate-your-xss-tests-with-selenium.html\" target=\"_blank\" rel=\"noreferrer\">XSS attacks</a>.</p><p>So, from the company perspective: why should we care and test our website with JavaScript disabled?</p><p><em>a) SEO</em></p><p>Perhaps the most important reason. If large chunks of your website rely on pure JavaScript chances are search-engines will be ignoring it.</p><p><em>b) Clients who disable JavaScript</em></p><p>The number of people who disable JS is small... but is it negligent? Even if it&#39;s only 1% of our business can we ignore that?</p><p><em>c) Testing for graceful degradation of JavaScript</em></p><p>Even if we decide that we don&#39;t support our site with JS disabled we should gracefully handle it. We can&#39;t leave our users with a forever loading blank site. We have to present information that we don&#39;t support JS.</p><h2>Chrome</h2>\n<p>As I mentioned above I wasn&#39;t able to disable JavaScript in Chrome using any obvious methods (like setters etc.). I had to pass a map of preferences with magic <code>profile.managed_default_content_settings.javascript</code>. I assume that the code is easy to understand. For details please take a look at my <a href=\"https://www.awesome-testing.com/2016/02/selenium-browser-capabilities-explained.html\" target=\"_blank\" rel=\"noreferrer\">Desired Capabilities explained</a><br>post</p><pre><code class=\"hljs language-java\">\n<span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">PREFS</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;prefs&quot;</span>;\n<span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">JAVASCRIPT_SETTINGS</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;profile.managed_default_content_settings.javascript&quot;</span>;\n<span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">short</span> <span class=\"hljs-variable\">DISABLED</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">2</span>;\n\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-keyword\">public</span> WebDriver <span class=\"hljs-title function_\">newWebDriver</span><span class=\"hljs-params\">()</span> {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ChromeDriver</span>(getChromeOptions());\n    }\n\n    <span class=\"hljs-keyword\">private</span> ChromeOptions <span class=\"hljs-title function_\">getChromeOptions</span><span class=\"hljs-params\">()</span> {\n        <span class=\"hljs-type\">ChromeOptions</span> <span class=\"hljs-variable\">options</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ChromeOptions</span>();\n        options.setExperimentalOption(PREFS, getChromePrefs());\n        <span class=\"hljs-keyword\">return</span> options;\n    }\n\n    <span class=\"hljs-keyword\">private</span> Map&lt;String, Object&gt; <span class=\"hljs-title function_\">getChromePrefs</span><span class=\"hljs-params\">()</span> {\n        Map&lt;String, Object&gt; chromePrefs = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HashMap</span>&lt;&gt;();\n        chromePrefs.put(JAVASCRIPT_SETTINGS, DISABLED);\n        <span class=\"hljs-keyword\">return</span> chromePrefs;\n    }\n\n</code></pre><p>The test is pretty straightforward. We go to main Facebook page and wait until URL is updated with <code>?_fb_noscript=1</code><br>.This is how FB detects users who have disabled JS.</p><p>I&#39;m using <a href=\"https://github.com/FluentLenium/FluentLenium/\" target=\"_blank\" rel=\"noreferrer\">FluentLenium</a> syntax.</p><pre><code class=\"hljs language-java\">\n<span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">FACEBOOK_NO_JS_URL</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;https://www.facebook.com/?_fb_noscript=1&quot;</span>;\n\n    <span class=\"hljs-meta\">@Page</span>\n    <span class=\"hljs-keyword\">private</span> FacebookMainPage facebookMainPage;\n\n    <span class=\"hljs-meta\">@Test</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">checkJsDisabled</span><span class=\"hljs-params\">()</span> {\n        facebookMainPage.go();\n        waitForFacebookNoJsUrlAppender();\n    }\n\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">waitForFacebookNoJsUrlAppender</span><span class=\"hljs-params\">()</span> {\n        await().atMost(<span class=\"hljs-number\">2</span>, TimeUnit.SECONDS).until(\n                () -&gt; getDriver().getCurrentUrl().equals(FACEBOOK_NO_JS_URL));\n    }\n\n</code></pre><h2>Firefox</h2>\n<p>Firefox setup is much easier. Only one flag has to be set to false: <em>javascript.enabled</em>.</p><pre><code class=\"hljs language-java\">\n<span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">JAVASCRIPT_ENABLED</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;javascript.enabled&quot;</span>;\n\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-keyword\">public</span> WebDriver <span class=\"hljs-title function_\">newWebDriver</span><span class=\"hljs-params\">()</span> {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">FirefoxDriver</span>(getFirefoxOptions());\n    }\n\n    <span class=\"hljs-keyword\">private</span> FirefoxOptions <span class=\"hljs-title function_\">getFirefoxOptions</span><span class=\"hljs-params\">()</span> {\n        <span class=\"hljs-type\">FirefoxOptions</span> <span class=\"hljs-variable\">options</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">FirefoxOptions</span>();\n        options.addPreference(JAVASCRIPT_ENABLED, <span class=\"hljs-literal\">false</span>);\n        <span class=\"hljs-keyword\">return</span> options;\n    }\n\n</code></pre><p>The complete code can be found on my <a href=\"https://github.com/slawekradzyminski/AwesomeTesting/commit/68cdb2c98a8282e8b48d79fcbcc8ced3b12def92\" target=\"_blank\" rel=\"noreferrer\">GitHub project</a>.</p><p>Image credit: <a href=\"https://tomthedev.com/blog-page/is-there-a-life-without-javascript\" target=\"_blank\" rel=\"noreferrer\">tomthedev</a></p>"
}