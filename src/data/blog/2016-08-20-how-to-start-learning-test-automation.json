{
  "id": "2016-08-20-how-to-start-learning-test-automation",
  "title": "How to start learning test automation",
  "date": "2016-08-20",
  "categories": [
    "Testing thoughts"
  ],
  "tags": [
    "learning"
  ],
  "permalink": "/2016/08/how-to-start-learning-test-automation",
  "content": "<p><img src=\"/images/blog/selenium.png\" alt=\"\" style=\"width: 100%;\"></p>\n<p>In one of my previous<br>posts - <a href=\"https://awesome-testing.com/2016/06/how-to-become-software-tester.html\" target=\"_blank\" rel=\"noreferrer\">How to become a software tester</a>, I<br>gave you 10 practical advice on how to get yourself running in a fascinating software testing industry. On another<br>post - <a href=\"https://awesome-testing.com/2016/03/learning-pathways-for-testers.html\" target=\"_blank\" rel=\"noreferrer\">Learning pathways for testers</a>, which<br>was addressed for more experienced engineers, I described how to thrive as a tester not only now, but also in the long<br>run. Today I&#39;d like to describe a topic which places somewhere between those two. I know that there is a lot of people<br>who do only laborious manual testing and would like to automate it but don&#39;t know-how.</p>\n<p>The following post is based on my personal experience (as I successfully completed such a journey for myself) and<br>numerous online discussions.</p>\n<h3>Prerequisites</h3>\n<p>Before you start the est automation journey make sure you have at least a basic understanding of the following topics:</p>\n<p><strong>1.</strong> Agile and general software development life cycle knowledge</p>\n<p>Testing should be actively presented throughout each software development life cycle phase. You need to make sure that<br>your application would be testable. Some decisions made at the beginning of the project can greatly simplify automated<br>testing. For example sites with nicely implemented &#39;id&#39; names are much easier to test via Selenium.</p>\n<p>Thankfully there are two great books on this topic written by Lisa Crispin and Janet<br>Gregory - <a href=\"https://www.amazon.com/Agile-Testing-Practical-Guide-Testers/dp/0321534468/\" target=\"_blank\" rel=\"noreferrer\">Agile Testing</a><br>and <a href=\"https://www.amazon.com/More-Agile-Testing-Addison-Wesley-Signature/dp/0321967054/\" target=\"_blank\" rel=\"noreferrer\">More Agile Testing</a>.</p>\n<p><strong>2</strong>. Continuous Integration, Delivery, and Deployment basic knowledge</p>\n<p>You need to understand where testing stands when it comes to CI &amp; CD. Think for a moment where would you like to place<br>testing in your application pipeline.</p>\n<p>Jez Humble and David Ferley wrote a nice book about this topic, which you really should read,<br>called <a href=\"https://www.amazon.com/Continuous-Delivery-Deployment-Automation-Addison-Wesley/dp/0321601912\" target=\"_blank\" rel=\"noreferrer\">Continuous Delivery</a>.</p>\n<p><strong>3.</strong> Test automation return of investment consideration</p>\n<p>This is a very complicated topic (<br>see <a href=\"http://www.sqetraining.com/sites/default/files/articles/XDD8502filelistfilename1_0.pdf\" target=\"_blank\" rel=\"noreferrer\">SQE training</a><br>and <a href=\"https://www.ispe.org/pe-ja/roi-of-test-automation.pdf\" target=\"_blank\" rel=\"noreferrer\">ISPE</a>papers for details) and your expectations should be<br>real. Do not think that automated tests would solve all the problems and magically improve application quality.<br>Automation done wrong can give you a lot of headaches. Don&#39;t forget that the test automation code almost always requires<br>maintenance.</p>\n<h3>Motivation - Personal benefits of being a highly technical tester</h3>\n<p>If you&#39;re still not sure whether automation path is correct, here is a list of obvious benefits that can motivate you:</p>\n<p><strong>1.</strong> More fun</p>\n<p>If you have ever done manual regression testing you know the pain.</p>\n<p>Technical tester analyses problems, investigate possible solutions, implement them, on an almost daily basis. The job<br>becomes more and more intellectually demanding. You start taking coffee breaks not only because you&#39;re bored, but<br>because your mind really needs them.</p>\n<p><strong>2.</strong> More possibilities</p>\n<p>By expanding your knowledge on the automation field you become more and more desirable not only by peers but also for<br>recruiters. Your employability is skyrocketing. This gives you a certain level of security - you know that even in the<br>unlikely event you got fired, you will quickly find a new job.</p>\n<p><strong>3</strong>. More respect</p>\n<p>In <a href=\"https://www.amazon.com/Google-Tests-Software-James-Whittaker/dp/0321803027\" target=\"_blank\" rel=\"noreferrer\">How Google Tests Software</a>authors<br>describe that at one point they realized a simple truth - in order for them to be fully respectable team members, they<br>need to start coding. They finished the journey and are now Currently they are fully integrated team members (as you can<br>read in<br>nice <a href=\"http://blog.fogcreek.com/embedded-testers-in-development-teams-interview-with-trish-khoo/\" target=\"_blank\" rel=\"noreferrer\">Trish Khoo interview</a>).<br>Aim for the same.</p>\n<p><strong>4.</strong> More money</p>\n<p>With more skills come more money. Simple as that :)</p>\n<h3>Learning at work</h3>\n<p>You should have as many learning opportunities at work as possible. This requires both companies that understands test<br>automation benefits and skilled people around you.</p>\n<p><strong>1.</strong> Company consideration</p>\n<blockquote class=\"blog-quote\"><p>There are three types of management commitment needed for successful test automation: money, time and</p><p>resources.<a href=\"http://www.softwaretestpro.com/itemassets/4772/automatedtestinghandbook.pdf\" target=\"_blank\" rel=\"noreferrer\">Automated Testing Handbook</a>  </p></p></blockquote><p>Test automation is a software engineering project. It needs to planned, managed, developed, and maintained by skilled<br>people. As a lone manual tester without necessary programming skills, you won&#39;t be able to transition. This is harsh<br>true whether you like it or not. You can play with Selenium on free time, but don&#39;t expect anything fancy. Get<br>managerial buy-in, change project, or seek junior tester position somewhere else.</p>\n<p>After acquiring basic skills you will be able to choose correct frameworks, languages, setup CI, etc., but you really<br>shouldn&#39;t do that as ex manual tester. Don&#39;t fight uphill battle... yet.</p>\n<p><strong>2.</strong> People consideration</p>\n<p>If you&#39;re my avid reader you know how my emphasis I put on mentorship. This is especially true when it comes to skill<br>transition. You really should begin your journey with someone who can help you get started. Focus on writing automated<br>tests and expanding your programming knowledge only. Skilled mentor or just senior tester can give you fast feedback,<br>propose solutions, review code, and show areas of improvement. He can also handle a few harder tasks for you so that you<br>won&#39;t get stuck at one thing forever.</p>\n<p>Always try to surround yourself with smarter people.</p>\n<h3>Learning after work</h3>\n<p>If you&#39;re determined enough to learn you can do that after work by yourself. This obviously has a multitude of<br>drawbacks. I don&#39;t recommend it, make sure you have used every opportunity for learning at work first. After finishing<br>something try to seek mentors online as it&#39;s always better to have your work<br>reviewed.<a href=\"https://awesome-testing.com/2016/06/how-to-become-software-tester.html\" target=\"_blank\" rel=\"noreferrer\">Here</a>is a decent list of helpful<br>online communities.</p>\n<p>I&#39;ll give you two recommended learning paths. I chose Java, Selenium, and Rest-Assured because they have a multitude of<br>online tutorials. If you happen to know any other language use it. In case you get stuck use Google to find solutions.<br>There would be plenty of them available.</p>\n<p><strong>Path 1 - GUI Automation with Selenium</strong></p>\n<p>1. Learn the basics of programming language first - preferably with <a href=\"http://javafortesters.com/\" target=\"_blank\" rel=\"noreferrer\">Java for Testers</a><br>book.</p>\n<p>2. Learn the basics of Selenium - preferably with <a href=\"http://www.guru99.com/selenium-tutorial.html\" target=\"_blank\" rel=\"noreferrer\">Guru99 Selenium</a><br>course.</p>\n<p>3. Start writing real tests on the existing website, for<br>example,<a href=\"http://the-internet.herokuapp.com/\" target=\"_blank\" rel=\"noreferrer\">http://the-internet.herokuapp.com/Â </a></p>\n<p>4. Make sure you understand how Maven/Gradle, TestNG/Junit work.</p>\n<p><strong>Path 2 - REST API Automation with Rest-Assured</strong></p>\n<p>1. Learn the basics of programming language first - preferably with<a href=\"http://javafortesters.com/\" target=\"_blank\" rel=\"noreferrer\">Java for Testers</a>book</p>\n<p>2. Learn HTTP protocol with<a href=\"http://shop.oreilly.com/product/9781565925090.d\" target=\"_blank\" rel=\"noreferrer\">HTTP: The definitive guide</a></p>\n<p>3. Learn about REST API - Microsoft has recently published<br>its <a href=\"https://github.com/Microsoft/api-guidelines/blob/master/Guidelines.md\" target=\"_blank\" rel=\"noreferrer\">API Guide</a> with useful links</p>\n<p>4. Learn Rest-Assured<br>with <a href=\"http://www.baeldung.com/rest-assured-tutorial\" target=\"_blank\" rel=\"noreferrer\">Baeldung</a>, <a href=\"http://testdetective.com/rest-assured-framework-overview/\" target=\"_blank\" rel=\"noreferrer\">Test Detective</a><br>or some different guide (there is plenty of them)</p>\n<p>5. Write tests against real API.<br>Check <a href=\"https://awesome-testing.com/2016/07/restful-api-testing-with-rest-assured-1.html\" target=\"_blank\" rel=\"noreferrer\">my post</a>which you can use as a<br>reference.</p>\n<p>6. Make sure you understand how Maven/Gradle, TestNG/Junit work.</p>\n<p>After completing those two paths you shouldn&#39;t have problems finding a new &amp; better job.</p>\n"
}