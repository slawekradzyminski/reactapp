{
  "id": "2023-01-10-maximizing-performance-with-gatling-a-beginners-guide-to-load-testing",
  "title": "Maximizing Performance with Gatling",
  "date": "2023-01-10",
  "categories": [
    "Performance testing"
  ],
  "tags": [
    "performance testing"
  ],
  "permalink": "/2023/01/maximizing-performance-with-gatling",
  "content": "<p><img src=\"/images/blog/1582210782200.png\" alt=\"\" style=\"width: 100%;\"></p>\n<p><a href=\"https://gatling.io\" target=\"_blank\" rel=\"noreferrer\">Gatling</a> is a powerful open-source load testing tool designed to help developers and performance<br>engineers test the performance and scalability of their web applications. It&#39;s written in Scala and it&#39;s based on<br>the <a href=\"https://akka.io\" target=\"_blank\" rel=\"noreferrer\">Akka</a> toolkit, which means it&#39;s highly extensible and easily integrated with other tools.</p>\n<p>One of the key features of Gatling is its intuitive and easy-to-use DSL (domain-specific language) for building test<br>scenarios. This allows developers to write load tests in a natural and readable language, making it easy to understand<br>and maintain. Gatling also supports multiple protocols such as HTTP, HTTPS, WebSockets, and JMS, and it can be used to<br>test applications written in different languages and running on different platforms.</p>\n<p>Gatling also provides detailed and accurate results, with real-time monitoring and reporting capabilities. It generates<br>HTML reports that provide a clear and concise overview of the test results, including request and response details,<br>response time distribution, and error statistics. Gatling also allows you to customize the reports by adding your own<br>charts and statistics.</p>\n<p>Another advantage of Gatling is its high performance. It&#39;s designed to handle large numbers of concurrent users, making<br>it ideal for testing high-traffic web applications. Gatling&#39;s architecture is based on Akka, which is a high-performance<br>toolkit for building concurrent and distributed systems. This allows Gatling to handle large numbers of requests with<br>minimal resource usage.</p>\n<p>In summary, Gatling is a powerful and flexible load testing tool that is easy to use and provides detailed and accurate<br>results. Its intuitive DSL, support for multiple protocols, and high performance make it an ideal choice for testing web<br>applications of all sizes and complexities.</p>\n<p>It&#39;s important to note that Gatling also has a commercial version called Gatling Frontline which offer additional<br>features like distributed testing, advanced analytics, and real-time reporting.</p>\n<p>If you&#39;re looking for a load testing tool that is easy to use, provides detailed results, and can handle large numbers<br>of concurrent users, then Gatling may be the perfect choice for you. So, give it a try and see how it can help you<br>improve the performance and scalability of your web applications.</p>\n<p>You can write Gatling tests in popular JVM languages (Java, Scala &amp; Kotlin).</p>\n<p><strong>Scala test example</strong></p>\n<p>Here is an example of a simple load test in Java using Gatling for a REST API endpoint that returns JSON:</p>\n<pre><code class=\"language-scala\">import io.gatling.core.Predef._\nimport io.gatling.http.Predef._\nimport scala.concurrent.duration._\n\nclass SimpleLoadTest extends Simulation {\n\n  val httpConf = http.baseUrl(&quot;http://localhost:8080&quot;)\n    .acceptHeader(&quot;application/json&quot;)\n\n  val scn = scenario(&quot;Simple Load Test&quot;)\n    .exec(http(&quot;request_1&quot;)\n      .get(&quot;/api/endpoint&quot;)\n      .check(status.is(200))\n      .check(jsonPath(&quot;$.key&quot;).is(&quot;value&quot;))\n    )\n\n  setUp(\n    scn.inject(\n      constantUsersPerSec(10) during (10 seconds)\n    ).protocols(httpConf)\n  )\n}\n</code></pre>\n<p>In this example, the test sends a GET request to the endpoint &quot;/api/endpoint&quot; on the localhost at port 8080, and expects<br>a 200 OK response with a JSON body containing a key-value pair where the key is &quot;key&quot; and the value is &quot;value&quot;. The test<br>will run for 10 seconds and will gradually ramp up to 10 users per second.</p>\n<p><strong>Java test example</strong></p>\n<p>Here is an example of a simple load test in Java using Gatling&#39;s core API for a REST API endpoint that returns JSON:</p>\n<pre><code class=\"language-java\">import io.gatling.core.Predef;\nimport io.gatling.core.scenario.Simulation;\nimport io.gatling.core.structure.ScenarioBuilder;\nimport io.gatling.http.Predef;\nimport io.gatling.http.protocol.HttpProtocolBuilder;\n\npublic class SimpleLoadTest extends Simulation {\n\n        HttpProtocolBuilder httpConf = Predef.http().baseUrl(&quot;http://localhost:8080&quot;)\n                .acceptHeader(&quot;application/json&quot;);\n\n        ScenarioBuilder scn = Predef.scenario(&quot;Simple Load Test&quot;)\n                .exec(Predef.http(&quot;request_1&quot;)\n                        .get(&quot;/api/endpoint&quot;)\n                        .check(Predef.status().is(200))\n                        .check(Predef.jsonPath(&quot;$.key&quot;).is(&quot;value&quot;))\n                );\n\n     {\n        Predef.setUp(\n                scn.inject(Predef.constantUsersPerSec(10).during(10))\n                .protocols(httpConf)\n        );\n    }\n}\n</code></pre>\n<p>This test sends a GET request to the endpoint &quot;/api/endpoint&quot; on the localhost at port 8080, and expects a 200 OK<br>response with a JSON body containing a key-value pair where the key is &quot;key&quot; and the value is &quot;value&quot;. The test will run<br>for 10 seconds and will gradually ramp up to 10 users per second.</p>\n<p>You can find the working projects on my GitHub:</p>\n<ul>\n<li><p>tested<br>application <a href=\"https://github.com/slawekradzyminski/test-secure-backend\" target=\"_blank\" rel=\"noreferrer\">https://github.com/slawekradzyminski/test-secure-backend</a></p>\n</li>\n<li><p>Gatling tests in<br>Scala <a href=\"https://github.com/slawekradzyminski/performance-tests\" target=\"_blank\" rel=\"noreferrer\">https://github.com/slawekradzyminski/performance-tests</a></p>\n</li>\n<li><p>Gatling tests in<br>Java <a href=\"https://github.com/slawekradzyminski/performance-tests-java\" target=\"_blank\" rel=\"noreferrer\">https://github.com/slawekradzyminski/performance-tests-java</a></p>\n</li>\n</ul>\n"
}