{
  "id": "2016-01-27-introducing-fluentlenium-1-",
  "title": "Introducing FluentLenium 1",
  "date": "2016-01-27",
  "category": "Selenium",
  "permalink": "/2016/01/introducing-fluentlenium-1",
  "content": "<img src=\"/images/blog/developer.png\" alt=\"\">\n\n<p>I had started a new initiative recently - Facebook group <a href=\"https://www.facebook.com/groups/booksIT/\" target=\"_blank\" rel=\"noreferrer\">Technology Books</a>. Feel free to join if you look for reading recommendations or want to share your thoughts. Because of that, I had to accept hundreds of joining requests from many people. (Un)fortunately, repetitive tasks quickly bore me, so I figured out it&#39;s the perfect opportunity to not only automate it but also to feature it on this blog. Here is my journey, which now becomes our journey.</p><p>We are going to use Java and <a href=\"https://github.com/FluentLenium/FluentLenium\" target=\"_blank\" rel=\"noreferrer\">FluentLenium</a> framework which nicely extends the famous <a href=\"http://www.seleniumhq.org/projects/webdriver/\" target=\"_blank\" rel=\"noreferrer\">Selenium WebDriver</a>. This project is being actively developed right now and you should really try it. Naming conventions used in FluentLenium are really intuitive, and writing tests becomes really easy and rewarding. <a href=\"https://github.com/FluentLenium/FluentLenium/blob/master/README.markdown\" target=\"_blank\" rel=\"noreferrer\">Documentation</a> is quite nice too.</p><p>At first, we need to clearly define what we want to achieve. The scenario looks like that:</p><p><em>As a logged in <a href=\"https://www.facebook.com/groups/booksIT/\" target=\"_blank\" rel=\"noreferrer\">Technology Books</a> admin I want to accept all existing joining requests.</em></p><p>So let&#39;s get started. At first, we need to add Maven dependency for our project. I&#39;m going to use TestNG because of it&#39;s <a href=\"http://www.softwaretestinghelp.com/testng-annotations-in-selenium/\" target=\"_blank\" rel=\"noreferrer\">powerful annotations</a>:</p><pre><code class=\"hljs language-plaintext\">\n&lt;dependency&gt;\n    &lt;groupId&gt;org.fluentlenium&lt;/groupId&gt;\n    &lt;artifactId&gt;fluentlenium-testng&lt;/artifactId&gt;\n    &lt;version&gt;1.0.0&lt;/version&gt;\n    &lt;scope&gt;test&lt;/scope&gt;\n&lt;/dependency&gt;\n</code></pre><p>Having <a href=\"http://martinfowler.com/bliki/PageObject.html\" target=\"_blank\" rel=\"noreferrer\">Page Object Pattern</a> in mind we need to code the following things:</p><ul>\n<li>Make FacebookLogOutPage class<br></li>\n<li>Create logic for the non-version-tracked user.properties file (which will contain Facebook login and password)</li>\n<li>Write authentication method with @BeforeMethod annotation</li>\n<li>Make FacebookApproveGroupRequestPage class</li>\n<li>Write accept request methods with @Test annotation</li>\n</ul>\n<p><strong>Coding begins here!</strong></p><p><strong>1</strong>. If you are familiar with Selenium WebDriver you&#39;ll be surprised to realize that FleuntLenium allows CSS Selectors only. I prefer them over XPath anyway, because they are <a href=\"http://elementalselenium.com/tips/32-xpath-vs-css\" target=\"_blank\" rel=\"noreferrer\">faster and more readable</a>. If you like identifying elements via id just add <strong>#</strong> sign, and via class add <strong>.</strong> sign. Using developer tools console makes element identification very easy. See the example screenshot below.</p><img src=\"/images/blog/Screenshot%2B2016-01-17%2B09.03.34.png\" alt=\"\">\n\n<p>So FacebookLoggedOutPage.class may look like this:</p><pre><code class=\"hljs language-java\">\n<span class=\"hljs-keyword\">package</span> org.fluentlenium.sample.pages;\n\n<span class=\"hljs-keyword\">import</span> org.fluentlenium.core.FluentPage;\n\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">FacebookLoggedOutPage</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">FluentPage</span> {\n\n  <span class=\"hljs-meta\">@Override</span>\n  <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">getUrl</span><span class=\"hljs-params\">()</span> {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;https://www.facebook.com&quot;</span>;\n  }\n\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">WAITER_SELECTOR_AFTER_LOGIN</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;.mentionsTextarea&quot;</span>;\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">LOGIN_FIELD</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;#email&quot;</span>;\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">PASS_FIELD</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;#pass&quot;</span>;\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">SIGN_IN_BUTTON</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;#loginbutton&quot;</span>;\n\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">login</span><span class=\"hljs-params\">(String email, String password)</span> {\n    fill(LOGIN_FIELD).with(email);\n    fill(PASS_FIELD).with(password);\n    find(SIGN_IN_BUTTON).first().click();\n  }\n\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">verifySuccessfulLogin</span><span class=\"hljs-params\">()</span> {\n    await().until(WAITER_SELECTOR_AFTER_LOGIN).areDisplayed();\n  }\n\n}\n</code></pre><p><strong>2</strong>. Now we need a way to store our user credentials locally. To achieve that we need users.properties file. Obviously, I didn&#39;t share my credentials here</p><pre><code class=\"hljs language-plaintext\">\nemail=www.awesome-testing.blogspot.com password=wwww.awesome-bookreviews.blogspot.com\n</code></pre><p>And LoadProperties method which loads them to our code:</p><pre><code class=\"hljs language-java\">\n<span class=\"hljs-keyword\">package</span> org.fluentlenium.sample.support;\n\n<span class=\"hljs-keyword\">import</span> java.io.FileInputStream;\n<span class=\"hljs-keyword\">import</span> java.io.IOException;\n<span class=\"hljs-keyword\">import</span> java.util.Properties;\n\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">LoadProperties</span> {\n\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">PATH_TO_PROPERTIES</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;/Users/s.radzyminski/IdeaProjects/slawek/FluentLenium/fluentlenium-testng/src/test/java/org/fluentlenium/sample/resources/user.properties&quot;</span>;\n\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">Properties</span> <span class=\"hljs-variable\">user</span> <span class=\"hljs-operator\">=</span> loadProperties(PATH_TO_PROPERTIES);\n\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> Properties <span class=\"hljs-title function_\">loadProperties</span><span class=\"hljs-params\">(String filePath)</span> {\n    <span class=\"hljs-type\">Properties</span> <span class=\"hljs-variable\">properties</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Properties</span>();\n    <span class=\"hljs-keyword\">try</span> {\n        <span class=\"hljs-type\">FileInputStream</span> <span class=\"hljs-variable\">f</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">FileInputStream</span>(filePath);\n        properties.load(f);\n    } <span class=\"hljs-keyword\">catch</span> (IOException e) {\n        e.printStackTrace();\n    }\n    <span class=\"hljs-keyword\">return</span> properties;\n  }\n\n}\n</code></pre><p><strong>3</strong>. We are ready for the authentication method which will log in our admin to Facebook. Note how intuitive the syntax is and how easy the code looks</p><pre><code class=\"hljs language-java\">\n\n   <span class=\"hljs-keyword\">private</span> FacebookLoggedOutPage fbLogOutPage;\n\n   <span class=\"hljs-meta\">@BeforeMethod</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">authenticate</span><span class=\"hljs-params\">()</span> {\n        fbLogOutPage = createPage(FacebookLoggedOutPage.class);\n        fbLogOutPage.go();\n        fbLogOutPage.login(EMAIL, PASSWORD);\n        fbLogOutPage.verifySuccessfulLogin();\n    }\n</code></pre><p><strong>4</strong>. Ok, we are already logged in so we need to go for GroupApprovePage now...</p><pre><code class=\"hljs language-java\">\n<span class=\"hljs-keyword\">package</span> org.fluentlenium.sample.pages;\n\n<span class=\"hljs-keyword\">import</span> org.fluentlenium.core.FluentPage;\n\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">GroupApprovePage</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">FluentPage</span> {\n\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">APPROVE_ALL_BUTTON</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;[rel=async-post]&quot;</span>;\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">CONFIRM_APPROVAL_BUTTON</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;.layerConfirm&quot;</span>;\n\n  <span class=\"hljs-meta\">@Override</span>\n  <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">getUrl</span><span class=\"hljs-params\">()</span> {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;https://www.facebook.com/groups/booksIT/requests/?notif_t=group_r2j&quot;</span>;\n  }\n\n  <span class=\"hljs-meta\">@Override</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">isAt</span><span class=\"hljs-params\">()</span> {\n    await().until(APPROVE_ALL_BUTTON).isPresent();\n  }\n\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">approveAll</span><span class=\"hljs-params\">()</span> {\n    find(APPROVE_ALL_BUTTON).first().click();\n  }\n\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">confirm</span><span class=\"hljs-params\">()</span> {\n    await().until(CONFIRM_APPROVAL_BUTTON).isPresent();\n    findFirst(CONFIRM_APPROVAL_BUTTON).click();\n  }\n\n}\n</code></pre><p><strong>5</strong>. ...And Accept all requestors. Here is how it looks like finally:</p><pre><code class=\"hljs language-java\">\n<span class=\"hljs-keyword\">package</span> org.fluentlenium.sample.tests;\n\n<span class=\"hljs-keyword\">import</span> org.fluentlenium.adapter.FluentTestNg;\n<span class=\"hljs-keyword\">import</span> org.fluentlenium.sample.pages.FacebookLoggedOutPage;\n<span class=\"hljs-keyword\">import</span> org.fluentlenium.sample.pages.GroupApprovePage;\n<span class=\"hljs-keyword\">import</span> org.fluentlenium.sample.support.LoadProperties;\n<span class=\"hljs-keyword\">import</span> org.testng.annotations.BeforeMethod;\n<span class=\"hljs-keyword\">import</span> org.testng.annotations.Test;\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">FacebookTests</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">FluentTestNg</span> {\n\n    <span class=\"hljs-keyword\">private</span> FacebookLoggedOutPage fbLogOutPage;\n    <span class=\"hljs-keyword\">private</span> GroupApprovePage groupApprovePage;\n\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">EMAIL</span> <span class=\"hljs-operator\">=</span> LoadProperties.user.getProperty(<span class=\"hljs-string\">&quot;email&quot;</span>);\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">PASSWORD</span> <span class=\"hljs-operator\">=</span> LoadProperties.user.getProperty(<span class=\"hljs-string\">&quot;password&quot;</span>);\n\n    <span class=\"hljs-meta\">@BeforeMethod</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">authenticate</span><span class=\"hljs-params\">()</span> {\n        fbLogOutPage = createPage(FacebookLoggedOutPage.class);\n        fbLogOutPage.go();\n        fbLogOutPage.login(EMAIL, PASSWORD);\n        fbLogOutPage.verifySuccessfulLogin();\n    }\n\n    <span class=\"hljs-meta\">@Test</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">acceptAllPokemons</span><span class=\"hljs-params\">()</span> {\n        groupApprovePage = createPage(GroupApprovePage.class);\n        groupApprovePage.go();\n        groupApprovePage.isAt();\n        groupApprovePage.approveAll();\n        groupApprovePage.confirm();\n    }\n\n}\n</code></pre><p>Please take a closer look at how strong FluentLenium is when it comes to dynamic waiting. This is one of the most important elements when it comes to testing automation projects. There is a lot of bad information about how we should avoid timeout exceptions on public forums and blogs (even on the stack). Please get familiar with Chapter 4 of <a href=\"http://www.amazon.com/Mastering-Selenium-WebDriver-Mark-Collin/dp/1784394351\" target=\"_blank\" rel=\"noreferrer\">Mastering Selenium WebDriver</a> if you have problems with them. Googling may lead you to adopt bad practices.</p><p>Code from steps 1-5 is available on my <a href=\"https://github.com/slawekradzyminski/awesome-testing.blogspot.com\" target=\"_blank\" rel=\"noreferrer\">GitHub</a>.</p><p>Bonus content:</p><p>a) I&#39;m really happy after being featured as a new face of polish testing by <a href=\"http://www.testerzy.pl/baza-wiedzy/ludzie-i-trendy-w-polskim-testowaniu-2016\" target=\"_blank\" rel=\"noreferrer\">testerzy.pl</a>. Huge motivation boost to keep up blogging work.</p><p>b) You may have noticed (1) in the title. I&#39;ll continue FluentLenium / test automation series in the future. I&#39;ll discuss why this test isn&#39;t exactly perfect. Or maybe do you know already? Please let me know in the comment section.</p><p>c) Main image credit:<a href=\"http://www.testautomationfx.com/\" target=\"_blank\" rel=\"noreferrer\">www.testautomationfx.com</a></p>"
}