{
  "id": "2016-01-27-introducing-fluentlenium-1-",
  "title": "Introducing FluentLenium 1",
  "date": "2016-01-27",
  "categories": [
    "Selenium"
  ],
  "tags": [
    "selenium",
    "fluentlenium",
    "test automation",
    "UI testing"
  ],
  "permalink": "/2016/01/introducing-fluentlenium-1",
  "content": "<p><img src=\"/images/blog/developer.png\" alt=\"\" style=\"width: 100%;\"></p>\n<p>I had started a new initiative recently - Facebook group <a href=\"https://www.facebook.com/groups/booksIT/\" target=\"_blank\" rel=\"noreferrer\">Technology Books</a>.<br>Feel free to join if you look for reading recommendations or want to share your thoughts. Because of that, I had to<br>accept hundreds of joining requests from many people. (Un)fortunately, repetitive tasks quickly bore me, so I figured<br>out it&#39;s the perfect opportunity to not only automate it but also to feature it on this blog. Here is my journey, which<br>now becomes our journey.</p>\n<p>We are going to use Java and <a href=\"https://github.com/FluentLenium/FluentLenium\" target=\"_blank\" rel=\"noreferrer\">FluentLenium</a> framework which nicely extends<br>the famous <a href=\"http://www.seleniumhq.org/projects/webdriver/\" target=\"_blank\" rel=\"noreferrer\">Selenium WebDriver</a>. This project is being actively developed<br>right now and you should really try it. Naming conventions used in FluentLenium are really intuitive, and writing tests<br>becomes really easy and<br>rewarding. <a href=\"https://github.com/FluentLenium/FluentLenium/blob/master/README.markdown\" target=\"_blank\" rel=\"noreferrer\">Documentation</a> is quite nice too.</p>\n<p>At first, we need to clearly define what we want to achieve. The scenario looks like that:</p>\n<p><em>As a logged in <a href=\"https://www.facebook.com/groups/booksIT/\" target=\"_blank\" rel=\"noreferrer\">Technology Books</a> admin I want to accept all existing joining<br>requests.</em></p>\n<p>So let&#39;s get started. At first, we need to add Maven dependency for our project. I&#39;m going to use TestNG because of it&#39;<br>s <a href=\"http://www.softwaretestinghelp.com/testng-annotations-in-selenium/\" target=\"_blank\" rel=\"noreferrer\">powerful annotations</a>:</p>\n<pre><code class=\"language-xml\">&lt;dependency&gt;\n    &lt;groupId&gt;org.fluentlenium&lt;/groupId&gt;\n    &lt;artifactId&gt;fluentlenium-testng&lt;/artifactId&gt;\n    &lt;version&gt;1.0.0&lt;/version&gt;\n    &lt;scope&gt;test&lt;/scope&gt;\n&lt;/dependency&gt;\n</code></pre>\n<p>Having <a href=\"http://martinfowler.com/bliki/PageObject.html\" target=\"_blank\" rel=\"noreferrer\">Page Object Pattern</a> in mind we need to code the following<br>things:</p>\n<ul>\n<li>Make FacebookLogOutPage class  </li>\n<li>Create logic for the non-version-tracked user.properties file (which will contain Facebook login and password)</li>\n<li>Write authentication method with @BeforeMethod annotation</li>\n<li>Make FacebookApproveGroupRequestPage class</li>\n<li>Write accept request methods with @Test annotation</li>\n</ul>\n<p><strong>Coding begins here!</strong></p>\n<p><strong>1</strong>. If you are familiar with Selenium WebDriver you&#39;ll be surprised to realize that FleuntLenium allows CSS Selectors<br>only. I prefer them over XPath anyway, because they<br>are <a href=\"http://elementalselenium.com/tips/32-xpath-vs-css\" target=\"_blank\" rel=\"noreferrer\">faster and more readable</a>. If you like identifying elements via<br>id just add <strong>#</strong> sign, and via class add <strong>.</strong> sign. Using developer tools console makes element identification very<br>easy. See the example screenshot below.</p>\n<p><img src=\"/images/blog/Screenshot%2B2016-01-17%2B09.03.34.png\" alt=\"\" style=\"width: 100%;\"></p>\n<p>So FacebookLoggedOutPage.class may look like this:</p>\n<pre><code class=\"language-java\">package org.fluentlenium.sample.pages;\n\nimport org.fluentlenium.core.FluentPage;\n\n  public class FacebookLoggedOutPage extends FluentPage {\n\n  @Override\n  public String getUrl() {\n    return &quot;https://www.facebook.com&quot;;\n  }\n\n  private static final String WAITER_SELECTOR_AFTER_LOGIN = &quot;.mentionsTextarea&quot;;\n  private static final String LOGIN_FIELD = &quot;#email&quot;;\n  private static final String PASS_FIELD = &quot;#pass&quot;;\n  private static final String SIGN_IN_BUTTON = &quot;#loginbutton&quot;;\n\n  public void login(String email, String password) {\n    fill(LOGIN_FIELD).with(email);\n    fill(PASS_FIELD).with(password);\n    find(SIGN_IN_BUTTON).first().click();\n  }\n\n  public void verifySuccessfulLogin() {\n    await().until(WAITER_SELECTOR_AFTER_LOGIN).areDisplayed();\n  }\n\n}\n</code></pre>\n<p><strong>2</strong>. Now we need a way to store our user credentials locally. To achieve that we need users.properties file.<br>Obviously, I didn&#39;t share my credentials here</p>\n<pre><code class=\"language-properties\">email=www.awesome-testing.blogspot.com\npassword=wwww.awesome-bookreviews.blogspot.com\n</code></pre>\n<p>And LoadProperties method which loads them to our code:</p>\n<pre><code class=\"language-java\">package org.fluentlenium.sample.support;\n\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.util.Properties;\n\n  public class LoadProperties {\n\n  public static final String PATH_TO_PROPERTIES = &quot;/Users/s.radzyminski/IdeaProjects/slawek/FluentLenium/fluentlenium-testng/src/test/java/org/fluentlenium/sample/resources/user.properties&quot;;\n\n  public static Properties user = loadProperties(PATH_TO_PROPERTIES);\n\n  private static Properties loadProperties(String filePath) {\n    Properties properties = new Properties();\n    try {\n        FileInputStream f = new FileInputStream(filePath);\n        properties.load(f);\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n    return properties;\n  }\n\n}\n</code></pre>\n<p><strong>3</strong>. We are ready for the authentication method which will log in our admin to Facebook. Note how intuitive the syntax<br>is and how easy the code looks</p>\n<pre><code class=\"language-java\">private FacebookLoggedOutPage fbLogOutPage;\n\n   @BeforeMethod\n    public void authenticate() {\n        fbLogOutPage = createPage(FacebookLoggedOutPage.class);\n        fbLogOutPage.go();\n        fbLogOutPage.login(EMAIL, PASSWORD);\n        fbLogOutPage.verifySuccessfulLogin();\n    }\n</code></pre>\n<p><strong>4</strong>. Ok, we are already logged in so we need to go for GroupApprovePage now...</p>\n<pre><code class=\"language-java\">package org.fluentlenium.sample.pages;\n\nimport org.fluentlenium.core.FluentPage;\n\n  public class GroupApprovePage extends FluentPage {\n\n  private static final String APPROVE_ALL_BUTTON = &quot;[rel=async-post]&quot;;\n  private static final String CONFIRM_APPROVAL_BUTTON = &quot;.layerConfirm&quot;;\n\n  @Override\n  public String getUrl() {\n    return &quot;https://www.facebook.com/groups/booksIT/requests/?notif_t=group_r2j&quot;;\n  }\n\n  @Override\n  public void isAt() {\n    await().until(APPROVE_ALL_BUTTON).isPresent();\n  }\n\n  public void approveAll() {\n    find(APPROVE_ALL_BUTTON).first().click();\n  }\n\n  public void confirm() {\n    await().until(CONFIRM_APPROVAL_BUTTON).isPresent();\n    findFirst(CONFIRM_APPROVAL_BUTTON).click();\n  }\n\n}\n</code></pre>\n<p><strong>5</strong>. ...And Accept all requestors. Here is how it looks like finally:</p>\n<pre><code class=\"language-java\">package org.fluentlenium.sample.tests;\n\nimport org.fluentlenium.adapter.FluentTestNg;\nimport org.fluentlenium.sample.pages.FacebookLoggedOutPage;\nimport org.fluentlenium.sample.pages.GroupApprovePage;\nimport org.fluentlenium.sample.support.LoadProperties;\nimport org.testng.annotations.BeforeMethod;\nimport org.testng.annotations.Test;\n\npublic class FacebookTests extends FluentTestNg {\n\n    private FacebookLoggedOutPage fbLogOutPage;\n    private GroupApprovePage groupApprovePage;\n\n    private static final String EMAIL = LoadProperties.user.getProperty(&quot;email&quot;);\n    private static final String PASSWORD = LoadProperties.user.getProperty(&quot;password&quot;);\n\n    @BeforeMethod\n    public void authenticate() {\n        fbLogOutPage = createPage(FacebookLoggedOutPage.class);\n        fbLogOutPage.go();\n        fbLogOutPage.login(EMAIL, PASSWORD);\n        fbLogOutPage.verifySuccessfulLogin();\n    }\n\n    @Test\n    public void acceptAllPokemons() {\n        groupApprovePage = createPage(GroupApprovePage.class);\n        groupApprovePage.go();\n        groupApprovePage.isAt();\n        groupApprovePage.approveAll();\n        groupApprovePage.confirm();\n    }\n\n}\n</code></pre>\n<p>Please take a closer look at how strong FluentLenium is when it comes to dynamic waiting. This is one of the most<br>important elements when it comes to testing automation projects. There is a lot of bad information about how we should<br>avoid timeout exceptions on public forums and blogs (even on the stack). Please get familiar with Chapter 4<br>of <a href=\"http://www.amazon.com/Mastering-Selenium-WebDriver-Mark-Collin/dp/1784394351\" target=\"_blank\" rel=\"noreferrer\">Mastering Selenium WebDriver</a> if you<br>have problems with them. Googling may lead you to adopt bad practices.</p>\n<p>Code from steps 1-5 is available on my <a href=\"https://github.com/slawekradzyminski/awesome-testing.blogspot.com\" target=\"_blank\" rel=\"noreferrer\">GitHub</a>.</p>\n<p>Bonus content:</p>\n<p>a) I&#39;m really happy after being featured as a new face of polish testing<br>by <a href=\"http://www.testerzy.pl/baza-wiedzy/ludzie-i-trendy-w-polskim-testowaniu-2016\" target=\"_blank\" rel=\"noreferrer\">testerzy.pl</a>. Huge motivation boost to<br>keep up blogging work.</p>\n<p>b) You may have noticed (1) in the title. I&#39;ll continue FluentLenium / test automation series in the future. I&#39;ll<br>discuss why this test isn&#39;t exactly perfect. Or maybe do you know already? Please let me know in the comment section.</p>\n<p>c) Main image credit:<a href=\"http://www.testautomationfx.com/\" target=\"_blank\" rel=\"noreferrer\">www.testautomationfx.com</a></p>\n"
}