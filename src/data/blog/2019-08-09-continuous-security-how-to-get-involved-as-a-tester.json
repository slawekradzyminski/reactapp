{
  "id": "2019-08-09-continuous-security-how-to-get-involved-as-a-tester",
  "title": "Continuous Security - how to get involved as a tester?",
  "date": "2019-08-09",
  "categories": [
    "Security"
  ],
  "tags": [
    "security",
    "API testing"
  ],
  "permalink": "/2019/08/continuous-security-how-to-get-involved",
  "content": "<p><img src=\"/images/blog/photo-1514302240736-b1fee5985889.jpeg\" alt=\"\" style=\"width: 100%;\"></p>\n<p><strong>Introduction</strong></p>\n<p>As you may have already noticed I often drift into the security domain. My interests focus mainly on continuous<br>security (i.e. automated security tests). So far I had featured three tools on my<br>blog: <a href=\"https://www.awesome-testing.com/2017/02/continuous-security-with-owasp.html\" target=\"_blank\" rel=\"noreferrer\">OWASP Dependency-Check</a>, <a href=\"https://www.awesome-testing.com/2018/12/continuous-security-with-owasp-zap.html\" target=\"_blank\" rel=\"noreferrer\">OWASP ZAP</a>,<br>and <a href=\"https://www.awesome-testing.com/2018/11/continuous-security-with-find-sec-bugs.html\" target=\"_blank\" rel=\"noreferrer\">Find-Sec-Bugs</a> and showed how<br>to use Selenium to automate<br>your <a href=\"https://www.awesome-testing.com/2017/11/automate-your-xss-tests-with-selenium.html\" target=\"_blank\" rel=\"noreferrer\">XSS tests</a>.</p>\n<p>When I talk to my peers on various testing meetups I&#39;m often surprised how rarely professional testers engage in<br>security-related work. Throughout my activities, I try to debunk the myth that application security should be dealt with<br>exclusively by full-time professionals. Of course, I&#39;m far from saying that their work is not<br>needed (<a href=\"https://www.awesome-testing.com/2017/03/automated-testing-vs-manual-testing.html\" target=\"_blank\" rel=\"noreferrer\">quite contrary actually</a>),<br>but testers should start to get themselves involved. I predict that companies will soon start to<br>put <a href=\"https://www.owasp.org/index.php/Category:OWASP_Top_Ten_Project\" target=\"_blank\" rel=\"noreferrer\">OWASP Top 10</a> knowledge as a job requirement for<br>testing positions.</p>\n<p><strong>How to get involved?</strong></p>\n<p>As with almost everything in life we need to start somewhere. How? Perhaps with the already<br>featured <a href=\"https://www.awesome-testing.com/2018/12/continuous-security-with-owasp-zap.html\" target=\"_blank\" rel=\"noreferrer\">OWASP ZAP</a>. First, run an<br>automated scan against your application. If you don&#39;t have any<br>use <a href=\"https://www.owasp.org/index.php/OWASP_Juice_Shop_Project\" target=\"_blank\" rel=\"noreferrer\">OWASP Juice Shop</a>.</p>\n<p><img src=\"/images/blog/Screenshot%2B2019-08-31%2Bat%2B12.29.25.png\" alt=\"\" style=\"width: 100%;\"></p>\n<p>Most likely even with the simplest possible scan, you will be able to find vulnerabilities and things you can improve to<br>make your application more secure. Here is sample output<br>from <a href=\"https://www.owasp.org/index.php/OWASP_Juice_Shop_Project\" target=\"_blank\" rel=\"noreferrer\">OWASP Juice Shop</a>.</p>\n<p><img src=\"/images/blog/Screenshot%2B2019-08-31%2Bat%2B12.45.27.png\" alt=\"\" style=\"width: 100%;\"></p>\n<p>Today I&#39;ll focus on hardening (improving security)<br>with <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers\" target=\"_blank\" rel=\"noreferrer\">security headers</a>. In the next post, I&#39;ll analyze what<br>to do as a tester when an actual vulnerability has been found.</p>\n<p><strong>Hardening</strong></p>\n<p>If you take a look at my blog response headers you may find two security<br>headers: <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-XSS-Protection\" target=\"_blank\" rel=\"noreferrer\">X-Xss-Protection</a><br>and <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Content-Type-Options\" target=\"_blank\" rel=\"noreferrer\">X-Content-Type-Options</a>. Check it<br>in browser developer tools though, scanning Blogger via OWASP ZAP is illegal.</p>\n<p>It&#39;s usually a good idea to add a cheap API test just to make sure headers do not disappear during development. Let&#39;s<br>use the newly<br>released <a href=\"https://www.awesome-testing.com/2016/07/restful-api-testing-with-rest-assured-1.html\" target=\"_blank\" rel=\"noreferrer\">Rest-Assured</a> 4.0.0<br>framework for that purpose.</p>\n<p>At first, it&#39;s good to list application endpoints we want to check. For me, it will be:</p>\n<pre><code class=\"language-java\">abstract class AbstractSecurityHeaderTest {\n\n    static final List&lt;String&gt; CHECKED_URLS = ImmutableList.of(\n            &quot;https://www.awesome-testing.com&quot;,\n            &quot;https://www.awesome-testing.com/search/label/security&quot;,\n            &quot;https://www.awesome-testing.com/2019/06/throttling-network-in-selenium-tests.html&quot;,\n            &quot;https://www.awesome-testing.com/2017/&quot;\n    );\n\n}\n</code></pre>\n<p>Test for X-Xss-Protection (header which enables cross-site scripting filtering):</p>\n<pre><code class=\"language-java\">@Test\n    public void shouldHaveXssProtectionHeader() {\n        CHECKED_URLS.forEach(url -&gt; {\n            String header = given()\n                    .when()\n                    .get(url)\n                    .then()\n                    .extract()\n                    .header(&quot;x-xss-protection&quot;);\n\n            assertThat(header)\n                    .isNotNull()\n                    .isEqualTo(&quot;1; mode=block&quot;);\n        });\n    }\n</code></pre>\n<p>And X-Content-Type-Options (header which disables MIME sniffing and forces browser to use the type given in<br>Content-Type):</p>\n<pre><code class=\"language-java\">@Test\n    public void shouldHaveContentTypeHeader() {\n        CHECKED_URLS.forEach(url -&gt; {\n            String header = given()\n                    .when()\n                    .get(url)\n                    .then()\n                    .extract()\n                    .header(&quot;x-content-type-options&quot;);\n\n            assertThat(header)\n                    .isNotNull()\n                    .isEqualTo(&quot;nosniff&quot;);\n        });\n    }\n</code></pre>\n<p>Tests are really simple. If you have trouble understanding them please take a look at<br>my <a href=\"https://www.awesome-testing.com/2016/07/restful-api-testing-with-rest-assured-1.html\" target=\"_blank\" rel=\"noreferrer\">Rest-Assured</a> introduction.</p>\n<p><strong>TDD?</strong></p>\n<p>Let&#39;s assume now that for some reason my blog needs to<br>meet <a href=\"https://tidalcommerce.com/learn/merchant-levels-of-pci-compliance\" target=\"_blank\" rel=\"noreferrer\">PCI requirements</a> and I have to add two more<br>headers:</p>\n<p>a) <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Strict-Transport-Security\" target=\"_blank\" rel=\"noreferrer\">Strict-Transport-Security/HSTS</a> (<br>header which forces communication using HTTPS instead of HTTP)</p>\n<p>b) <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options\" target=\"_blank\" rel=\"noreferrer\">X-Frame-Options</a> (header which indicates<br>whether a browser should be allowed to render a page in a frame, iframe, embed or object)</p>\n<p>In TDD fashion, I can start the work with the acceptance test. Developer job to add such header would be much easier<br>now.</p>\n<p>a) HSTS</p>\n<pre><code class=\"language-java\">@Test\n    public void shouldHaveHstsHeader() {\n        CHECKED_URLS.forEach(url -&gt; {\n            String header = given()\n                    .when()\n                    .get(url)\n                    .then()\n                    .extract()\n                    .header(&quot;strict-transport-security&quot;);\n\n            assertThat(header)\n                    .isNotNull()\n                    .isEqualTo(&quot;max-age=31536000; includeSubDomains&quot;);\n        });\n    }\n</code></pre>\n<p>b) X-Frame-Options</p>\n<pre><code class=\"language-java\">@Test\n    public void shouldHaveXFrameOptionsHeader() {\n        CHECKED_URLS.forEach(url -&gt; {\n            String header = given()\n                    .when()\n                    .get(url)\n                    .then()\n                    .extract()\n                    .header(&quot;x-frame-options&quot;);\n\n            assertThat(header)\n                    .isNotNull()\n                    .isEqualTo(&quot;deny&quot;);\n        });\n    }\n</code></pre>\n<p>Simple, right? :)</p>\n<p>As usual, all code can be found on<br>my <a href=\"https://github.com/slawekradzyminski/AwesomeTesting/commit/020d6e6de756beb21510ef91659b4b0d6e679ecf\" target=\"_blank\" rel=\"noreferrer\">GitHub project</a>.<br>If you would like to support this blog please join 38 stargazers for a repository. Thank you.</p>\n"
}