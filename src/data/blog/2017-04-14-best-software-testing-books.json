{
  "id": "2017-04-14-best-software-testing-books",
  "title": "Best software testing books",
  "date": "2017-04-14",
  "categories": [
    "Books"
  ],
  "tags": [
    "learning",
    "books"
  ],
  "permalink": "/2017/04/best-software-testing-books",
  "content": "<p><img src=\"/images/blog/stack-of-books-1001655_640.jpg\" alt=\"\" style=\"width: 100%;\"></p>\n<p>I&#39;ve been very lucky recently to read quite a few fascinating books (<br>like<a href=\"http://amzn.to/2oS8FIE\" target=\"_blank\" rel=\"noreferrer\">How to Fail at Almost Everything and Still Win Big,</a><a href=\"http://amzn.to/2pZPCtt\" target=\"_blank\" rel=\"noreferrer\">Black Swan</a><br>or <a href=\"http://amzn.to/2pZUwGO\" target=\"_blank\" rel=\"noreferrer\">Surely You&#39;re Joking Mr Feynman</a>to recommend just a few) which reminded me that I haven&#39;t<br>made any software testing books posts yet. I did of course<br>start<a href=\"http://awesome-bookreviews.blogspot.com/\" target=\"_blank\" rel=\"noreferrer\">Awesome Book Reviews blog</a>some time ago, but it failed to gain<br>popularity so I switched full focus here.</p>\n<p>I once read on a<a href=\"https://www.facebook.com/groups/TestowanieOprogramowania/\" target=\"_blank\" rel=\"noreferrer\">polish Software Testing group</a>that the<br>majority of candidates during<br>a<a href=\"https://www.awesome-testing.com/2016/05/how-to-nail-testing-job-interview.html\" target=\"_blank\" rel=\"noreferrer\">job interview</a> fail to answer this<br>simple question: &#39;What&#39;s the latest software testing book you have read?&#39;That should never happen. Today I give you my<br>recommendations<br>for <a href=\"https://www.awesome-testing.com/2017/01/testops-4-continuous-improvement.html\" target=\"_blank\" rel=\"noreferrer\">continuous improvement</a>.</p>\n<p><strong>My framework for choosing IT books</strong></p>\n<p>There are tons of IT books available on the market. Here are my simple rules for narrowing down the list:</p>\n<ul>\n<li>Start with recommended books  </li>\n<li>Always choose books that are trying to answer &#39;why?&#39; question instead of the &#39;how?&#39;  </li>\n<li>Read the &#39;how?&#39; books (for example <a href=\"http://javafortesters.com/\" target=\"_blank\" rel=\"noreferrer\">Java for Testers</a>) only when you know &#39;why?&#39;</li>\n</ul>\n<p>Let&#39;s say you want to delve deep into TestOps. Here is the approach I take:  </p>\n<ul>\n<li>Ask my colleagues for recommendations  </li>\n<li>Ask<br>Google (<a href=\"https://www.reddit.com/r/devops/comments/4ox0d8/so_you_want_to_go_into_devops/\" target=\"_blank\" rel=\"noreferrer\">here&#39;s great Reddit source</a> by<br>the way)  </li>\n<li>Read recommendations  </li>\n<li>Only now would I study books focused on tools<br>like <a href=\"https://leanpub.com/the-devops-2-toolkit\" target=\"_blank\" rel=\"noreferrer\">DevOps 2.0,</a><a href=\"http://amzn.to/2oSr2Nt\" target=\"_blank\" rel=\"noreferrer\">Ansible</a><br>or <a href=\"http://amzn.to/2p0ekdT\" target=\"_blank\" rel=\"noreferrer\">Docker</a></li>\n</ul>\n<p>Remember that various problems can be solved by various tools. No tool solves every problem, so don&#39;t start your<br>education with them.</p>\n<p>Ok, let&#39;s go into books recommended for testers.</p>\n<p><strong>How Google Tests Software</strong></p>\n<p><img src=\"/images/blog/google.jpg\" alt=\"\" style=\"width: 100%;\"></p>\n<p>Many things in our lives that look complicated at first can be simplified by following one simple rule: &#39;Take a look at<br>what&#39;s working for the most successful and do the same&#39;. If you want to have a body like the local gym muscleman you<br>need to train like he does. If you want to increase your employability in the job market you should consider starting a<br>blog. If you want to have an effective testing process then you need to take a look at how it&#39;s done by Google.</p>\n<p>It&#39;s often shocking for young testers who have just finished <a href=\"http://amzn.to/2oyjJY1\" target=\"_blank\" rel=\"noreferrer\">ISTQB Foundation</a> certification to<br>realize that the processes described here are considered obsolete by top tech companies. Well, that&#39;s<br>reality. <a href=\"http://amzn.to/2ouKOfd\" target=\"_blank\" rel=\"noreferrer\">How Google Tests Software</a>by James Whittaker, Jason Arbon, and Jeff Carollo explains<br>why it&#39;s happening.</p>\n<p>Lots of quotes from the book can be found in<br>my <a href=\"https://www.awesome-testing.com/2016/06/how-to-become-software-tester.html\" target=\"_blank\" rel=\"noreferrer\">How to become a software tester post</a>.<br>I&#39;ll add just one here from Patrick Copeland&#39;s foreword.</p>\n<blockquote class=\"blog-quote\"><p>In all my interactions up to this point, one thing about Google was clear. It respected computer science and coding</p><p>skill. Ultimately, if testers were to join this club, they would have to have good computer science fundamentals and</p><p>some coding prowess. First-class citizenship demanded it.  </p></p></blockquote><p><strong>Team Geek - A Software Developer&#39;s Guide to Working Well with Others</strong></p>\n<p><img src=\"/images/blog/teamgeek.jpg\" alt=\"\" style=\"width: 100%;\"></p>\n<p>I often emphasize the importance of social aspects in software development. Engineers who can communicate only in a<br>boolean language are no longer looked for. They&#39;re often exploited in average positions because they can&#39;t stand up for<br>themselves.<a href=\"http://amzn.to/2oddU6W\" target=\"_blank\" rel=\"noreferrer\">Team Geek - A Software Developer&#39;s Guide to Working Well with Others</a>by Brian W.<br>Fitzpatrick and Ben Collins-Sussman explains how to avoid such situations and productively cooperate with others.</p>\n<p>In technical terminology, we can say that Team Geek teaches us how to have an easy-to-use and effective communication<br>API. There are a lot more technical-social analogies in the book which make it very thought-provoking read. You don&#39;t<br>want to miss that one.</p>\n<p>Also, it&#39;s short. You can finish it in one trip.</p>\n<p>Further reading: <a href=\"http://amzn.to/2pmIuLD\" target=\"_blank\" rel=\"noreferrer\">Soft Skills: The software developer&#39;s life manual</a></p>\n<p><strong>Thinking Fast &amp; Slow</strong></p>\n<p><img src=\"/images/blog/thinkingfastandslow.jpg\" alt=\"\" style=\"width: 100%;\"></p>\n<p>Absolute classic. Number one of <a href=\"https://blog.gurock.com/must-read-testing-books/\" target=\"_blank\" rel=\"noreferrer\">Gurock&#39;s alternative book lists</a><br>recommended for testers. <a href=\"http://amzn.to/2pmITO9\" target=\"_blank\" rel=\"noreferrer\">Thinking Fast and Slow</a> by Daniel Kahneman starts with a description<br>of two thinking modes guiding our behavior: system 1 (fast, automatic, emotional) which often let us down and system 2 (<br>slow, conscious, logical) which requires a lot effort from our side.</p>\n<p>The author nicely explains how we are so often wrong during risk analysis, estimation, and planning. Unfortunately, our<br>brains have a lot of flaws. It&#39;s good for testers to understand the root cause of bugs. Isn&#39;t it?</p>\n<p>A book recommended for everyone.</p>\n<p>Further reading: <a href=\"http://amzn.to/2od4mZG\" target=\"_blank\" rel=\"noreferrer\">Nassim Nicholas Taleb bibliography</a></p>\n<p><strong>Continuous Delivery</strong></p>\n<p><img src=\"/images/blog/continuousdelivery.jpg\" alt=\"\" style=\"width: 100%;\"></p>\n<p>The ultimate guide of &#39;why?&#39;. Why do we build automated pipelines? Why do we want to release as often as possible? Why<br>frequent releases actually reduce the probability of production bugs? Why do we automate tests? Why do we need fast<br>feedback from tests? Why do we need to monitor production? Why do we need to have a rollback possibility all the<br>time? <a href=\"http://amzn.to/2p0IEW1\" target=\"_blank\" rel=\"noreferrer\">Continuous Delivery</a> by Jez Humble and David Farley answer all these questions in an easy<br>to understand manner.</p>\n<p>Continuous Delivery describes an effective and efficient software delivery approach from start to finish. It&#39;s pretty<br>much what top computer science universities should teach us daily. It describes a professional approach for doing things<br>with simple explanations on why top companies consider them obvious and beneficial for their business.</p>\n<p>A must-read.</p>\n<p><strong>Agile Testing &amp; More Agile Testing</strong></p>\n<p><img src=\"/images/blog/agiletesting.jpg\" alt=\"\" style=\"width: 100%;\"><img src=\"/images/blog/moreagiletesting.jpg\" alt=\"\" style=\"width: 100%;\"></p>\n<p>Last but not least. <a href=\"http://amzn.to/2odgI3K\" target=\"_blank\" rel=\"noreferrer\">Agile Testing</a> and <a href=\"http://amzn.to/2odm0MK\" target=\"_blank\" rel=\"noreferrer\">More Agile Testing</a>by Lisa<br>Crispin and Janet Gregory are two high-quality books describing the peculiar role of testers in Agile teams. The first<br>part covers the basics (including a description of Agile practices) and the second one describes a lot of real-world<br>examples and uses cases.</p>\n<p>What I very much like about those books is the huge emphasis the authors make regarding teamwork. Lisa &amp; Janet are<br>certainly context-driven testers which not only deal with testing scientifically but also want to support the business<br>with frequent and bug-free releases. Very fluent/agile/lean approach which I can fully recommend to others.</p>\n"
}