{
  "id": "2017-11-11-automate-your-xss-tests-with-selenium",
  "title": "Automate your XSS tests with Selenium",
  "date": "2017-11-11",
  "categories": [
    "Selenium"
  ],
  "tags": [
    "selenium",
    "security"
  ],
  "permalink": "/2017/11/automate-your-xss-tests-with-selenium",
  "content": "<img src=\"/images/blog/safety-lock-logo_23-2147493514.jpg\" alt=\"\">\n\n<p>We are heading into an era where potential attackers have very easy knowledge access. In some instances proper training isn&#39;t even required, because offensive tools are getting better and better. A lot of companies decided that it&#39;s better to pay real money for security bugs (see <a href=\"https://hackerone.com/bug-bounty-programs\" target=\"_blank\" rel=\"noreferrer\">Bug Bounty list</a>) than take a risk hostile exposure.</p><p>As testers we shouldn&#39;t ignore this trend. This is already reflected in job offers - you may often notice that defensive/offensive security knowledge is starting to appear not only in &#39;nice to have&#39; section, but also in requirements. I have already made <a href=\"http://www.awesome-testing.com/search/label/security\" target=\"_blank\" rel=\"noreferrer\">2 posts</a> about various security testing aspects.</p><p>XSS (cross-site scripting) is one of the easiest vulnerabilities to test (<a href=\"https://www.owasp.org/index.php/Category:Vulnerability_Scanning_Tools\" target=\"_blank\" rel=\"noreferrer\">for example by scanners</a>). It&#39;s also the second most prevalent issue in the <a href=\"https://www.owasp.org/images/b/b0/OWASP_Top_10_2017_RC2_Final.pdf\" target=\"_blank\" rel=\"noreferrer\">OWASP Top 10</a>,<br>and is found in around two thirds of all applications. Today I want to show you how to test against XSS using Selenium.<br>We would focus our attention on the most popular and common type of XSS - Reflected Cross-Site Scripting.</p><p><strong>Reflected Cross-Site Scripting basics</strong></p><p><a href=\"https://www.owasp.org/index.php/Testing_for_Cross_site_scripting\" target=\"_blank\" rel=\"noreferrer\">OWASP</a> provides excellent description of Reflected XSS which doesn&#39;t require much explanation:</p><blockquote class=\"blog-quote\"><p>These holes show up when data provided by a web client is used immediately by server-side scripts to generate a page</p><p></p><p>of results for that user. If unvalidated user-supplied data is included in the resulting page without HTML encoding,</p><p></p><p>this will allow client-side code to be injected into the dynamic page. A classic example of this is in site search</p><p></p><p>engines: if one searches for a string which includes some HTML special characters, often the search string will be</p><p></p><p>redisplayed on the result page to indicate what was searched for, or will at least include the search terms in the text</p><p></p><p>box for easier editing. If all occurrences of the search terms are not HTML entity encoded, an XSS hole will result.__</p><p></p></blockquote><p>For more information see <a href=\"https://www.owasp.org/images/1/19/OTGv4.pdf\" target=\"_blank\" rel=\"noreferrer\">OWASP Testing Guide</a> which is amazing resource available for free.</p><p><strong>Example in Java</strong></p><p>As usual I enjoyed the most coding part. I commited it on my <a href=\"https://github.com/slawekradzyminski/AwesomeTesting/commit/907e6f7de8702d8da6db1c78d9fcdb5fb278a1b2\" target=\"_blank\" rel=\"noreferrer\">Github project</a>.</p><p>Let&#39;s split the explanation into few parts:</p><p><strong><em>Driver preparation</em></strong></p><p>This step can be omitted entirely if you are using Firefox. I usually prefer Chrome (chromedriver is in my opinion the most reliable driver) so I had to disable built-in client xss protection first. I have already covered it extensively in my <a href=\"http://www.awesome-testing.com/2016/02/selenium-browser-capabilities-explained.html\" target=\"_blank\" rel=\"noreferrer\">Browser Capabilites Explained post</a><br>so I assume reader doesn&#39;t require additional explanation.</p><p>XSS protection in Google Chrome is disabled by_--disable-xss-auditor_ option.</p><pre><code class=\"hljs language-java\">\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">XssDisabledChromeConfig</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">FluentTestNg</span> {\n\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">DISABLE_XSS_AUDITOR</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;--disable-xss-auditor&quot;</span>;\n\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-keyword\">public</span> WebDriver <span class=\"hljs-title function_\">newWebDriver</span><span class=\"hljs-params\">()</span> {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ChromeDriver</span>(getChromeCapabilities());\n    }\n\n    <span class=\"hljs-keyword\">private</span> DesiredCapabilities <span class=\"hljs-title function_\">getChromeCapabilities</span><span class=\"hljs-params\">()</span> {\n        <span class=\"hljs-type\">DesiredCapabilities</span> <span class=\"hljs-variable\">capabilities</span> <span class=\"hljs-operator\">=</span> DesiredCapabilities.chrome();\n        capabilities.setCapability(ChromeOptions.CAPABILITY, getChromeOptions());\n        <span class=\"hljs-keyword\">return</span> capabilities;\n    }\n\n    <span class=\"hljs-keyword\">private</span> ChromeOptions <span class=\"hljs-title function_\">getChromeOptions</span><span class=\"hljs-params\">()</span> {\n        <span class=\"hljs-type\">ChromeOptions</span> <span class=\"hljs-variable\">options</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ChromeOptions</span>();\n        options.addArguments(getChromeSwitches());\n        <span class=\"hljs-keyword\">return</span> options;\n    }\n\n    <span class=\"hljs-keyword\">private</span> List&lt;String&gt; <span class=\"hljs-title function_\">getChromeSwitches</span><span class=\"hljs-params\">()</span> {\n        List&lt;String&gt; chromeSwitches = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();\n        chromeSwitches.add(DISABLE_XSS_AUDITOR);\n        <span class=\"hljs-keyword\">return</span> chromeSwitches;\n    }\n</code></pre><p><strong><em>Picking a vulnerable page</em></strong></p><p>Obviously in order to show you how to test against XSS I had to find a vulnerable page. I decided to use <a href=\"https://xss-game.appspot.com/\" target=\"_blank\" rel=\"noreferrer\">XSS game</a> level 1.</p><p>That&#39;s the Page Object implementation using <a href=\"https://github.com/FluentLenium/FluentLenium\" target=\"_blank\" rel=\"noreferrer\">FluentLenium</a>.</p><pre><code class=\"hljs language-java\">\n<span class=\"hljs-meta\">@PageUrl(&quot;https://xss-game.appspot.com/level1/frame&quot;)</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">XssGameLevelOnePage</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">FluentPage</span> {\n\n    <span class=\"hljs-meta\">@FindBy(id = &quot;level1&quot;)</span>\n    <span class=\"hljs-keyword\">private</span> FluentWebElement body;\n\n    <span class=\"hljs-meta\">@FindBy(id = &quot;query&quot;)</span>\n    <span class=\"hljs-keyword\">private</span> FluentWebElement queryInput;\n\n    <span class=\"hljs-meta\">@FindBy(id = &quot;button&quot;)</span>\n    <span class=\"hljs-keyword\">private</span> FluentWebElement sarchButton;\n\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">isAt</span><span class=\"hljs-params\">()</span> {\n        await().atMost(<span class=\"hljs-number\">5</span>, TimeUnit.SECONDS).until(body).displayed();\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">searchFor</span><span class=\"hljs-params\">(String content)</span> {\n        queryInput.fill().with(content);\n        sarchButton.click();\n    }\n}\n</code></pre><p><strong><em>Test implementation</em></strong></p><p>Having Page Object implemented we are ready for testing. Here is complete code of my test:</p><pre><code class=\"hljs language-java\">\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">XssGameTest</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">XssDisabledChromeConfig</span> {\n\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">MY_CHROME_PATH</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;C:\\\\drivers\\\\chromedriver.exe&quot;</span>;\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">XSS_CONTENT</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;&lt;script&gt;alert(\\&quot;1\\&quot;);&lt;/script&gt;&quot;</span>;\n\n    <span class=\"hljs-meta\">@BeforeTest</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setUp</span><span class=\"hljs-params\">()</span> {\n        <span class=\"hljs-keyword\">if</span> (SystemUtils.IS_OS_WINDOWS) {\n            System.setProperty(<span class=\"hljs-string\">&quot;webdriver.chrome.driver&quot;</span>, MY_CHROME_PATH);\n        }\n    }\n\n    <span class=\"hljs-meta\">@Page</span>\n    <span class=\"hljs-keyword\">private</span> XssGameLevelOnePage xssGameLevelOnePage;\n\n    <span class=\"hljs-meta\">@Test</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">xssShouldNotWork</span><span class=\"hljs-params\">()</span> {\n        goTo(xssGameLevelOnePage).isAt();\n\n        xssGameLevelOnePage.searchFor(XSS_CONTENT);\n\n        assertThat(xssGameLevelOnePage.isAlertDisplayed()).isFalse();\n    }\n}\n</code></pre><p>As you can see there is weirdly lookin CSS_CONTENT string which require further explanation:</p><p>This is actual XSS. We are searching for something that may lead to client-side code injection on attacked webpage. This particular JavaScript opens only silly alert, but attacker may use it for something more serious.</p><pre><code class=\"hljs language-java\">\nXSS_CONTENT = <span class=\"hljs-string\">&quot;&lt;script&gt;alert(\\&quot;1\\&quot;);&lt;/script&gt;&quot;</span>;\n</code></pre><p><strong><em>Assertion</em></strong></p><p>Usually we want our test to have clear success/failure criteria. That&#39;s why I implemented the following method in my PageObject:</p><pre><code class=\"hljs language-java\">\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">isAlertDisplayed</span><span class=\"hljs-params\">()</span> {\n        <span class=\"hljs-type\">boolean</span> foundAlert;\n        <span class=\"hljs-type\">WebDriverWait</span> <span class=\"hljs-variable\">wait</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">WebDriverWait</span>(getDriver(), <span class=\"hljs-number\">2</span>);\n        <span class=\"hljs-keyword\">try</span> {\n            wait.until(ExpectedConditions.alertIsPresent());\n            foundAlert = <span class=\"hljs-literal\">true</span>;\n        } <span class=\"hljs-keyword\">catch</span> (TimeoutException e) {\n            foundAlert = <span class=\"hljs-literal\">false</span>;\n        }\n        <span class=\"hljs-keyword\">return</span> foundAlert;\n    }\n</code></pre><p>This method is returning true if popup is displayed in 2 seconds time.</p><p>Execute the test on your computer and you will see that it fails - we have found XSS!</p>"
}