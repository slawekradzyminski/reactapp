{
  "id": "2018-02-02-testops-the-most-antifragile-testing-role",
  "title": "TestOps - the most antifragile testing role",
  "date": "2018-02-02",
  "categories": [
    "TestOps"
  ],
  "tags": [
    "testops",
    "testing thoughts"
  ],
  "permalink": "/2018/02/testops-most-antifragile-testing-role",
  "content": "<p><img src=\"/images/blog/antifragile.jpg\" alt=\"\" style=\"width: 100%;\"></p>\n<p>I have read many fascinating books in 2017 which influenced me a lot. Among the very best are Nassim Nicholas<br>Taleb&#39;s <a href=\"https://www.amazon.com/Fooled-Randomness-Hidden-Markets-Incerto/dp/0812975219/ref=asap_bc?ie=UTF8\" target=\"_blank\" rel=\"noreferrer\">Fooled by Randomness</a>, <a href=\"https://www.amazon.com/Black-Swan-Improbable-Robustness-Fragility/dp/081297381X/ref=asap_bc?ie=UTF8\" target=\"_blank\" rel=\"noreferrer\">The Black Swan</a><br>and <a href=\"https://www.amazon.com/Antifragile-Things-That-Disorder-Incerto/dp/0812979680/\" target=\"_blank\" rel=\"noreferrer\">Antifragile</a> which is perhaps the<br>most important, although which can&#39;t be fully understood without reading the remaining two. Taleb has a very original<br>style which is very unique, but I noticed few similarities<br>to <a href=\"http://thinking%2C%20fast%20and%20slow/\" target=\"_blank\" rel=\"noreferrer\">Thinking Fast and Slow</a> (Daniel Kahneman)<br>and <a href=\"https://www.amazon.com/Surely-Youre-Joking-Mr-Feynman/dp/0393355624/\" target=\"_blank\" rel=\"noreferrer\">Surely You&#39;re Joking, Mr. Feynman!</a> (Richard<br>Feynman). Taleb loves science (especially math), but his books aren&#39;t strictly scientific. There are multiple unproven<br>commonsense theories which I find very smart.</p>\n<p><strong>How to be antifragile?</strong></p>\n<p>Fragility is the quality of being easily broken or damaged by various activities. You may say the opposite of fragility<br>is toughness, but is it really the case? If we replace &#39;easily broken or damaged by various activities&#39; into &#39;easily<br>strengthened or improved by various activities&#39; we instantly realize that such word is missing in our dictionary.</p>\n<p>Well, it was missing. Thanks to Nassim Nicholas Taleb we can come up with the following definition:</p>\n<blockquote class=\"blog-quote\"><p>Antifragility is the quality of being strengthened or improved by various activities  </p></p></blockquote><p>If you stop here and think for a moment you may realize that there are not many things which can be labeled as<br>antifragile. Wine gets better after each year, but after opening, it quickly degenerates. Rock, even though looks<br>indestructible doesn&#39;t improve in any way. What about the content of the book? It usually loses its value over time and<br>never gets automatically updated. Does publishing second edition of the book increases its antifragility? Nope, it still<br>can&#39;t improve by itself. So which things are antifragile? There is interesting discussion<br>on <a href=\"https://www.quora.com/What-are-some-things-that-are-antifragile\" target=\"_blank\" rel=\"noreferrer\">Quora</a>which lists: optionality, mother nature and<br>evolution.</p>\n<p>Let&#39;s discuss optionality. How can we take advantage of it? Imagine you and your spouse are working full-time job in<br>company <em>A</em>. As a first step for being more antifragile you should diversify companies. One of you should quit current<br>job and move to company <em>B</em>. In such scenario if comapany <em>A</em> goes bankrupt you still have a steady income from company<br><em>B</em>.</p>\n<p>What if you want to try to create a new company? Should both of you quit your current jobs? If you want to be<br>antifragile it would be best if none of you quit. You should work after hours and during the weekends. This minimises<br>the risk of a new company going down (which has high probability) and still leaves you some chance of a huge money from<br>the new business (which has low probability).</p>\n<p>As you probably see already completely antifragile things are extremely rare. We should rather make comparisons. Which<br>of two options are more antifragile?</p>\n<p>Let&#39;s consider two career paths: midwife and personal trainer. Theoretically in the era of people who are scared to lift<br>anything in gym without the coach assistance second occupation looks better. Which of those are more antifragile though?<br>Most likely midwife because there is very little chance of people suddenly stop having children. Personal trainers can<br>be replaced with tutorials, videos, or even coaches appointed full-time by gym.</p>\n<p><strong>Why is TestOps antifragile?</strong></p>\n<p>As you probably now already I&#39;m a huge fan of a somehow abstract<br>term - <a href=\"http://www.awesome-testing.com/search/label/testops\" target=\"_blank\" rel=\"noreferrer\">TestOps</a>. I have resurrected this term from oblivion few<br>months ago and now a lot of people use it. To put it shortly TestOps can be described as a strong desire to automate<br>everything. Please have in mind that it&#39;s not only about test automation. I mean also Continuous Integration and<br>Continuous Delivery. Senior TestOps Enginner in my opinion should be master of Unix who knows how to make one-click<br>production deployment.</p>\n<p>TestOps Engineer is also very technical. He can do proper performance test (i.e. fully understand results), he can hack<br>if necessary, he can also work with his peers following business priorities. If necessary he can even test application<br>manually. I have created a graph with potential TestOps Engineer job switches:</p>\n<p><img src=\"/images/blog/pobrane.png\" alt=\"\" style=\"width: 100%;\"></p>\n<p>As you can see as a TestOps expert you shouldn&#39;t really be worried about job loss. You have almost unlimited options on<br>what to do next. More importantly with TestOps experience you can easily follow the path you love. Whether it&#39;s<br>business (Product Owner), Management (Team Leader) or Software Reliability Engineer (who does a lot<br>of <a href=\"http://www.awesome-testing.com/2016/09/testops-2-testing-in-production.html\" target=\"_blank\" rel=\"noreferrer\">testing in production</a>).</p>\n<p><strong>Why it&#39;s better to learn programming first before testing basics?</strong></p>\n<p>My acquaintance from days in which I played StarCraft a lot has recently created a very good blog post about<br>his <a href=\"http://scvconsultants.com/2018/02/08/kilka-rzeczy-o-ktorych-zaluje-ze-nie-powiedziano-mi-gdy-zmienialem-branze-na-it/\" target=\"_blank\" rel=\"noreferrer\">job switch into software testing</a>(<br>article in polish, please use Google translator). I&#39;m surprised that polish Software<br>Testing <a href=\"https://www.facebook.com/groups/TestowanieOprogramowania/\" target=\"_blank\" rel=\"noreferrer\">Facebook groupÂ </a>found it controversial. One of the<br>most the discussed item was the following advice (translation by me):</p>\n<blockquote class=\"blog-quote\"><p>If you want to become a software tester start learning programming first, testing basics later.  </p></p></blockquote><p>It&#39;s worth to analyse this statement in antifragile context. Which skill (programming vs testing) guarantees you more<br>job possibilities? The answer is very simple here - programming. You can become both software developer and tester. Even<br>when it comes to testing job chances trust me, a lot of companies care more about test development skills then ISTQB<br>formulas. Start with programming basics!</p>\n"
}