{
  "id": "2016-06-29-how-to-download-files-using-selenium-2-",
  "title": "How to Download files using Selenium 2",
  "date": "2016-06-29",
  "category": "Selenium",
  "permalink": "/2016/06/how-to-download-files-using-selenium-2",
  "content": "<img src=\"/images/blog/downloading-001.png\" alt=\"\">\n\n<p>In my previous post about <a href=\"http://awesome-testing.blogspot.com/2016/02/selenium-browser-capabilities-explained.html\" target=\"_blank\" rel=\"noreferrer\">Selenium</a>, I explained how can we modify browsers before tests to have the desired configuration. Today I like to discuss a different topic that lacks quality guides - downloading files. Mixing Selenium with AutoIT isn&#39;t good, trust me.</p><p>I&#39;m using <a href=\"http://awesome-testing.blogspot.com/2016/01/introducing-fluentlenium-1.html\" target=\"_blank\" rel=\"noreferrer\">FluentLenium</a> syntax to navigate on the page (that would be Micheal Bolton&#39;s <a href=\"http://www.developsense.com/\" target=\"_blank\" rel=\"noreferrer\">homepage</a> to be more precise), but it&#39;s very intuitive, and you shouldn&#39;t have any problems rewriting it on Selenium. I borrowed some code from <a href=\"http://www.amazon.com/Mastering-Selenium-WebDriver-Mark-Collin/dp/1784394351\" target=\"_blank\" rel=\"noreferrer\">Mastering Selenium WebDriver</a> book, which I once again recommend.</p><p>Testers who don&#39;t understand HTTP protocol usually get stuck with &#39;Are you sure you want to download this file?&#39; popup. The thing is, it&#39;s just internal browser implementation and we don&#39;t have to test it. We are going to bypass it completely. I&#39;ll give you 4 examples of how can you test it. Make a risk assessment and decide which one would be appropriate for your site. The first one is the fastest, and the last one is the slowest.</p><h2>Checking that file is available on given address</h2>\n<p>We will not only bypass the browser&#39;s download handling mechanism, but we won&#39;t use Selenium too. It&#39;s just <a href=\"https://hc.apache.org/httpcomponents-client-ga/tutorial/pdf/httpclient-tutorial.pdf\" target=\"_blank\" rel=\"noreferrer\">HttpClient</a> request and response code verification (we expect 200 -&gt; SC_OK). We don&#39;t verify that the user sees the link and can click on it.</p><pre><code class=\"hljs language-java\">\n    <span class=\"hljs-meta\">@Test</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">downloadNoSelenium</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> URISyntaxException, IOException {\n        <span class=\"hljs-type\">Request</span> <span class=\"hljs-variable\">request</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Request</span>();\n        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">linkToCheck</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;http://www.developsense.com/courses/RapidSoftwareTesting.pdf&quot;</span>;\n        request.setURIToCheck(linkToCheck);\n        assertThat(request.getHTTPStatusCodeFromResponse()).isEqualTo(SC_OK);\n    }\n</code></pre><p>And here is HttpClient implementation. Quite a few lines, I know.</p><pre><code class=\"hljs language-java\">\n<span class=\"hljs-comment\">// ... existing code ...</span>\n</code></pre><h2>Checking that file is available for real user</h2>\n<p>Now we would simulate the real user. We are going to get a URL from the existing site selector and add user cookies to HTTP requests. Note that only getUrlFromSite() method uses FluentLenium. That&#39;s the class you need to modify to make it work in clean Selenium.</p><pre><code class=\"hljs language-java\">\n<span class=\"hljs-comment\">// ... existing code ...</span>\n</code></pre><h2>Checking that file isn&#39;t empty</h2>\n<p>Now we would download the file and check that it isn&#39;t empty. Have in mind that this approach applies to small files.</p><pre><code class=\"hljs language-java\">\n<span class=\"hljs-comment\">// ... existing code ...</span>\n</code></pre><h2>Checking that we download the correct file</h2>\n<p>And finally the most reliable approach. We would not only download the file but also check it&#39;s md5 checksum.</p><pre><code class=\"hljs language-java\">\n<span class=\"hljs-comment\">// ... existing code ...</span>\n</code></pre>"
}