{
  "id": "2016-06-29-how-to-download-files-using-selenium-2-",
  "title": "How to Download files using Selenium 2",
  "date": "2016-06-29",
  "categories": [
    "Selenium"
  ],
  "tags": [
    "selenium",
    "testing",
    "fluentlenium",
    "test automation",
    "UI testing"
  ],
  "permalink": "/2016/06/how-to-download-files-using-selenium-2",
  "content": "<p><img src=\"/images/blog/downloading-001.png\" alt=\"\" style=\"width: 100%;\"></p>\n<p>In my previous post<br>about <a href=\"http://awesome-testing.blogspot.com/2016/02/selenium-browser-capabilities-explained.html\" target=\"_blank\" rel=\"noreferrer\">Selenium</a>, I explained<br>how can we modify browsers before tests to have the desired configuration. Today I like to discuss a different topic<br>that lacks quality guides - downloading files. Mixing Selenium with AutoIT isn&#39;t good, trust me.</p>\n<p>I&#39;m using <a href=\"http://awesome-testing.blogspot.com/2016/01/introducing-fluentlenium-1.html\" target=\"_blank\" rel=\"noreferrer\">FluentLenium</a> syntax to navigate<br>on the page (that would be Micheal Bolton&#39;s <a href=\"http://www.developsense.com/\" target=\"_blank\" rel=\"noreferrer\">homepage</a> to be more precise), but it&#39;s very<br>intuitive, and you shouldn&#39;t have any problems rewriting it on Selenium. I borrowed some code<br>from <a href=\"http://www.amazon.com/Mastering-Selenium-WebDriver-Mark-Collin/dp/1784394351\" target=\"_blank\" rel=\"noreferrer\">Mastering Selenium WebDriver</a> book,<br>which I once again recommend.</p>\n<p>Testers who don&#39;t understand HTTP protocol usually get stuck with &#39;Are you sure you want to download this file?&#39; popup.<br>The thing is, it&#39;s just internal browser implementation and we don&#39;t have to test it. We are going to bypass it<br>completely. I&#39;ll give you 4 examples of how can you test it. Make a risk assessment and decide which one would be<br>appropriate for your site. The first one is the fastest, and the last one is the slowest.</p>\n<h2>Checking that file is available on given address</h2>\n<p>We will not only bypass the browser&#39;s download handling mechanism, but we won&#39;t use Selenium too. It&#39;s<br>just <a href=\"https://hc.apache.org/httpcomponents-client-ga/tutorial/pdf/httpclient-tutorial.pdf\" target=\"_blank\" rel=\"noreferrer\">HttpClient</a> request and<br>response code verification (we expect 200 -&gt; SC_OK). We don&#39;t verify that the user sees the link and can click on it.</p>\n<pre><code class=\"language-java\">@Test\n    public void downloadNoSelenium() throws URISyntaxException, IOException {\n        Request request = new Request();\n        String linkToCheck = &quot;http://www.developsense.com/courses/RapidSoftwareTesting.pdf&quot;;\n        request.setURIToCheck(linkToCheck);\n        assertThat(request.getHTTPStatusCodeFromResponse()).isEqualTo(SC_OK);\n    }\n</code></pre>\n<p>And here is HttpClient implementation. Quite a few lines, I know.</p>\n<pre><code class=\"language-java\">class Request {\n\n    private URI linkToCheck;\n    private WebDriver driver;\n\n    Request() {\n    }\n\n    void setURIToCheck(String linkToCheck) throws URISyntaxException {\n        this.linkToCheck = new URI(linkToCheck);\n    }\n\n    int getHTTPStatusCodeFromResponse() throws IOException {\n        return getHttpResponse().getStatusLine().getStatusCode();\n    }\n\n    private HttpResponse getHttpResponse() throws IOException {\n        HttpClient client = initializeHttpClient();\n        BasicHttpContext httpContext = new BasicHttpContext();\n        if (driver != null) {\n            addCookies(httpContext);\n        }\n        HttpRequestBase request = buildRequest();\n\n        return client.execute(request, httpContext);\n    }\n\n    private HttpClient initializeHttpClient() {\n        return HttpClientBuilder\n                .create()\n                .setRedirectStrategy(new LaxRedirectStrategy())\n                .build();\n    }\n\n    private HttpRequestBase buildRequest() {\n        HttpRequestBase requestMethod = new HttpGet();\n        requestMethod.setURI(this.linkToCheck);\n\n        return requestMethod;\n    }\n}\n</code></pre>\n<h2>Checking that file is available for real user</h2>\n<p>Now we would simulate the real user. We are going to get a URL from the existing site selector and add user cookies to<br>HTTP requests. Note that only getUrlFromSite() method uses FluentLenium. That&#39;s the class you need to modify to make it<br>work in clean Selenium.</p>\n<pre><code class=\"language-java\">public class FileDownloadTest extends FluentTestNg {\n\n    private static final String FILE_TO_DL_SELECTOR = &quot;ul li a&quot;;\n    private static final String URL = &quot;http://www.developsense.com&quot;;\n\n    @Test\n    public void statusCode200() throws IOException, URISyntaxException {\n        Request request = prepareRequest();\n        assertThat(request.getHTTPStatusCodeFromResponse()).isEqualTo(SC_OK);\n    }\n\n    private Request prepareRequest() throws MalformedURLException, URISyntaxException {\n        String fileUrl = getUrlFromSite();\n        Request request = new Request(getDriver());\n        request.setURIToCheck(fileUrl);\n        return request;\n    }\n\n    private String getUrlFromSite() {\n        goTo(URL);\n        await().until(FILE_TO_DL_SELECTOR).isEnabled();\n        return findFirst(FILE_TO_DL_SELECTOR).getAttribute(&quot;href&quot;);\n    }\n}\n</code></pre>\n<p>There is a very nice method that I found in Mastering Selenium WebDriver book. It copies all the cookies and adds to the<br>request. It&#39;s a Request.class extension required to make our test pass.</p>\n<pre><code class=\"language-java\">Request(WebDriver driver) {\n        this.driver = driver;\n    }\n\n     private void addCookies(BasicHttpContext httpContext) {\n        BasicCookieStore cookies = getCurrentDriverCookies(driver.manage().getCookies());\n        httpContext.setAttribute(HttpClientContext.COOKIE_STORE, cookies);\n    }\n\n    private BasicCookieStore getCurrentDriverCookies(Set&lt;Cookie&gt; cookies) {\n        BasicCookieStore mimicWebDriverCookieStore = new BasicCookieStore();\n        for (Cookie seleniumCookie : cookies) {\n            BasicClientCookie duplicateCookie = new BasicClientCookie(seleniumCookie.getName(), seleniumCookie.getValue());\n            duplicateCookie.setDomain(seleniumCookie.getDomain());\n            duplicateCookie.setSecure(seleniumCookie.isSecure());\n            duplicateCookie.setExpiryDate(seleniumCookie.getExpiry());\n            duplicateCookie.setPath(seleniumCookie.getPath());\n\n            mimicWebDriverCookieStore.addCookie(duplicateCookie);\n        }\n\n        return mimicWebDriverCookieStore;\n    }\n</code></pre>\n<h2>Checking that file isn&#39;t empty</h2>\n<p>Now we would download the file and check that it isn&#39;t empty. Have in mind that this approach applies to small files.</p>\n<pre><code class=\"language-java\">@Test\n    public void getDownload() throws Exception {\n        Request request = prepareRequest();\n        File downloadedFile = request.downloadFile();\n        assertThat(downloadedFile).isNotNull();\n    }\n</code></pre>\n<p>And that&#39;s the downloadFile() method from Request.class.</p>\n<pre><code class=\"language-java\">File downloadFile() throws Exception {\n        File downloadedFile = File.createTempFile(&quot;download&quot;, &quot;.tmp&quot;);\n        HttpResponse fileToDownload = getHttpResponse();\n        FileUtils.copyInputStreamToFile(fileToDownload.getEntity().getContent(), downloadedFile);\n\n        return downloadedFile;\n    }\n</code></pre>\n<h2>Checking that we download the correct file</h2>\n<p>And finally the most reliable approach. We would not only download the file but also check it&#39;s md5 checksum.</p>\n<pre><code class=\"language-java\">private static final String EXPECTED_MD5 = &quot;c3fb273e2843808968d68120121f2c74&quot;;\n\n    @Test\n    public void getDownloadPlusMd5() throws Exception {\n        Request request = prepareRequest();\n        File downloadedFile = request.downloadFile();\n        assertThat(calculateMd5(downloadedFile)).isEqualTo(EXPECTED_MD5);\n    }\n\n     private String calculateMd5(File downloadedFile) throws IOException {\n        FileInputStream fis = new FileInputStream(downloadedFile);\n        String md5 = md5Hex(fis);\n        fis.close();\n\n        return md5;\n    }\n</code></pre>\n<p>If you prefer to read code only, here is everything:</p>\n<ul>\n<li><p><a href=\"https://gist.github.com/slawekradzyminski/7d503a49db1b38f6988aa71310d99b01\" target=\"_blank\" rel=\"noreferrer\">Request.class</a></p>\n</li>\n<li><p><a href=\"https://gist.github.com/slawekradzyminski/7d6d222e9e299c0eaf9c5085db01c00c\" target=\"_blank\" rel=\"noreferrer\">DownloadNoSelenium.class</a></p>\n</li>\n<li><p><a href=\"https://gist.github.com/slawekradzyminski/9327458e8d35b518ee5501196c6e0f88\" target=\"_blank\" rel=\"noreferrer\">FileDownloadTest.class</a></p>\n</li>\n</ul>\n"
}