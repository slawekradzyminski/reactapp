{
  "id": "2016-06-29-how-to-download-files-using-selenium-2-",
  "title": "How to Download files using Selenium 2",
  "date": "2016-06-29",
  "categories": [
    "Selenium"
  ],
  "tags": [
    "selenium",
    "testing",
    "fluentlenium",
    "test automation",
    "UI testing"
  ],
  "permalink": "/2016/06/how-to-download-files-using-selenium-2",
  "content": "<img src=\"/images/blog/downloading-001.png\" alt=\"\">\n\n<p>In my previous post about <a href=\"http://awesome-testing.blogspot.com/2016/02/selenium-browser-capabilities-explained.html\" target=\"_blank\" rel=\"noreferrer\">Selenium</a>, I explained how can we modify browsers before tests to have the desired configuration. Today I like to discuss a different topic that lacks quality guides - downloading files. Mixing Selenium with AutoIT isn&#39;t good, trust me.</p><p>I&#39;m using <a href=\"http://awesome-testing.blogspot.com/2016/01/introducing-fluentlenium-1.html\" target=\"_blank\" rel=\"noreferrer\">FluentLenium</a> syntax to navigate on the page (that would be Micheal Bolton&#39;s <a href=\"http://www.developsense.com/\" target=\"_blank\" rel=\"noreferrer\">homepage</a> to be more precise), but it&#39;s very intuitive, and you shouldn&#39;t have any problems rewriting it on Selenium. I borrowed some code from <a href=\"http://www.amazon.com/Mastering-Selenium-WebDriver-Mark-Collin/dp/1784394351\" target=\"_blank\" rel=\"noreferrer\">Mastering Selenium WebDriver</a> book,<br>which I once again recommend.</p><p>Testers who don&#39;t understand HTTP protocol usually get stuck with &#39;Are you sure you want to download this file?&#39; popup.<br>The thing is, it&#39;s just internal browser implementation and we don&#39;t have to test it. We are going to bypass it completely. I&#39;ll give you 4 examples of how can you test it. Make a risk assessment and decide which one would be appropriate for your site. The first one is the fastest, and the last one is the slowest.</p><h2>Checking that file is available on given address</h2>\n<p>We will not only bypass the browser&#39;s download handling mechanism, but we won&#39;t use Selenium too. It&#39;s just <a href=\"https://hc.apache.org/httpcomponents-client-ga/tutorial/pdf/httpclient-tutorial.pdf\" target=\"_blank\" rel=\"noreferrer\">HttpClient</a> request and response code verification (we expect 200 -&gt; SC_OK). We don&#39;t verify that the user sees the link and can click on it.</p><pre><code class=\"hljs language-java\">\n    <span class=\"hljs-meta\">@Test</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">downloadNoSelenium</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> URISyntaxException, IOException {\n        <span class=\"hljs-type\">Request</span> <span class=\"hljs-variable\">request</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Request</span>();\n        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">linkToCheck</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;http://www.developsense.com/courses/RapidSoftwareTesting.pdf&quot;</span>;\n        request.setURIToCheck(linkToCheck);\n        assertThat(request.getHTTPStatusCodeFromResponse()).isEqualTo(SC_OK);\n    }\n</code></pre><p>And here is HttpClient implementation. Quite a few lines, I know.</p><pre><code class=\"hljs language-java\">\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Request</span> {\n\n    <span class=\"hljs-keyword\">private</span> URI linkToCheck;\n    <span class=\"hljs-keyword\">private</span> WebDriver driver;\n\n    Request() {\n    }\n\n    <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setURIToCheck</span><span class=\"hljs-params\">(String linkToCheck)</span> <span class=\"hljs-keyword\">throws</span> URISyntaxException {\n        <span class=\"hljs-built_in\">this</span>.linkToCheck = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">URI</span>(linkToCheck);\n    }\n\n    <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">getHTTPStatusCodeFromResponse</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> IOException {\n        <span class=\"hljs-keyword\">return</span> getHttpResponse().getStatusLine().getStatusCode();\n    }\n\n    <span class=\"hljs-keyword\">private</span> HttpResponse <span class=\"hljs-title function_\">getHttpResponse</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> IOException {\n        <span class=\"hljs-type\">HttpClient</span> <span class=\"hljs-variable\">client</span> <span class=\"hljs-operator\">=</span> initializeHttpClient();\n        <span class=\"hljs-type\">BasicHttpContext</span> <span class=\"hljs-variable\">httpContext</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BasicHttpContext</span>();\n        <span class=\"hljs-keyword\">if</span> (driver != <span class=\"hljs-literal\">null</span>) {\n            addCookies(httpContext);\n        }\n        <span class=\"hljs-type\">HttpRequestBase</span> <span class=\"hljs-variable\">request</span> <span class=\"hljs-operator\">=</span> buildRequest();\n\n        <span class=\"hljs-keyword\">return</span> client.execute(request, httpContext);\n    }\n\n    <span class=\"hljs-keyword\">private</span> HttpClient <span class=\"hljs-title function_\">initializeHttpClient</span><span class=\"hljs-params\">()</span> {\n        <span class=\"hljs-keyword\">return</span> HttpClientBuilder\n                .create()\n                .setRedirectStrategy(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LaxRedirectStrategy</span>())\n                .build();\n    }\n\n    <span class=\"hljs-keyword\">private</span> HttpRequestBase <span class=\"hljs-title function_\">buildRequest</span><span class=\"hljs-params\">()</span> {\n        <span class=\"hljs-type\">HttpRequestBase</span> <span class=\"hljs-variable\">requestMethod</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HttpGet</span>();\n        requestMethod.setURI(<span class=\"hljs-built_in\">this</span>.linkToCheck);\n\n        <span class=\"hljs-keyword\">return</span> requestMethod;\n    }\n}\n</code></pre><h2>Checking that file is available for real user</h2>\n<p>Now we would simulate the real user. We are going to get a URL from the existing site selector and add user cookies to HTTP requests. Note that only getUrlFromSite() method uses FluentLenium. That&#39;s the class you need to modify to make it work in clean Selenium.</p><pre><code class=\"hljs language-java\">\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">FileDownloadTest</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">FluentTestNg</span> {\n\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">FILE_TO_DL_SELECTOR</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;ul li a&quot;</span>;\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">URL</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;http://www.developsense.com&quot;</span>;\n\n    <span class=\"hljs-meta\">@Test</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">statusCode200</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> IOException, URISyntaxException {\n        <span class=\"hljs-type\">Request</span> <span class=\"hljs-variable\">request</span> <span class=\"hljs-operator\">=</span> prepareRequest();\n        assertThat(request.getHTTPStatusCodeFromResponse()).isEqualTo(SC_OK);\n    }\n\n    <span class=\"hljs-keyword\">private</span> Request <span class=\"hljs-title function_\">prepareRequest</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> MalformedURLException, URISyntaxException {\n        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">fileUrl</span> <span class=\"hljs-operator\">=</span> getUrlFromSite();\n        <span class=\"hljs-type\">Request</span> <span class=\"hljs-variable\">request</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Request</span>(getDriver());\n        request.setURIToCheck(fileUrl);\n        <span class=\"hljs-keyword\">return</span> request;\n    }\n\n    <span class=\"hljs-keyword\">private</span> String <span class=\"hljs-title function_\">getUrlFromSite</span><span class=\"hljs-params\">()</span> {\n        goTo(URL);\n        await().until(FILE_TO_DL_SELECTOR).isEnabled();\n        <span class=\"hljs-keyword\">return</span> findFirst(FILE_TO_DL_SELECTOR).getAttribute(<span class=\"hljs-string\">&quot;href&quot;</span>);\n    }\n}\n</code></pre><p>There is a very nice method that I found in Mastering Selenium WebDriver book. It copies all the cookies and adds to the request. It&#39;s a Request.class extension required to make our test pass.</p><pre><code class=\"hljs language-java\">\n     Request(WebDriver driver) {\n        <span class=\"hljs-built_in\">this</span>.driver = driver;\n    }\n\n     <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">addCookies</span><span class=\"hljs-params\">(BasicHttpContext httpContext)</span> {\n        <span class=\"hljs-type\">BasicCookieStore</span> <span class=\"hljs-variable\">cookies</span> <span class=\"hljs-operator\">=</span> getCurrentDriverCookies(driver.manage().getCookies());\n        httpContext.setAttribute(HttpClientContext.COOKIE_STORE, cookies);\n    }\n\n    <span class=\"hljs-keyword\">private</span> BasicCookieStore <span class=\"hljs-title function_\">getCurrentDriverCookies</span><span class=\"hljs-params\">(Set&lt;Cookie&gt; cookies)</span> {\n        <span class=\"hljs-type\">BasicCookieStore</span> <span class=\"hljs-variable\">mimicWebDriverCookieStore</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BasicCookieStore</span>();\n        <span class=\"hljs-keyword\">for</span> (Cookie seleniumCookie : cookies) {\n            <span class=\"hljs-type\">BasicClientCookie</span> <span class=\"hljs-variable\">duplicateCookie</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BasicClientCookie</span>(seleniumCookie.getName(), seleniumCookie.getValue());\n            duplicateCookie.setDomain(seleniumCookie.getDomain());\n            duplicateCookie.setSecure(seleniumCookie.isSecure());\n            duplicateCookie.setExpiryDate(seleniumCookie.getExpiry());\n            duplicateCookie.setPath(seleniumCookie.getPath());\n\n            mimicWebDriverCookieStore.addCookie(duplicateCookie);\n        }\n\n        <span class=\"hljs-keyword\">return</span> mimicWebDriverCookieStore;\n    }\n</code></pre><h2>Checking that file isn&#39;t empty</h2>\n<p>Now we would download the file and check that it isn&#39;t empty. Have in mind that this approach applies to small files.</p><pre><code class=\"hljs language-java\">\n    <span class=\"hljs-meta\">@Test</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">getDownload</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> Exception {\n        <span class=\"hljs-type\">Request</span> <span class=\"hljs-variable\">request</span> <span class=\"hljs-operator\">=</span> prepareRequest();\n        <span class=\"hljs-type\">File</span> <span class=\"hljs-variable\">downloadedFile</span> <span class=\"hljs-operator\">=</span> request.downloadFile();\n        assertThat(downloadedFile).isNotNull();\n    }\n</code></pre><p>And that&#39;s the downloadFile() method from Request.class.</p><pre><code class=\"hljs language-java\">\n    File <span class=\"hljs-title function_\">downloadFile</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> Exception {\n        <span class=\"hljs-type\">File</span> <span class=\"hljs-variable\">downloadedFile</span> <span class=\"hljs-operator\">=</span> File.createTempFile(<span class=\"hljs-string\">&quot;download&quot;</span>, <span class=\"hljs-string\">&quot;.tmp&quot;</span>);\n        <span class=\"hljs-type\">HttpResponse</span> <span class=\"hljs-variable\">fileToDownload</span> <span class=\"hljs-operator\">=</span> getHttpResponse();\n        FileUtils.copyInputStreamToFile(fileToDownload.getEntity().getContent(), downloadedFile);\n\n        <span class=\"hljs-keyword\">return</span> downloadedFile;\n    }\n</code></pre><h2>Checking that we download the correct file</h2>\n<p>And finally the most reliable approach. We would not only download the file but also check it&#39;s md5 checksum.</p><pre><code class=\"hljs language-java\">\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">EXPECTED_MD5</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;c3fb273e2843808968d68120121f2c74&quot;</span>;\n\n    <span class=\"hljs-meta\">@Test</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">getDownloadPlusMd5</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> Exception {\n        <span class=\"hljs-type\">Request</span> <span class=\"hljs-variable\">request</span> <span class=\"hljs-operator\">=</span> prepareRequest();\n        <span class=\"hljs-type\">File</span> <span class=\"hljs-variable\">downloadedFile</span> <span class=\"hljs-operator\">=</span> request.downloadFile();\n        assertThat(calculateMd5(downloadedFile)).isEqualTo(EXPECTED_MD5);\n    }\n\n     <span class=\"hljs-keyword\">private</span> String <span class=\"hljs-title function_\">calculateMd5</span><span class=\"hljs-params\">(File downloadedFile)</span> <span class=\"hljs-keyword\">throws</span> IOException {\n        <span class=\"hljs-type\">FileInputStream</span> <span class=\"hljs-variable\">fis</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">FileInputStream</span>(downloadedFile);\n        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">md5</span> <span class=\"hljs-operator\">=</span> md5Hex(fis);\n        fis.close();\n\n        <span class=\"hljs-keyword\">return</span> md5;\n    }\n</code></pre><p>If you prefer to read code only, here is everything:</p><ul>\n<li><p><a href=\"https://gist.github.com/slawekradzyminski/7d503a49db1b38f6988aa71310d99b01\" target=\"_blank\" rel=\"noreferrer\">Request.class</a></p></li>\n<li><p><a href=\"https://gist.github.com/slawekradzyminski/7d6d222e9e299c0eaf9c5085db01c00c\" target=\"_blank\" rel=\"noreferrer\">DownloadNoSelenium.class</a></p></li>\n<li><p><a href=\"https://gist.github.com/slawekradzyminski/9327458e8d35b518ee5501196c6e0f88\" target=\"_blank\" rel=\"noreferrer\">FileDownloadTest.class</a></p></li>\n</ul>\n"
}