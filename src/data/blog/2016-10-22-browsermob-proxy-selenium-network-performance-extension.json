{
  "id": "2016-10-22-browsermob-proxy-selenium-network-performance-extension",
  "title": "BrowserMob Proxy Selenium network performance extension",
  "date": "2016-10-22",
  "categories": [
    "Selenium"
  ],
  "tags": [
    "selenium"
  ],
  "permalink": "/2016/10/browsermob-proxy-selenium-network",
  "content": "<p><img src=\"/images/blog/3vg5xk.jpg\" alt=\"\" style=\"width: 100%;\"></p>\n<p>It&#39;s been a while since I published some Java code here, but<br>as <a href=\"http://dexter.wikia.com/wiki/Dexter_Morgan\" target=\"_blank\" rel=\"noreferrer\">Dexter Morgan</a> would say: today is the day. If you want me to post Java<br>tests more often please let me know in the comments.</p>\n<p><a href=\"https://bmp.lightbody.net/\" target=\"_blank\" rel=\"noreferrer\">BrowserMob Proxy</a> is a very useful tool which &#39;can capture performance data for web apps (<br>via the <a href=\"https://dvcs.w3.org/hg/webperf/raw-file/tip/specs/HAR/Overview.html\" target=\"_blank\" rel=\"noreferrer\">HAR format</a>), as well as manipulate<br>browser behavior and traffic, such as whitelisting and blacklisting content, simulating network traffic and latency, and<br>rewriting HTTP requests and responses&#39;. It also has built-in support for Selenium integration which adds few nice<br>features for our test suites with very little effort required.</p>\n<p>You may, of course, say that a Selenium is not a performance testing tool (and rightly so), but nevertheless, it can<br>contribute to your testing in the following ways:</p>\n<ul>\n<li>You can quickly assert that none of the web requests returned undesired HTTP responses (<br>like <a href=\"https://en.wikipedia.org/wiki/HTTP_404\" target=\"_blank\" rel=\"noreferrer\">404</a>, <a href=\"https://en.wikipedia.org/wiki/List_of_HTTP_status_codes#5xx_Server_Error\" target=\"_blank\" rel=\"noreferrer\">5xx</a>).<br>Captured <code>.har</code> network traffic can be easily converted to Apache JMeter using various tools, for<br>example, <a href=\"http://seitenbau.github.io/har2JMeter/\" target=\"_blank\" rel=\"noreferrer\">Har2jmeter</a></li>\n<li><code>.har</code> files can be used for comparison measures. If you do things right (i.e. your testing environment is exactly the<br>same on each test run) changes in overall test execution time can indicate performance problems. Knowing that already<br>you can just compare two *.har files (fast one and slow one) and check exactly which requests had slowed down.*<br>Modify user agent in requests</li>\n</ul>\n<p>Those are just a few things that come to my mind right now, the full list of BrowserMob Proxy features is<br>listed<a href=\"https://github.com/lightbody/browsermob-proxy#using-with-selenium\" target=\"_blank\" rel=\"noreferrer\">here</a>.</p>\n<p>In order to start using BrowserMob Proxy add this Maven dependency to your project:</p>\n<pre><code class=\"language-xml\">&lt;dependency&gt;\n&lt;groupId&gt;net.lightbody.bmp&lt;/groupId&gt;\n&lt;artifactId&gt;browsermob-core&lt;/artifactId&gt;\n&lt;version&gt;2.1.2&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre>\n<p>Now BrowserMob Proxy can be run using simple methods. I&#39;m using TestNG annotation to start it before the tests, and<br>close just after all of them finish. As you can see I capture all HTTP traffic headers here.</p>\n<pre><code class=\"language-java\">private static final int BROWSER_MOB_PROXY_PORT = 9191;\n\n    protected BrowserMobProxyServer server;\n\n    @BeforeClass\n    public void startBMP() {\n        server = new BrowserMobProxyServer();\n        server.start(BROWSER_MOB_PROXY_PORT);\n        server.setHarCaptureTypes(CaptureType.getHeaderCaptureTypes());\n    }\n\n    @AfterClass\n    public void stopBMP() {\n        server.stop();\n    }\n}\n</code></pre>\n<p>And this Gist shows how to add proxy settings to ChromeDriver. See<br>my <a href=\"https://awesome-testing.com/2016/02/selenium-browser-capabilities-explained.html\" target=\"_blank\" rel=\"noreferrer\">Browser capabilities explained</a><br>post for a more thorough description of browser configuration.</p>\n<pre><code class=\"language-java\">@Override\npublic WebDriver getDefaultDriver() {\nreturn new ChromeDriver(getChromeCapabilities());\n}\n\n    private DesiredCapabilities getChromeCapabilities() {\n        DesiredCapabilities capabilities = DesiredCapabilities.chrome();\n        capabilities.setCapability(CapabilityType.PROXY, getChromeProxySettings());\n        return capabilities;\n    }\n\n    private Proxy getChromeProxySettings() {\n        return ClientUtil.createSeleniumProxy(server);\n    }\n</code></pre>\n<p>Now the most important thing - actual tests. As you can see I&#39;m starting new Har capture on BrowserMob Proxy server<br>before each test (it&#39;s called &#39;Awesome Testing Only Test&#39; or &#39;Google Awesome Testing Test&#39;). After the last test step<br>ends network traffic is saved to *.har file. I&#39;m<br>using <a href=\"https://awesome-testing.com/2016/01/introducing-fluentlenium-1.html\" target=\"_blank\" rel=\"noreferrer\">FluentLenium</a> syntax. Page Objects code can<br>be found on<br>my <a href=\"https://github.com/slawekradzyminski/AwesomeTesting/tree/master/src/test/java/gui/browsermobproxy/pages\" target=\"_blank\" rel=\"noreferrer\">Github project</a><br>. Hopefully, you have no problem understanding what the tests do :)</p>\n<pre><code class=\"language-java\">public class BrowserMobChromeTest extends BrowserMobChrome {\n\n    private static final String AWESOME_TESTING = &quot;Awesome Testing&quot;;\n\n    @Test\n    public void awesomeTestingOnly() throws IOException {\n        server.newHar(&quot;Awesome Testing Only Test&quot;);\n\n        AwesomeTestingPage awesomeTestingPage = createPage(AwesomeTestingPage.class);\n        awesomeTestingPage.go();\n        awesomeTestingPage.isAt();\n\n        Har har = server.getHar();\n        har.writeTo(new File(&quot;at.har&quot;));\n    }\n\n    @Test\n    public void googleAwesomeTesting() throws IOException {\n        server.newHar(&quot;Google Awesome Testing Test&quot;);\n        GoogleHomePage googleHomePage = createPage(GoogleHomePage.class);\n        googleHomePage.go();\n        googleHomePage.isAt();\n\n        GoogleSearchResultPage googleSearchResultPage = googleHomePage.search(AWESOME_TESTING);\n        googleSearchResultPage.isAt();\n\n        AwesomeTestingPage awesomeTestingPage = googleSearchResultPage.clickLink(AWESOME_TESTING);\n        awesomeTestingPage.isAt();\n\n        Har har = server.getHar();\n        har.writeTo(new File(&quot;googleat.har&quot;));\n    }\n\n}\n</code></pre>\n<p>Our quest for obtaining *.har network traffic file is completed. The screenshot below shows how does it look like<br>in <a href=\"https://chrome.google.com/webstore/detail/http-archive-viewer/ebbdbdmhegaoooipfnjikefdpeoaidml/related?hl=en\" target=\"_blank\" rel=\"noreferrer\">Google HTTP Archive Viewer</a><br>extension. It took 239 requests and 9.59 seconds to successfully Google my blog.</p>\n<p><img src=\"/images/blog/Screenshot%2B2016-10-04%2B09.17.45.png\" alt=\"\" style=\"width: 100%;\"></p>\n<p>The file can also be accessed using external libraries. In the code below, I convert it JSON format<br>using <a href=\"https://github.com/sdstoehr/har-reader\" target=\"_blank\" rel=\"noreferrer\">HarReader</a>. It&#39;s not exactly part of the test so I put it in external<br>class.</p>\n<pre><code class=\"language-java\">public static void main(String[] args) throws HarReaderException, IOException {\nString pathToFile = &quot;at.har&quot;;\n\n        HarReader harReader = new HarReader();\n        List&lt;HarEntry&gt; harEntryList = harReader.readFromFile(new File(pathToFile)).getLog().getEntries();\n\n        Gson gson = new GsonBuilder().setPrettyPrinting().create();\n        try (Writer writer = new BufferedWriter(new OutputStreamWriter(\n                new FileOutputStream(&quot;filename.txt&quot;), &quot;utf-8&quot;))) {\n            writer.write(gson.toJson(harEntryList));\n        }\n    }\n</code></pre>\n<p>Remember: Complete Java code of this post (and every other) can be found on my <a href=\"https://github.com/slawekradzyminski/AwesomeTesting/tree/master/src/test/java/gui/browsermobproxy\" target=\"_blank\" rel=\"noreferrer\">Github project</a>.</p>\n"
}