{
  "id": "2016-10-22-browsermob-proxy-selenium-network-performance-extension",
  "title": "BrowserMob Proxy Selenium network performance extension",
  "date": "2016-10-22",
  "category": "Selenium",
  "permalink": "/2016/10/browsermob-proxy-selenium-network",
  "content": "<img src=\"/images/blog/3vg5xk.jpg\" alt=\"\">\n\n<p>It&#39;s been a while since I published some Java code here, but as <a href=\"http://dexter.wikia.com/wiki/Dexter_Morgan\" target=\"_blank\" rel=\"noreferrer\">Dexter Morgan</a> would say: today is the day. If you want me to post Java tests more often please let me know in the comments.</p><p><a href=\"https://bmp.lightbody.net/\" target=\"_blank\" rel=\"noreferrer\">BrowserMob Proxy</a> is a very useful tool which &#39;can capture performance data for web apps (via the <a href=\"https://dvcs.w3.org/hg/webperf/raw-file/tip/specs/HAR/Overview.html\" target=\"_blank\" rel=\"noreferrer\">HAR format</a>), as well as manipulate browser behavior and traffic, such as whitelisting and blacklisting content, simulating network traffic and latency, and rewriting HTTP requests and responses&#39;. It also has built-in support for Selenium integration which adds few nice features for our test suites with very little effort required.</p><p>You may, of course, say that a Selenium is not a performance testing tool (and rightly so), but nevertheless, it can contribute to your testing in the following ways:</p><ul>\n<li>You can quickly assert that none of the web requests returned undesired HTTP responses (like <a href=\"https://en.wikipedia.org/wiki/HTTP_404\" target=\"_blank\" rel=\"noreferrer\">404</a>, <a href=\"https://en.wikipedia.org/wiki/List_of_HTTP_status_codes#5xx_Server_Error\" target=\"_blank\" rel=\"noreferrer\">5xx</a>).</li>\n<li>Captured <code>.har</code> network traffic can be easily converted to Apache JMeter using various tools, for example, <a href=\"http://seitenbau.github.io/har2JMeter/\" target=\"_blank\" rel=\"noreferrer\">Har2jmeter</a></li>\n<li><code>.har</code> files can be used for comparison measures. If you do things right (i.e. your testing environment is exactly the same on each test run) changes in overall test execution time can indicate performance problems. Knowing that already you can just compare two *.har files (fast one and slow one) and check exactly which requests had slowed down.*</li>\n<li>Modify user agent in requests</li>\n</ul>\n<p>Those are just a few things that come to my mind right now, the full list of BrowserMob Proxy features is listed<a href=\"https://github.com/lightbody/browsermob-proxy#using-with-selenium\" target=\"_blank\" rel=\"noreferrer\">here</a>.</p><p>In order to start using BrowserMob Proxy add this Maven dependency to your project:</p><pre><code class=\"hljs language-xml\">\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>net.lightbody.bmp<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>browsermob-core<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>2.1.2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n</code></pre><p>Now BrowserMob Proxy can be run using simple methods. I&#39;m using TestNG annotation to start it before the tests, and close just after all of them finish. As you can see I capture all HTTP traffic headers here.</p><pre><code class=\"hljs language-java\">\n<span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">BROWSER_MOB_PROXY_PORT</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">9191</span>;\n\n    <span class=\"hljs-keyword\">protected</span> BrowserMobProxyServer server;\n\n    <span class=\"hljs-meta\">@BeforeClass</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">startBMP</span><span class=\"hljs-params\">()</span> {\n        server = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BrowserMobProxyServer</span>();\n        server.start(BROWSER_MOB_PROXY_PORT);\n        server.setHarCaptureTypes(CaptureType.getHeaderCaptureTypes());\n    }\n\n    <span class=\"hljs-meta\">@AfterClass</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">stopBMP</span><span class=\"hljs-params\">()</span> {\n        server.stop();\n    }\n}\n</code></pre><p>And this Gist shows how to add proxy settings to ChromeDriver. See my <a href=\"https://awesome-testing.com/2016/02/selenium-browser-capabilities-explained.html\" target=\"_blank\" rel=\"noreferrer\">Browser capabilities explained</a> post for a more thorough description of browser configuration.</p><pre><code class=\"hljs language-java\">\n<span class=\"hljs-meta\">@Override</span> <span class=\"hljs-keyword\">public</span> WebDriver <span class=\"hljs-title function_\">getDefaultDriver</span><span class=\"hljs-params\">()</span> {\n<span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ChromeDriver</span>(getChromeCapabilities());\n}\n\n    <span class=\"hljs-keyword\">private</span> DesiredCapabilities <span class=\"hljs-title function_\">getChromeCapabilities</span><span class=\"hljs-params\">()</span> {\n        <span class=\"hljs-type\">DesiredCapabilities</span> <span class=\"hljs-variable\">capabilities</span> <span class=\"hljs-operator\">=</span> DesiredCapabilities.chrome();\n        capabilities.setCapability(CapabilityType.PROXY, getChromeProxySettings());\n        <span class=\"hljs-keyword\">return</span> capabilities;\n    }\n\n    <span class=\"hljs-keyword\">private</span> Proxy <span class=\"hljs-title function_\">getChromeProxySettings</span><span class=\"hljs-params\">()</span> {\n        <span class=\"hljs-keyword\">return</span> ClientUtil.createSeleniumProxy(server);\n    }\n</code></pre><p>Now the most important thing - actual tests. As you can see I&#39;m starting new Har capture on BrowserMob Proxy server before each test (it&#39;s called &#39;Awesome Testing Only Test&#39; or &#39;Google Awesome Testing Test&#39;). After the last test step ends network traffic is saved to *.har file. I&#39;m using <a href=\"https://awesome-testing.com/2016/01/introducing-fluentlenium-1.html\" target=\"_blank\" rel=\"noreferrer\">FluentLenium</a> syntax. Page Objects code can be found on my <a href=\"https://github.com/slawekradzyminski/AwesomeTesting/tree/master/src/test/java/gui/browsermobproxy/pages\" target=\"_blank\" rel=\"noreferrer\">Github project</a>. Hopefully, you have no problem understanding what the tests do :)</p><pre><code class=\"hljs language-java\">\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">BrowserMobChromeTest</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">BrowserMobChrome</span> {\n\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">AWESOME_TESTING</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;Awesome Testing&quot;</span>;\n\n    <span class=\"hljs-meta\">@Test</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">awesomeTestingOnly</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> IOException {\n        server.newHar(<span class=\"hljs-string\">&quot;Awesome Testing Only Test&quot;</span>);\n\n        <span class=\"hljs-type\">AwesomeTestingPage</span> <span class=\"hljs-variable\">awesomeTestingPage</span> <span class=\"hljs-operator\">=</span> createPage(AwesomeTestingPage.class);\n        awesomeTestingPage.go();\n        awesomeTestingPage.isAt();\n\n        <span class=\"hljs-type\">Har</span> <span class=\"hljs-variable\">har</span> <span class=\"hljs-operator\">=</span> server.getHar();\n        har.writeTo(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">File</span>(<span class=\"hljs-string\">&quot;at.har&quot;</span>));\n    }\n\n    <span class=\"hljs-meta\">@Test</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">googleAwesomeTesting</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> IOException {\n        server.newHar(<span class=\"hljs-string\">&quot;Google Awesome Testing Test&quot;</span>);\n        <span class=\"hljs-type\">GoogleHomePage</span> <span class=\"hljs-variable\">googleHomePage</span> <span class=\"hljs-operator\">=</span> createPage(GoogleHomePage.class);\n        googleHomePage.go();\n        googleHomePage.isAt();\n\n        <span class=\"hljs-type\">GoogleSearchResultPage</span> <span class=\"hljs-variable\">googleSearchResultPage</span> <span class=\"hljs-operator\">=</span> googleHomePage.search(AWESOME_TESTING);\n        googleSearchResultPage.isAt();\n\n        <span class=\"hljs-type\">AwesomeTestingPage</span> <span class=\"hljs-variable\">awesomeTestingPage</span> <span class=\"hljs-operator\">=</span> googleSearchResultPage.clickLink(AWESOME_TESTING);\n        awesomeTestingPage.isAt();\n\n        <span class=\"hljs-type\">Har</span> <span class=\"hljs-variable\">har</span> <span class=\"hljs-operator\">=</span> server.getHar();\n        har.writeTo(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">File</span>(<span class=\"hljs-string\">&quot;googleat.har&quot;</span>));\n    }\n\n}\n</code></pre><p>Our quest for obtaining *.har network traffic file is completed. The screenshot below shows how does it look like in <a href=\"https://chrome.google.com/webstore/detail/http-archive-viewer/ebbdbdmhegaoooipfnjikefdpeoaidml/related?hl=en\" target=\"_blank\" rel=\"noreferrer\">Google HTTP Archive Viewer</a> extension. It took 239 requests and 9.59 seconds to successfully Google my blog.</p><img src=\"/images/blog/Screenshot%2B2016-10-04%2B09.17.45.png\" alt=\"\">\n\n<p>The file can also be accessed using external libraries. In the code below, I convert it JSON format using <a href=\"https://github.com/sdstoehr/har-reader\" target=\"_blank\" rel=\"noreferrer\">HarReader</a>. It&#39;s not exactly part of the test so I put it in external class.</p><pre><code class=\"hljs language-java\">\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> HarReaderException, IOException {\n<span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">pathToFile</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;at.har&quot;</span>;\n\n        <span class=\"hljs-type\">HarReader</span> <span class=\"hljs-variable\">harReader</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HarReader</span>();\n        List&lt;HarEntry&gt; harEntryList = harReader.readFromFile(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">File</span>(pathToFile)).getLog().getEntries();\n\n        <span class=\"hljs-type\">Gson</span> <span class=\"hljs-variable\">gson</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">GsonBuilder</span>().setPrettyPrinting().create();\n        <span class=\"hljs-keyword\">try</span> (<span class=\"hljs-type\">Writer</span> <span class=\"hljs-variable\">writer</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BufferedWriter</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">OutputStreamWriter</span>(\n                <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">FileOutputStream</span>(<span class=\"hljs-string\">&quot;filename.txt&quot;</span>), <span class=\"hljs-string\">&quot;utf-8&quot;</span>))) {\n            writer.write(gson.toJson(harEntryList));\n        }\n    }\n</code></pre><p>Remember: Complete Java code of this post (and every other) can be found on my <a href=\"https://github.com/slawekradzyminski/AwesomeTesting/tree/master/src/test/java/gui/browsermobproxy\" target=\"_blank\" rel=\"noreferrer\">Github project</a>.</p>"
}