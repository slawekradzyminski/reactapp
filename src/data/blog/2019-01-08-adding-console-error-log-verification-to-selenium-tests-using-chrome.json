{
  "id": "2019-01-08-adding-console-error-log-verification-to-selenium-tests-using-chrome",
  "title": "Adding console error log verification to Selenium tests using Chrome",
  "date": "2019-01-08",
  "categories": [
    "Selenium"
  ],
  "tags": [
    "selenium"
  ],
  "permalink": "/2019/01/adding-console-error-log-verification",
  "content": "<p><img src=\"/images/blog/Przechwytywanie.PNG\" alt=\"\"></p><p>Selenium is an amazing test tool that is used pretty much everywhere these days. People are usually so spoiled by the number of functionalities it provides that they can&#39;t hide being surprised when they notice two missing functionalities:</p><ul>\n<li>ability to assert HTTP requests/responses (like status codes)</li>\n<li>ability to capture browser console logs</li>\n</ul>\n<p>Today I&#39;d like to focus on the second topic - browser console.</p><p>To put it in simple words. Currently, you can easily capture browser logs only in Chrome. Of course, you can always build your own solution for other browsers but you have no guarantee that it would work after next browser update. There is a <a href=\"https://github.com/w3c/webdriver/issues/406\" target=\"_blank\" rel=\"noreferrer\">W3C Webdriver</a> attempt to standardize browser logging interface however the progress seems to be slow.</p><p>Thankfully, in Chrome errors can be captured and I encourage you to do it in your scripts.</p><p><strong>Preparation</strong></p><p>To show this feature in action we need to prepare tests. I&#39;m going to use my own blog as an example of a site not reporting any console errors. In order to make failing example deterministic I created a custom broken site.</p><pre><code class=\"hljs language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>Page<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>The image below does not work by purpose\n    (it triggers js error in browser console).<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;https://nonexisting.url&quot;</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span></code></pre><p>As usual, tests are written using <a href=\"https://fluentlenium.com/\" target=\"_blank\" rel=\"noreferrer\">FluentLenium</a>.</p><pre><code class=\"hljs language-java\"><span class=\"hljs-meta\">@Test</span> <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">pageHopefullyWithoutErrors</span><span class=\"hljs-params\">()</span> {\ngoTo(awesomeTestingPage);\n}\n\n    <span class=\"hljs-meta\">@Test</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">pageWithErrors</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> URISyntaxException {\n        goToFileInResources(<span class=\"hljs-string\">&quot;pageWithError.html&quot;</span>);\n    }</code></pre><p><strong>Demo</strong></p><p>Capturing console log errors is pretty easy. You only need one method</p><pre><code class=\"hljs language-java\"><span class=\"hljs-meta\">@After</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">verifyConsoleErrors</span><span class=\"hljs-params\">()</span> {\n        <span class=\"hljs-type\">Logs</span> <span class=\"hljs-variable\">logs</span> <span class=\"hljs-operator\">=</span> getDriver().manage().logs();\n        <span class=\"hljs-type\">LogEntries</span> <span class=\"hljs-variable\">logEntries</span> <span class=\"hljs-operator\">=</span> logs.get(LogType.BROWSER);\n        List&lt;LogEntry&gt; errorLogs = logEntries.filter(Level.SEVERE);\n\n        <span class=\"hljs-keyword\">if</span> (errorLogs.size() != <span class=\"hljs-number\">0</span>) {\n            <span class=\"hljs-keyword\">for</span> (LogEntry logEntry: logEntries) {\n                System.out.println(<span class=\"hljs-string\">&quot;Found error in logs: &quot;</span> + logEntry.getMessage() );\n            }\n            fail(errorLogs.size() + <span class=\"hljs-string\">&quot; Console error found&quot;</span>);\n        }\n    }</code></pre><p>And as you can see on the image below error was reported.</p><p><img src=\"/images/blog/Przechwytywanie2.PNG\" alt=\"\"></p><p>Every line of code needed to write this blog post was added to my <a href=\"https://github.com/slawekradzyminski/AwesomeTesting/commit/51969357bf940c58821bc080dcc7c3588d69cf8e\" target=\"_blank\" rel=\"noreferrer\">GitHub project</a>.</p><p>Happy new year everyone :)</p>"
}