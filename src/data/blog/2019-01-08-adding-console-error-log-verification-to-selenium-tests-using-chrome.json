{
  "id": "2019-01-08-adding-console-error-log-verification-to-selenium-tests-using-chrome",
  "title": "Adding console error log verification to Selenium tests using Chrome",
  "date": "2019-01-08",
  "categories": [
    "Selenium"
  ],
  "tags": [
    "selenium"
  ],
  "permalink": "/2019/01/adding-console-error-log-verification",
  "content": "<p><img src=\"/images/blog/Przechwytywanie.PNG\" alt=\"\" style=\"width: 100%;\"></p>\n<p>Selenium is an amazing test tool that is used pretty much everywhere these days. People are usually so spoiled by the<br>number of functionalities it provides that they can&#39;t hide being surprised when they notice two missing functionalities:</p>\n<ul>\n<li>ability to assert HTTP requests/responses (like status codes)</li>\n<li>ability to capture browser console logs</li>\n</ul>\n<p>Today I&#39;d like to focus on the second topic - browser console.</p>\n<p>To put it in simple words. Currently, you can easily capture browser logs only in Chrome. Of course, you can always<br>build your own solution for other browsers but you have no guarantee that it would work after next browser update. There<br>is a <a href=\"https://github.com/w3c/webdriver/issues/406\" target=\"_blank\" rel=\"noreferrer\">W3C Webdriver</a> attempt to standardize browser logging interface<br>however the progress seems to be slow.</p>\n<p>Thankfully, in Chrome errors can be captured and I encourage you to do it in your scripts.</p>\n<p><strong>Preparation</strong></p>\n<p>To show this feature in action we need to prepare tests. I&#39;m going to use my own blog as an example of a site not<br>reporting any console errors. In order to make failing example deterministic I created a custom broken site.</p>\n<pre><code class=\"language-xml\">&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Page&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div&gt;The image below does not work by purpose\n    (it triggers js error in browser console).&lt;/div&gt;\n&lt;img src=&quot;https://nonexisting.url&quot;&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>As usual, tests are written using <a href=\"https://fluentlenium.com/\" target=\"_blank\" rel=\"noreferrer\">FluentLenium</a>.</p>\n<pre><code class=\"language-java\">@Test\npublic void pageHopefullyWithoutErrors() {\ngoTo(awesomeTestingPage);\n}\n\n    @Test\n    public void pageWithErrors() throws URISyntaxException {\n        goToFileInResources(&quot;pageWithError.html&quot;);\n    }\n</code></pre>\n<p><strong>Demo</strong></p>\n<p>Capturing console log errors is pretty easy. You only need one method</p>\n<pre><code class=\"language-java\">@After\n    public void verifyConsoleErrors() {\n        Logs logs = getDriver().manage().logs();\n        LogEntries logEntries = logs.get(LogType.BROWSER);\n        List&lt;LogEntry&gt; errorLogs = logEntries.filter(Level.SEVERE);\n\n        if (errorLogs.size() != 0) {\n            for (LogEntry logEntry: logEntries) {\n                System.out.println(&quot;Found error in logs: &quot; + logEntry.getMessage() );\n            }\n            fail(errorLogs.size() + &quot; Console error found&quot;);\n        }\n    }\n</code></pre>\n<p>And as you can see on the image below error was reported.</p>\n<p><img src=\"/images/blog/Przechwytywanie2.PNG\" alt=\"\" style=\"width: 100%;\"></p>\n<p>Every line of code needed to write this blog post was added to<br>my <a href=\"https://github.com/slawekradzyminski/AwesomeTesting/commit/51969357bf940c58821bc080dcc7c3588d69cf8e\" target=\"_blank\" rel=\"noreferrer\">GitHub project</a>.</p>\n<p>Happy new year everyone :)</p>\n"
}