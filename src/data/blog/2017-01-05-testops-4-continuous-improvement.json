{
  "id": "2017-01-05-testops-4-continuous-improvement",
  "title": "TestOps - Continuous Improvement",
  "date": "2017-01-05",
  "categories": [
    "TestOps"
  ],
  "tags": [
    "testops",
    "learning"
  ],
  "permalink": "/2017/01/testops-4-continuous-improvement",
  "content": "<p><a href=\"https://4.bp.blogspot.com/-LEGBZzRgHVg/WHoI1mNkZVI/AAAAAAAACj8/l_BPjsJiVaAb4saZILsVsjLpjZmrExnzQCLcB/s1600/There-is-always-space.jpg\" target=\"_blank\" rel=\"noreferrer\"><img src=\"https://4.bp.blogspot.com/-LEGBZzRgHVg/WHoI1mNkZVI/AAAAAAAACj8/l_BPjsJiVaAb4saZILsVsjLpjZmrExnzQCLcB/s400/There-is-always-space.jpg\" alt=\"Oscar De La Hoya Continuous Improvement quotation\" style=\"width: 100%;\"></a></p>\n<p><strong>Continuous Improvement / Kaizen introduction</strong></p>\n<p>According to <a href=\"https://en.wikipedia.org/wiki/Continual_improvement_process\" target=\"_blank\" rel=\"noreferrer\">Wikipedia</a> Continuous Improvement is a<br>never-ending process which focuses on increasing the effectiveness and/or efficiency of an organisation to fulfil its<br>policy and objectives. It was popularised by Lean movement in manufacturing and business. Usually Continuous Improvement<br>efforts include identifying opportunities for streamlining work and reducing waste.</p>\n<p><a href=\"https://en.wikipedia.org/wiki/Kaizen\" target=\"_blank\" rel=\"noreferrer\">Kaizen</a> is the practice of Continuous Improvement which was first defined in<br>1986 <a href=\"https://www.amazon.co.uk/gp/product/007554332X/ref=as_li_tl?ie=UTF8&camp=1634&creative=6738&creativeASIN=007554332X&linkCode=as2&tag=awesotesti-21%22\" target=\"_blank\" rel=\"noreferrer\">Kaizen: the key to Japan&#39;s competitive success</a><br>book. You may think of it as a philosophy which focuses strongly on constant improvement of everything. I&#39;d like to show<br>in this post how to adopt such approach into your TestOps activities.</p>\n<p><strong>Beginner&#39;s Mind benefits</strong></p>\n<p>In order to adopt Continuous Improvement philosophy you need healthy level of certain characteristic - modesty. Unless<br>you realise that not everything you do is perfect positive change is impossible.</p>\n<p>Some time ago I found random article about Beginner&#39;s Mind which is a approach from Zen Buddhism. Zen Master Shunryu<br>Suzuki said,<br>in <a href=\"https://www.amazon.co.uk/gp/product/1590308492/ref=as_li_tl?ie=UTF8&camp=1634&creative=6738&creativeASIN=1590308492&linkCode=as2&tag=awesotesti-21%22\" target=\"_blank\" rel=\"noreferrer\">Zen Mind, Beginner&#39;s Mind: Informal Talks on Zen Meditation and Practice</a>:&#39;<br><em>In the Beginner&#39;s Mind there are many possibilities. In the expert&#39;s mind there are few</em>.&#39;</p>\n<p>In terms of learning I recommend trying to be a child again. Imagine 3 year old kid with almost insatiable level of<br>curiosity. Everything is new. Everything is fascinating. Everything is worth a try. Nothing should be left unexplored.<br>Risk of failure is non existing.</p>\n<p><em>Sidenote:</em> I added &#39;healthy&#39; word alongside modesty because in some situation you have to make bold demand. Job salary<br>negotiation is perfect example. Set your prize high<br>and <a href=\"http://www.awesome-testing.com/2016/03/learning-pathways-for-testers.html\" target=\"_blank\" rel=\"noreferrer\">aim to earn above average</a>.</p>\n<p><strong>Continuous Improvement in TestOps</strong></p>\n<p>I decided to focus on Continuous Improvement in<br>my <a href=\"http://www.awesome-testing.com/search/label/testops\" target=\"_blank\" rel=\"noreferrer\">TestOps series</a>, because I consider it necessary component for<br>success. IT industry is very demanding and without it you risk failing behind.</p>\n<p>Here is my list of the most important things which can be constantly improved:</p>\n<p><strong>Building the Pyramid</strong></p>\n<p><a href=\"https://www.youtube.com/watch?v=lbrbNRhLbQ0\" target=\"_blank\" rel=\"noreferrer\">Thousands of workers</a>had to work in order to build Egyptian pyramids.<br>Creative effective <a href=\"https://martinfowler.com/bliki/TestPyramid.html\" target=\"_blank\" rel=\"noreferrer\">test pyramid</a>today is much easier, and you should<br>take full advantage of that. It&#39;s surprising that there is quite a few articles about correct test design, yet<br>possibility of changing test strategy which turned out to be ineffective (not rare event<br>as <a href=\"http://james-willett.com/2016/10/8-reasons-why-software-testing-is-harder-than-development/\" target=\"_blank\" rel=\"noreferrer\">testing is sometimes harder</a><br>than actual development) is rarely analysed.</p>\n<p>Applications, frameworks, requirements and almost everything in IT change over time. It may of course change to worse,<br>but I&#39;m sure there is one thing that improved since last year - your knowledge. Look critically at your test scenarios<br>and ask yourself simple question: is there something that can be improved? For example let&#39;s say your application has<br>now new APIs available. Do you still test through GUI or have you moved your scenarios to service level?</p>\n<p>Probably we all love Selenium tests as they&#39;re fun to create, but some functionalities can really be covered by unit<br>tests. That&#39;s huge amount of time and maintanability effort saved.</p>\n<p><strong>Need for Speed</strong></p>\n<p>Napoleon Bonaparte once said that &#39;<em>Space we can recover; time never</em>&#39;. Tests that don&#39;t give fast feedback are often<br>very frustrating, because they require context switching. It&#39;s not a big deal when real application bug was found, but<br>once it turns out to be a flake developers tend to lose faith in test suite reliability immediately.</p>\n<p>Overall execution time should be carefully measured and never ignored. Parallelism in test execution is a must today,<br>and it&#39;s not even hard to achieve. All top frameworks support it, and for Selenium we have Grid.</p>\n<p>Sometimes operational work has to be done in this area, hence good TestOps should be on top of things here.</p>\n<p><strong>Refactor</strong></p>\n<p>Every single line of code needs to maintained. Tester/developer maintenance work isn&#39;t free, so we can safely assume<br>that every single line of code cost your company money.</p>\n<p>Programmers often ask POs for refactor time which not only makes work easier for them, but it also saves some money. We<br>should treat testing code in the same way as production code. That doesn&#39;t only mean that it should be in the same<br>repository, but also that there is necessity to make it better every day.</p>\n<p>With IntelliJ IDE refactoring is pretty easy. Are you using it&#39;s features fully? Do you improve the code in the area<br>close to your current task?</p>\n<p><strong>Automate Everything</strong></p>\n<p>TestOps is all about automation. It doesn&#39;t mean only for testing, but also for infrastructure.<br>Actually, <a href=\"http://amzn.to/2jkXDHw\" target=\"_blank\" rel=\"noreferrer\">Site Reliability Engineers</a>would argue that ability to recreate your testing<br>environment from scratch in seconds (using <a href=\"http://www.awesome-testing.com/2015/12/testing-with-ansible.html\" target=\"_blank\" rel=\"noreferrer\">Ansible</a><br>for example)is not enough. It should also be self-healing.</p>\n<p><a href=\"http://www.awesome-testing.com/2016/10/testops-3-continuous-testing.html\" target=\"_blank\" rel=\"noreferrer\">Continuous Testing</a>is prerequisite for fast<br>and quality software releases.</p>\n<p><strong>Embrace Cloud Computing &amp; Open Source Software</strong></p>\n<p>This point is closely connected to c) and d). Effective usage of Spring Boot allows you to create working app in very<br>short time. Various people and companies offer working software which reduces our maintenance efforts. It not only saves<br>us time, but also money. Why not utilise them?</p>\n<p>Physical servers require space, maintenance, management and constant cooling. Perhaps small server in the cloud would be<br>cheaper?</p>\n<p><strong>Read</strong></p>\n<p>Few years ago I started reading a lot a book. Now it&#39;s my habit and I feel really weird if I hadn&#39;t had a chance to do<br>that. Since then almost every aspect of my life improved, including personal relationships. I even dare to say that:</p>\n<blockquote class=\"blog-quote\"><p>Reading is a way to acquire someone else&#39;s experience.  </p></p></blockquote><p>You really should expand your testing knowledge and see how it&#39;s done in various companies.<br>Perhaps <a href=\"http://amzn.to/2iyhrK4\" target=\"_blank\" rel=\"noreferrer\">How Google Tests Software</a>is a good place to start. Image you are asked on job<br>interview about the latest testing book you have read. What would you answer?</p>\n<p><strong>Conclusion</strong></p>\n<p>Adopting Continuous Improvement mindset is very beneficial in every single aspect of your life. I&#39;m pretty sure that the<br>very best people you know all practice it a lot. Why not utilise it in testing as well?</p>\n<p><strong>Further Reading</strong></p>\n<p>Blogs:  </p>\n<ul>\n<li><a href=\"http://www.awesome-testing.com/2016/10/testops-3-continuous-testing.html\" target=\"_blank\" rel=\"noreferrer\">TestOps #3 - Continuous Testing</a></li>\n<li><a href=\"http://www.awesome-testing.com/2016/03/learning-pathways-for-testers.html\" target=\"_blank\" rel=\"noreferrer\">Learning Pathways for Testers</a></li>\n<li><a href=\"http://www.awesome-testing.com/2016/02/dos-and-donts-for-testers-2016-edition.html\" target=\"_blank\" rel=\"noreferrer\">Do&#39;s and dont&#39;s for Testers</a></li>\n</ul>\n<p>Books:</p>\n<ul>\n<li><a href=\"http://amzn.to/2jGXvBO\" target=\"_blank\" rel=\"noreferrer\">Lean Software Development</a></li>\n</ul>\n"
}