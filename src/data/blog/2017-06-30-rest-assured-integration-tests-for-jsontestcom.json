{
  "id": "2017-06-30-rest-assured-integration-tests-for-jsontestcom",
  "title": "Rest Assured integration tests for jsontest.com",
  "date": "2017-06-30",
  "categories": [
    "API testing"
  ],
  "tags": [
    "API testing"
  ],
  "permalink": "/2017/06/rest-assured-integration-tests-for",
  "content": "<p><img src=\"/images/blog/name-transparent.png\" alt=\"\" style=\"width: 100%;\"></p>\n<p>In my very<br>popular <a href=\"http://www.awesome-testing.com/2016/04/testers-toolbox-alternative-guide.html\" target=\"_blank\" rel=\"noreferrer\">Tester&#39;s toolbox - an alternative guide</a><br>I listed few examples of free public APIs that can be used for learning Rest Assured. Recently I have found one more<br>site - <a href=\"http://www.jsontest.com/\" target=\"_blank\" rel=\"noreferrer\">www.jsontest.com</a>. Having in mind that my<br>last <a href=\"http://www.awesome-testing.com/2016/07/restful-api-testing-with-rest-assured-1.html\" target=\"_blank\" rel=\"noreferrer\">API test post</a> was almost<br>exactly one year ago I decided to utilize my latest finding and show you few<br>examples. <a href=\"http://www.jsontest.com/\" target=\"_blank\" rel=\"noreferrer\">JSON Test </a>API has few excellent functionalities for people who want to learn.</p>\n<p>In order to use Rest Assured in your Maven project add this dependency:</p>\n<pre><code class=\"language-xml\">&lt;dependency&gt;\n            &lt;groupId&gt;io.rest-assured&lt;/groupId&gt;\n            &lt;artifactId&gt;rest-assured&lt;/artifactId&gt;\n            &lt;version&gt;3.0.3&lt;/version&gt;\n        &lt;/dependency&gt;\n</code></pre>\n<h2>Rest Assured GET examples</h2>\n<p>As a nice beginning I suggest to test <a href=\"http://ip.jsontest.com/\" target=\"_blank\" rel=\"noreferrer\">ip.jsontest.com</a>. This endpoint prints your current IP<br>address. Here is simple test case that looks pretty much like copy/paste from<br>excellent <a href=\"https://github.com/rest-assured/rest-assured/wiki/GettingStarted\" target=\"_blank\" rel=\"noreferrer\">getting started guide</a>. Please note that<br>you would most likely have to update partOfMyIp String.</p>\n<pre><code class=\"language-java\">@Test\n    public void ipTest() {\n        String partOfMyIp = &quot;142&quot;;\n\n        given().contentType(JSON)\n                .when().get(&quot;http://ip.jsontest.com&quot;)\n                .then()\n                .body(&quot;ip&quot;, containsString(partOfMyIp));\n    }\n</code></pre>\n<p>Second endpoint - <a href=\"http://date.jsontest.com/\" target=\"_blank\" rel=\"noreferrer\">date.jsontest.com</a>returns date in three formats. Dealing with a time in<br>tests can be tricky (flaky) so I decided to assert only date in MM-dd-yyyy format.</p>\n<pre><code class=\"language-java\">@Test\n    public void dateTest() {\n\n        Date date = new Date();\n        String dateMMddyyyy = new SimpleDateFormat(&quot;MM-dd-yyyy&quot;).format(date);\n\n        given().contentType(JSON)\n                .when().get(&quot;http://date.jsontest.com&quot;)\n                .then()\n                .body(&quot;date&quot;, equalTo(dateMMddyyyy));\n    }\n</code></pre>\n<p>There is also <a href=\"http://echo.jsontest.com/key/value/one/two\" target=\"_blank\" rel=\"noreferrer\">echo.jsontest.com/key/value/one/two</a>endpoint that gets the<br>values from URL.</p>\n<pre><code class=\"language-java\">@Test\n    public void mirrorTest() {\n\n        String firstKey = &quot;firstKey&quot;;\n        String firstValue = &quot;firstValue&quot;;\n        String secondKey = &quot;secondKey&quot;;\n        String secondValue = &quot;secondValue&quot;;\n\n        given().contentType(JSON)\n                .when().get(format(&quot;http://%s/%s/%s/%s/%s&quot;,\n                &quot;echo.jsontest.com&quot;, firstKey, firstValue, secondKey, secondValue))\n\n                .then()\n                .body(firstKey, equalTo(firstValue))\n                .body(secondKey, equalTo(secondValue));\n    }\n</code></pre>\n<p>Another endpoint - <a href=\"http://cookie.jsontest.com/\" target=\"_blank\" rel=\"noreferrer\">cookie.jsontest.com</a>sets the cookie as response. Here is the test that<br>asserts if the cookie was set.</p>\n<pre><code class=\"language-java\">@Test\n    public void cookieTest() {\n        given().contentType(JSON)\n                .when().get(&quot;http://cookie.jsontest.com&quot;)\n                .then()\n                .cookie(&quot;jsontestdotcom&quot;, is(notNullValue()));\n    }\n</code></pre>\n<p>The most fun you may get from <a href=\"http://headers.jsontest.com/\" target=\"_blank\" rel=\"noreferrer\">headers.jsontest.com</a>. This endpoint reads headers from your<br>request and prints them in response. I decided to send XML with UTF-8 enconding and assert Content Type.</p>\n<pre><code class=\"language-java\">@Test\n    public void printSentHeaders() {\n\n        RestAssuredConfig utf8Config\n                = RestAssured.config()\n                  .encoderConfig(encoderConfig().defaultContentCharset(&quot;UTF-8&quot;));\n\n        given().config(utf8Config).contentType(XML)\n                .when().get(&quot;http://headers.jsontest.com&quot;)\n                .then()\n                .body(&quot;Content-Type&quot;, equalTo(&quot;application/xml; charset=UTF-8&quot;));\n    }\n</code></pre>\n<h2>Rest Assured POST examples</h2>\n<p>Those were GET examples. Now we would use POST method and send some data. Please note that .queryParam() method has to<br>be defined in given() section which is a little bit strange for me. I&#39;d rather code that in when() section after<br>providing url.</p>\n<p>First endpoint -<a href=\"http://md5.jsontest.com/?text=text\" target=\"_blank\" rel=\"noreferrer\">md5.jsontest.com/?text=text</a>takes your text and returns it together<br>with calculated md5 checksum.</p>\n<pre><code class=\"language-java\">@Test\n    public void shouldPrintMd5() {\n        String myRandomText = &quot;My random text&quot;;\n        String md5 = md5Hex(myRandomText);\n\n        given().contentType(JSON)\n                .queryParam(&quot;text&quot;, myRandomText)\n                .when().post(&quot;http://md5.jsontest.com&quot;)\n                .then()\n                .body(&quot;md5&quot;, equalTo(md5))\n                .body(&quot;original&quot;, equalTo(myRandomText));\n    }\n</code></pre>\n<p>Final endpoint which I decided to test is<a href=\"http://validate.jsontest.com/\" target=\"_blank\" rel=\"noreferrer\">validate.jsontest.com</a>. It takes &#39;json&#39;<br>queryParam value and validates if it&#39;s parse-able (i.e. if it&#39;s correctly formatted json). Below is simple happy path:</p>\n<pre><code class=\"language-java\">@Test\n    public void postSuccessfulBasicValidationTest() {\n        String parsableJson = &quot;{\\&quot;key\\&quot;:\\&quot;value\\&quot;}&quot;;\n\n        given().contentType(JSON)\n                .queryParam(&quot;json&quot;, parsableJson)\n                .when().post(&quot; http://validate.jsontest.com&quot;)\n                .then()\n                .body(&quot;validate&quot;, equalTo(true));\n    }\n</code></pre>\n<p>And negative path:</p>\n<pre><code class=\"language-java\">@Test\n    public void postFailedValidationTest() {\n        String nonParsableJson = &quot;{\\&quot;key\\&quot;:\\&quot;value&quot;;\n\n        given().contentType(JSON)\n                .queryParam(&quot;json&quot;, nonParsableJson)\n                .when().post(&quot; http://validate.jsontest.com&quot;)\n                .then()\n                .body(&quot;validate&quot;, equalTo(false));\n    }\n</code></pre>\n<p>As usual all code from this post (+1 extra test) and from my<br>previous <a href=\"http://www.awesome-testing.com/2016/07/restful-api-testing-with-rest-assured-1.html\" target=\"_blank\" rel=\"noreferrer\">Rest Assured Post </a>is<br>available on my <a href=\"https://github.com/slawekradzyminski/AwesomeTesting\" target=\"_blank\" rel=\"noreferrer\">GitHub project</a>.</p>\n"
}