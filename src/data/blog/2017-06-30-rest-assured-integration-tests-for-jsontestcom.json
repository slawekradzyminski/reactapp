{
  "id": "2017-06-30-rest-assured-integration-tests-for-jsontestcom",
  "title": "Rest Assured integration tests for jsontest.com",
  "date": "2017-06-30",
  "category": "API testing",
  "permalink": "/2017/06/rest-assured-integration-tests-for",
  "content": "<img src=\"/images/blog/name-transparent.png\" alt=\"\">\n\n<p>In my very popular <a href=\"http://www.awesome-testing.com/2016/04/testers-toolbox-alternative-guide.html\" target=\"_blank\" rel=\"noreferrer\">Tester&#39;s toolbox - an alternative guide</a> I listed few examples of free public APIs that can be used for learning Rest Assured. Recently I have found one more site - <a href=\"http://www.jsontest.com/\" target=\"_blank\" rel=\"noreferrer\">www.jsontest.com</a>. Having in mind that my last <a href=\"http://www.awesome-testing.com/2016/07/restful-api-testing-with-rest-assured-1.html\" target=\"_blank\" rel=\"noreferrer\">API test post</a> was almost exactly one year ago I decided to utilize my latest finding and show you few examples. <a href=\"http://www.jsontest.com/\" target=\"_blank\" rel=\"noreferrer\">JSON Test </a>API has few excellent functionalities for people who want to learn.</p><p>In order to use Rest Assured in your Maven project add this dependency:</p><pre><code class=\"hljs language-plaintext\">\n        &lt;dependency&gt;\n            &lt;groupId&gt;io.rest-assured&lt;/groupId&gt;\n            &lt;artifactId&gt;rest-assured&lt;/artifactId&gt;\n            &lt;version&gt;3.0.3&lt;/version&gt;\n        &lt;/dependency&gt;\n</code></pre><h2>Rest Assured GET examples</h2>\n<p>As a nice beginning I suggest to test <a href=\"http://ip.jsontest.com/\" target=\"_blank\" rel=\"noreferrer\">ip.jsontest.com</a>. This endpoint prints your current IP address. Here is simple test case that looks pretty much like copy/paste from excellent <a href=\"https://github.com/rest-assured/rest-assured/wiki/GettingStarted\" target=\"_blank\" rel=\"noreferrer\">getting started guide</a>. Please note that you would most likely have to update partOfMyIp String.</p><pre><code class=\"hljs language-java\">\n    <span class=\"hljs-meta\">@Test</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">ipTest</span><span class=\"hljs-params\">()</span> {\n        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">partOfMyIp</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;142&quot;</span>;\n\n        given().contentType(JSON)\n                .<span class=\"hljs-keyword\">when</span>().get(<span class=\"hljs-string\">&quot;http://ip.jsontest.com&quot;</span>)\n                .then()\n                .body(<span class=\"hljs-string\">&quot;ip&quot;</span>, containsString(partOfMyIp));\n    }\n</code></pre><p>Second endpoint - <a href=\"http://date.jsontest.com/\" target=\"_blank\" rel=\"noreferrer\">date.jsontest.com</a>returns date in three formats. Dealing with a time in tests can be tricky (flaky) so I decided to assert only date in MM-dd-yyyy format.</p><pre><code class=\"hljs language-java\">\n    <span class=\"hljs-meta\">@Test</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">dateTest</span><span class=\"hljs-params\">()</span> {\n\n        <span class=\"hljs-type\">Date</span> <span class=\"hljs-variable\">date</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>();\n        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">dateMMddyyyy</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">SimpleDateFormat</span>(<span class=\"hljs-string\">&quot;MM-dd-yyyy&quot;</span>).format(date);\n\n        given().contentType(JSON)\n                .<span class=\"hljs-keyword\">when</span>().get(<span class=\"hljs-string\">&quot;http://date.jsontest.com&quot;</span>)\n                .then()\n                .body(<span class=\"hljs-string\">&quot;date&quot;</span>, equalTo(dateMMddyyyy));\n    }\n</code></pre><p>There is also <a href=\"http://echo.jsontest.com/key/value/one/two\" target=\"_blank\" rel=\"noreferrer\">echo.jsontest.com/key/value/one/two</a>endpoint that gets the values from URL.</p><pre><code class=\"hljs language-java\">\n    <span class=\"hljs-meta\">@Test</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">mirrorTest</span><span class=\"hljs-params\">()</span> {\n\n        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">firstKey</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;firstKey&quot;</span>;\n        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">firstValue</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;firstValue&quot;</span>;\n        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">secondKey</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;secondKey&quot;</span>;\n        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">secondValue</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;secondValue&quot;</span>;\n\n        given().contentType(JSON)\n                .<span class=\"hljs-keyword\">when</span>().get(format(<span class=\"hljs-string\">&quot;http://%s/%s/%s/%s/%s&quot;</span>,\n                <span class=\"hljs-string\">&quot;echo.jsontest.com&quot;</span>, firstKey, firstValue, secondKey, secondValue))\n\n                .then()\n                .body(firstKey, equalTo(firstValue))\n                .body(secondKey, equalTo(secondValue));\n    }\n</code></pre><p>Another endpoint - <a href=\"http://cookie.jsontest.com/\" target=\"_blank\" rel=\"noreferrer\">cookie.jsontest.com</a>sets the cookie as response. Here is the test that asserts if the cookie was set.</p><pre><code class=\"hljs language-java\">\n    <span class=\"hljs-meta\">@Test</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">cookieTest</span><span class=\"hljs-params\">()</span> {\n        given().contentType(JSON)\n                .<span class=\"hljs-keyword\">when</span>().get(<span class=\"hljs-string\">&quot;http://cookie.jsontest.com&quot;</span>)\n                .then()\n                .cookie(<span class=\"hljs-string\">&quot;jsontestdotcom&quot;</span>, is(notNullValue()));\n    }\n</code></pre><p>The most fun you may get from <a href=\"http://headers.jsontest.com/\" target=\"_blank\" rel=\"noreferrer\">headers.jsontest.com</a>. This endpoint reads headers from your request and prints them in response. I decided to send XML with UTF-8 enconding and assert Content Type.</p><pre><code class=\"hljs language-java\">\n    <span class=\"hljs-meta\">@Test</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">printSentHeaders</span><span class=\"hljs-params\">()</span> {\n\n        <span class=\"hljs-type\">RestAssuredConfig</span> <span class=\"hljs-variable\">utf8Config</span>\n                <span class=\"hljs-operator\">=</span> RestAssured.config()\n                  .encoderConfig(encoderConfig().defaultContentCharset(<span class=\"hljs-string\">&quot;UTF-8&quot;</span>));\n\n        given().config(utf8Config).contentType(XML)\n                .<span class=\"hljs-keyword\">when</span>().get(<span class=\"hljs-string\">&quot;http://headers.jsontest.com&quot;</span>)\n                .then()\n                .body(<span class=\"hljs-string\">&quot;Content-Type&quot;</span>, equalTo(<span class=\"hljs-string\">&quot;application/xml; charset=UTF-8&quot;</span>));\n    }\n</code></pre><h2>Rest Assured POST examples</h2>\n<p>Those were GET examples. Now we would use POST method and send some data. Please note that .queryParam() method has to be defined in given() section which is a little bit strange for me. I&#39;d rather code that in when() section after providing url.</p><p>First endpoint -<a href=\"http://md5.jsontest.com/?text=text\" target=\"_blank\" rel=\"noreferrer\">md5.jsontest.com/?text=text</a>takes your text and returns it together with calculated md5 checksum.</p><pre><code class=\"hljs language-java\">\n    <span class=\"hljs-meta\">@Test</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">shouldPrintMd5</span><span class=\"hljs-params\">()</span> {\n        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">myRandomText</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;My random text&quot;</span>;\n        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">md5</span> <span class=\"hljs-operator\">=</span> md5Hex(myRandomText);\n\n        given().contentType(JSON)\n                .queryParam(<span class=\"hljs-string\">&quot;text&quot;</span>, myRandomText)\n                .<span class=\"hljs-keyword\">when</span>().post(<span class=\"hljs-string\">&quot;http://md5.jsontest.com&quot;</span>)\n                .then()\n                .body(<span class=\"hljs-string\">&quot;md5&quot;</span>, equalTo(md5))\n                .body(<span class=\"hljs-string\">&quot;original&quot;</span>, equalTo(myRandomText));\n    }\n</code></pre><p>Final endpoint which I decided to test is<a href=\"http://validate.jsontest.com/\" target=\"_blank\" rel=\"noreferrer\">validate.jsontest.com</a>. It takes &#39;json&#39; queryParam value and validates if it&#39;s parse-able (i.e. if it&#39;s correctly formatted json). Below is simple happy path:</p><pre><code class=\"hljs language-java\">\n    <span class=\"hljs-meta\">@Test</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">postSuccessfulBasicValidationTest</span><span class=\"hljs-params\">()</span> {\n        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">parsableJson</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;{\\&quot;key\\&quot;:\\&quot;value\\&quot;}&quot;</span>;\n\n        given().contentType(JSON)\n                .queryParam(<span class=\"hljs-string\">&quot;json&quot;</span>, parsableJson)\n                .<span class=\"hljs-keyword\">when</span>().post(<span class=\"hljs-string\">&quot; http://validate.jsontest.com&quot;</span>)\n                .then()\n                .body(<span class=\"hljs-string\">&quot;validate&quot;</span>, equalTo(<span class=\"hljs-literal\">true</span>));\n    }\n</code></pre><p>And negative path:</p><pre><code class=\"hljs language-java\">\n    <span class=\"hljs-meta\">@Test</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">postFailedValidationTest</span><span class=\"hljs-params\">()</span> {\n        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">nonParsableJson</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;{\\&quot;key\\&quot;:\\&quot;value&quot;</span>;\n\n        given().contentType(JSON)\n                .queryParam(<span class=\"hljs-string\">&quot;json&quot;</span>, nonParsableJson)\n                .<span class=\"hljs-keyword\">when</span>().post(<span class=\"hljs-string\">&quot; http://validate.jsontest.com&quot;</span>)\n                .then()\n                .body(<span class=\"hljs-string\">&quot;validate&quot;</span>, equalTo(<span class=\"hljs-literal\">false</span>));\n    }\n</code></pre><p>As usual all code from this post (+1 extra test) and from my previous <a href=\"http://www.awesome-testing.com/2016/07/restful-api-testing-with-rest-assured-1.html\" target=\"_blank\" rel=\"noreferrer\">Rest Assured Post </a>is available on my <a href=\"https://github.com/slawekradzyminski/AwesomeTesting\" target=\"_blank\" rel=\"noreferrer\">GitHub project</a>.</p>"
}