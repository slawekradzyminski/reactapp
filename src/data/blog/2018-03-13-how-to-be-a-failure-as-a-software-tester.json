{
  "id": "2018-03-13-how-to-be-a-failure-as-a-software-tester",
  "title": "How to be a failure as a software tester",
  "date": "2018-03-13",
  "categories": [
    "Testing thoughts"
  ],
  "tags": [
    "testing thoughts"
  ],
  "permalink": "/2018/03/how-to-be-failure-as-software-tester",
  "content": "<p><img src=\"/images/blog/failre.jpg\" alt=\"\" style=\"width: 100%;\"></p>\n<p>There are multiple sources for testers who strive to excellence, but the other perspective hasn&#39;t been covered... yet.<br>In my essay I&#39;ll try to show you how to make terrible job which can label you, your work and even your team as a<br>FAILURE.</p>\n<p>The list consist of few points which can’t be neglected if you want to achieve miserable results in your profession.</p>\n<p><strong>Fundamentals - mind &amp; body</strong></p>\n<p>Every ambitious goal in your life require proper foundations. Ignoring you personal development when it comes to mind &amp;<br>body is probably the single most important thing to do.</p>\n<p>If you train too much, eat healthy and keep your body relaxed you are in great danger of missing sick leaves which can<br>be used as additional holiday. Exercises have adverse effects on concentration and releasing stress. Better to keep your<br>muscles tense and always be slightly irritated.</p>\n<p>When it comes to mental development you may have seen certain kinds of people who advocate reading books. That’s a<br>terrible thing to do - better to keep your mind numb and never challenge it (especially with different points of view).<br>If you happen to read, make sure it does not force you to think. There are plenty of pages or newspapers which can be<br>used in that regard.</p>\n<p><strong>Quality guardian</strong></p>\n<p>Ingenious managers (who, I believe can proudly call themselves failures as well) had a brilliant idea some time ago.<br>They decided to transfer responsibility for successful releases into testers / QAs by introducing ‘quality guardian’<br>role. For those who don’t know how it works: this person has a decisive opinion whether given software can be<br>safely released into production.</p>\n<p>Imagine how much power it creates for failure testers. Most of the time successful IT products are released as soon as<br>possible in order to collect feedback and verify early version (called proof of concept - PoC). As a quality guardian<br>you can ‘Advocate &quot;caution.&quot; Be &quot;reasonable&quot; and urge your fellow-conferees to be &quot;reasonable&quot; and avoid haste which<br>might result in embarrassments or difficulties later on’ (see<br>my <a href=\"http://www.awesome-testing.com/2017/12/what-cia-teaches-us-about-productivity.html\" target=\"_blank\" rel=\"noreferrer\">What CIA teaches us about productivity</a><br>post for more ideas) to make sure releasing your software is cumbersome and slow process which require a lot of hassling<br>and discussions. If you notice however, that particular release candidate is in very bad shape don’t be afraid to<br>release it as quickly as possible.</p>\n<p>Make sure you always support introducing ‘quality guardian’ idea into your organisation. You can advertise it as idea<br>which frees developers from caring about quality. Be the only ‘quality guardian’ in your team.</p>\n<p><strong>Avoid technology</strong></p>\n<p>There is a lot of unnecessary talk around ‘technical tester’ concept. Apparently such person should be highly technical<br>with a lot of computer skills. As someone who wants to achieve miserable results you should actively refute such<br>nonsense.</p>\n<p>You shouldn’t innovate much. It’s better to keep things as they stand now without any automation at all. ISTQB advocates<br>heavy processes with a lot of documents, strategies, descriptive test cases etc. That’s a way to go. Do not experiment<br>with exploratory testing. Better to create new test cases and execute them shallowly.</p>\n<p>As a master you can go level higher and automate things which shouldn’t be automated (preferably using hard to maintain<br>Selenium scripts on top level) and execute manually tests which can be easily automated.</p>\n<p><strong>TestOps? What?</strong></p>\n<p>Remember and advocate it whenever possible: test environment maintenance is not you job. If something isn’t working<br>properly (for example one of adjacent webservice is down) shout that you are blocked and you can’t properly do your job.<br>Such problems should be fixed by ‘others’, ideally poorly defined ‘others’. Do not get your hands dirty trying to fix<br>it.</p>\n<p>Occasionally some developers may introduce you with cheaper, easier to maintain alternatives (<br>like <a href=\"https://github.com/SeleniumHQ/docker-selenium\" target=\"_blank\" rel=\"noreferrer\">Docker Selenium</a>). Remember: it’s a trap. Do not experiment too<br>much with such things. You may strategically say that you will check it later (remember not to commit for any date!),<br>but in fact you won’t.</p>\n<p>Avoid Infrastructure as a Code concept. Better to keep things misconfigured on various type of servers.</p>\n<p><strong>Team flow disruption</strong></p>\n<p>Believe it or not, but software development is social activity. As a team member you can influence your teammates in<br>many ways.</p>\n<p>You shouldn’t smile too much, that may lead to unnecessary positive vibes around. Better to be always in negative mood<br>and radiate it around your open space. If something bothers you make sure you complain loudly and everybody hears what<br>you have to say.</p>\n<p>Do not socialise with others drinking coffee or going for a beer after work hours. Better to be loner who isn’t bothered<br>much by peers. In rare instance, if someone asks you for help do not be too eager. Keep your knowledge to yourself and<br>don’t teach anyone anything.</p>\n<p>In lean software development there is a thing<br>called ‘<a href=\"http://www.leanproject.com/what-we-do/key-components/lean-tools-techniques/understanding-waste/\" target=\"_blank\" rel=\"noreferrer\">waste</a>’. Make<br>sure you understand it fully and know how to increase the amount of it. Look at your team as a complicated system and<br>try to influence it negative way.</p>\n<p><strong>Community perspective</strong></p>\n<p>Few testers wants you to be active part of community. Ignore them totally, do not attend local meetups, do not write<br>blogs, do not attend conferences, do not read technical books, do not discuss testing topics with others. Building your<br>personal brand is a sham.</p>\n<p>Why are you reading this post anyway? :)</p>\n"
}