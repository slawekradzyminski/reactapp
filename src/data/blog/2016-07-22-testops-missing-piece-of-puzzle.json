{
  "id": "2016-07-22-testops-missing-piece-of-puzzle",
  "title": "TestOps - missing piece of puzzle",
  "date": "2016-07-22",
  "categories": [
    "TestOps"
  ],
  "tags": [
    "testops",
    "devops"
  ],
  "permalink": "/2016/07/testops-missing-piece-of-puzzle",
  "content": "<p><img src=\"/images/blog/CPBtwnKWgAIne5H.jpg\" alt=\"\" style=\"width: 100%;\"></p>\n<p>Some time ago in<br>my <a href=\"https://awesome-testing.com/2016/02/dos-and-donts-for-testers-2016-edition.html\" target=\"_blank\" rel=\"noreferrer\">do/don&#39;t recommend</a>I encouraged you<br>to take care of your testing environment and learn orchestration tool<br>like <a href=\"https://awesome-testing.com/2015/12/testing-with-ansible.html\" target=\"_blank\" rel=\"noreferrer\">Ansible</a>. Somewhere between writing automated tests<br>and<br>implementing <a href=\"http://awesome-bookreviews.blogspot.com/2016/06/se-classics-1-continuous-delivery.html\" target=\"_blank\" rel=\"noreferrer\">Continuous Delivery</a>,<br>I came across interesting concept popularised<br>by <a href=\"https://twitter.com/setheliot\" target=\"_blank\" rel=\"noreferrer\">Seth Eliot</a> - <a href=\"http://www.ministryoftesting.com/tag/seth-eliot/\" target=\"_blank\" rel=\"noreferrer\">TestOps</a>. Even<br>though <a href=\"https://twitter.com/friendlytester/status/644135471329738752\" target=\"_blank\" rel=\"noreferrer\">Richard Bradshaw</a>didn&#39;t like the name I really<br>think there is something smart in this concept. By googling the name I<br>found <a href=\"http://uploads.pnsqc.org/2015/papers/t-054_Howlett_paper.pdf\" target=\"_blank\" rel=\"noreferrer\">a great paper</a>which says:</p>\n<blockquote class=\"blog-quote\"><p>TestOps as a concept revolves around ensuring product teams have access to any required test infrastructure, platforms</p><p>and frameworks they require without needing large amounts of time consuming configuration before commencing tests. Any</p><p>benefit from use of a CI system will be lost if the QA process takes days to complete due to environmental setup and</p><p>tear down on the part of the QA person on a team.  </p></p></blockquote><p>This post will start a new series which will focus on various technical testing topics like:</p>\n<ul>\n<li>Testing in Production</li>\n<li>Testing in Continuous Delivery era</li>\n<li>Testing in the Cloud</li>\n<li>Testing in Agile/Lean</li>\n<li>Monitoring (+ Alerting?)</li>\n<li>Data-Driven Quality</li>\n<li>Pentesting</li>\n</ul>\n<p>Why bother though? Here are the benefits:</p>\n<h3>Stepping outside the comfort zone</h3>\n<p>In almost every area of life, it&#39;s worth to try new things. Whether it&#39;s a journey to an unknown country, a new dish, or<br>studying new language benefits are unquestionable. You get yourself familiar with the learning process, which I believe<br>is a skill. Many people in our society fear to even take a different route to work (usually they&#39;re older, that&#39;s why<br>companies prefer younger employees accustomed to continuous change). If you don&#39;t have a continuous improvement mindset<br>you can&#39;t excel in the IT/testing industry. Train yourself to change it.</p>\n<blockquote class=\"blog-quote\"><p>If you want to be an effective employee, then take a look at your job description and treat the description a soft</p><p>boundary.  </p></p></blockquote><p><em><a href=\"https://leanpub.com/10behavioursofeffectiveemployees\" target=\"_blank\" rel=\"noreferrer\">Rob Lambert. “10 Behaviours Of Effective Employees.”</a></em></p>\n<h3>Deepening your Software Engineering understanding</h3>\n<p>In my post about<a href=\"https://awesome-testing.com/2016/03/learning-pathways-for-testers.html\" target=\"_blank\" rel=\"noreferrer\">learning</a>pathways for testers,<br>I mentioned already that you should be very critical about which sources you choose to follow. The amount of online<br>resources/blogs/books is pretty much unlimited. Before starting something new ask yourself a few questions:</p>\n<p>a) What business problem am I trying to solve?</p>\n<p>b) How much would my solution benefit stakeholders?</p>\n<p>c) Why am I doing this?</p>\n<p>Usually, those questions require you to look at your work from the bigger picture. By extending your knowledge in<br>software engineering via valuable books four answers to those questions would be more precise. That&#39;s why senior,<br>experienced engineers are so valuable on the job market - they not only have broad knowledge from the books but also<br>hands-on experience. You can&#39;t beat them by experience, so there is only one way.</p>\n<p>In the Google era, and with the right amount<br>of <a href=\"http://awesome-bookreviews.blogspot.com/2016/02/team-geek-software-developers-guide-to.html\" target=\"_blank\" rel=\"noreferrer\">soft/teamwork skills</a><br>you can solve almost every <strong>precisely</strong> defined problem.</p>\n<h3>Possibility to learn new things</h3>\n<p>Don&#39;t get yourself entrapped in a small testing world. Expand your all-around knowledge in IT.</p>\n<p>Selenium Grid doesn&#39;t crash because it&#39;s unstable. It has a custom configuration, limited Java resources, and network<br>configuration. Did you try to change them to make it work?</p>\n<p>Slow integration tests? Did you try to run them simultaneously? Did you stop trying after encountering the first<br>obstacle?</p>\n<p>Slow application build? Did you try to change Jenkins/TeamCity/Bamboo server/agent configuration?</p>\n<p>There are so many testing related things that can be improved by skilled Operations work that it simply can&#39;t be<br>ignored. Viktor Farcic in <a href=\"https://leanpub.com/the-devops-2-toolkit\" target=\"_blank\" rel=\"noreferrer\">&#39;The DevOps 2.0 Toolkit&#39;</a> gives us an almost<br>unlimited amount of knowledge. It&#39;s not rocket science by any means.</p>\n<h3>Possibility to discover new areas of testing</h3>\n<p>Experienced exploratory testing. Crème de la crème of the testing industry. I wouldn&#39;t say that manual tests would be<br>soon replaced by automated checks in 100%. However, to make them really effective from a business point of view they need<br>to find serious bugs as soon as possible. It can&#39;t be misspelling and it can&#39;t be wrong error message (unless of course,<br>it&#39;s a sign of something bigger in application core). It has to be a serious performance problem, slow application speed<br>under large traffic, unscalable design, or something big.</p>\n<p>All those things require deep knowledge. Architecture knowledge. Coding knowledge. Software Engineering knowledge. You<br>won&#39;t gain it just by reading ISTQB syllabuses.</p>\n<h3>Making your contribution indispensable</h3>\n<p>At first, I titled this chapter as &#39;Making yourself indispensable&#39;, however it has very bad connotations. Some people<br>naively think that by writing obscure code and by designing silly architecture they are making yourself irreplaceable.<br>That&#39;s not true. Real security comes from broad knowledge. Always try to improve your employability (Rob Lambert has<br>written a nice <a href=\"https://leanpub.com/remainingrelevant\" target=\"_blank\" rel=\"noreferrer\">book</a> about that).</p>\n<p>You should aim at making your <a href=\"https://leanpub.com/remainingrelevant\" target=\"_blank\" rel=\"noreferrer\">day-to-day</a> <strong>contribution</strong> indispensable. This<br>gives you real job security. By being smart you can sleep well.</p>\n<blockquote class=\"blog-quote\"><p>If you are among the top 1% in the world at what you do, you will never have to worry about “making it”. It’s the</p><p>surest path there is.  </p></p></blockquote><p><a href=\"http://conversionxl.com/this-i-believe/\" target=\"_blank\" rel=\"noreferrer\">Peep Laja - This I believe</a></p>\n"
}