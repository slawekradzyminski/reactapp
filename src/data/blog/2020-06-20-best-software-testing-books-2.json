{
  "id": "2020-06-20-best-software-testing-books-2",
  "title": "Best software testing books - 2",
  "date": "2020-06-20",
  "categories": [
    "Books"
  ],
  "tags": [
    "learning",
    "books"
  ],
  "permalink": "/2020/06/best-software-testing-books-2",
  "content": "<img src=\"/images/blog/photo-1457369804613-52c61a468e7d.jpeg\" alt=\"\">\n\n<p><strong>Introduction</strong></p><p>My first post about the <a href=\"https://www.awesome-testing.com/2017/04/best-software-testing-books.html\" target=\"_blank\" rel=\"noreferrer\">best software testing books</a> introduced you to a few great titles which should be read by every ambitious software tester. After three years of reading, I&#39;d like to expand my list.</p><p>Before I start a side-note. Don&#39;t read only technical or self-improvement non-fiction books. Create a habit of reading every day first and pick serious titles only from time to time. Reading can be a pleasurable experience that brings you joy. After a while, you start noticing connections and build wisdom that transcends every field (including software testing). Arguably, <a href=\"https://www.amazon.com/Count-Monte-Cristo-Penguin-Classics/dp/0140449264\" target=\"_blank\" rel=\"noreferrer\">The Count of Monte Cristo</a><br>can be considered as systems thinking book. There is only one way of seeing such connections: read, read, read...</p><p><strong><a href=\"https://www.amazon.com/Complete-Guide-Test-Automation-Maintaining-ebook/dp/B07FKGVQP6\" target=\"_blank\" rel=\"noreferrer\">Complete Guide to Test Automation</a>- Arnold Axelrod</strong></p><img src=\"/images/blog/testautomation.jpg\" alt=\"\">\n\n<p>A surprisingly unknown book. The first part contains an in-depth description of every possible aspect of test automation. The author goes through the whole journey from old-school manual testing to modern continuous delivery solutions. We can read about topics like record-playback tools (and why are they unreliable), the importance of test stable test environments, fast feedback loops, flaky tests, isolated tests, etc.</p><p>The human aspect is considered as well. Automated tests require good programming skills. Who should write them? How to convince business stakeholders that they&#39;re worth the effort? How to accommodate them into the team process? Arnon Axelrod answers all those questions.</p><p>The second part expands the preceding section with practice. Instead of theory, we have actual test automation code (in C#), test environment, and CI setup.</p><p>I liked this book so much because the author went from answering &#39;why&#39; question (part one) into answering &#39;how&#39;<br>question (part two). That&#39;s pretty much how I structure my blog posts as well. If you want to understand what kind of problems testers solve every day grab your copy now.</p><p><strong><a href=\"https://www.amazon.com/Thinking-Driven-Testing-Reasonable-Approach-Quality-ebook/dp/B07BN17VZ7\" target=\"_blank\" rel=\"noreferrer\">Thinking-Driven Testing</a>-<br>Adam Roman</strong></p><img src=\"/images/blog/thinking.jpg\" alt=\"\">\n\n<p>I recommend this book for four different reasons:</p><p>a) Fundamentals of Software Testing chapter is an excellent knowledge refresher. It&#39;s 50 pages of the condensed theory explained in easy words. I recommend you read it every time you go to a software testing job interview. Much better than ISTQB Foundation Level Syllabus.</p><p>b) It goes against the current fashion of elevating the importance of test automation. Contrary to what most temporary testing writers (including me) present in their text testing != automation. Adam Roman claims that the most important thing in testing is thinking, analyzing, and creating good, effective tests.</p><p>c) The author recommends a multidisciplinary approach. My readers know that I often seek connections between testing craft and other fields (systems thinking, antifragility, testops, etc.). Adam Roman goes as far as to connect philosophy with testing. I loved the explanation of why testers should have a broad set of various skills. Fully agree.</p><p>d) We have something new: the TQED modal. Time, Quantity, Events, and Data. Those are the four distinct things you should build your test cases on. How? Read a book.</p><p><strong><a href=\"https://www.amazon.com/Fundamentals-Software-Architecture-Engineering-Approach-ebook/dp/B0849MPK73\" target=\"_blank\" rel=\"noreferrer\">Fundamentals of Software Architecture</a>-<br>Mark Richards &amp; Neal Ford</strong></p><img src=\"/images/blog/architecture.jpg\" alt=\"\">\n\n<p>To effectively test your system you need to have a complete understanding of it. During job interviews, I&#39;m often surprised by how shallow software testers describe applications they test. A lot of the times even basic questions like &#39;how web services communicate between each other&#39; or &#39;what is the technology stack&#39; are too hard.</p><p>Gaps in knowledge are especially glaring for asynchronous, event-based communication. Whenever there is a message broker involved in a SUT the testers tend to struggle. Of course, such architectures are harder to test but the first step is understanding.</p><p>As remediation, I suggest reading a book about software architecture. Here is my recommendation. Fundamentals of Software Architecture were published in 2020 so you are guaranteed to have the latest architectural trends covered by it.</p><p><strong><a href=\"https://www.amazon.com/Incerto-Deluxe-Randomness-Procrustes-Antifragile/dp/198481981X\" target=\"_blank\" rel=\"noreferrer\">Incerto</a>- Nassim Nicholas Taleb</strong></p><img src=\"/images/blog/incerto.jpg\" alt=\"\">\n\n<p>In the first post, I recommended <a href=\"https://www.amazon.com/Thinking-Fast-Slow-Daniel-Kahneman/dp/0374533555\" target=\"_blank\" rel=\"noreferrer\">Thinking Fast and Slow</a> by David Kahneman. Books which sharpen thinking skills should be read regardless of your current profession. I find each of Nassim Nicholas Taleb very interesting, hence Incerto (which is a whole bibliography) recommendation.</p><p>My readers may be already familiar with the antifragility concept which I explained in <a href=\"https://www.awesome-testing.com/2018/02/testops-most-antifragile-testing-role.html\" target=\"_blank\" rel=\"noreferrer\">TestOps - the most antifragile testing role</a>.</p><p><a href=\"https://www.amazon.com/Black-Swan-Improbable-Robustness-Fragility/dp/081297381X/\" target=\"_blank\" rel=\"noreferrer\">The Black Swan</a> explains how unlikely events (like COVID pandemic) are largely ignored during risk calculation. I am almost certain that you ignore them during feature planning as well. <a href=\"https://www.amazon.com/Fooled-by-Randomness-audiobook/dp/B0012IZFRW\" target=\"_blank\" rel=\"noreferrer\">Fooled by Randomness</a> follows up this concept.</p><p><a href=\"https://www.amazon.com/Skin-in-Game-audiobook/dp/B077BSK9LC\" target=\"_blank\" rel=\"noreferrer\">Skin in the Game</a> presents an interesting decision framework based on self-accountability. According to an author, you should avoid relying on people who don&#39;t risk anything by their mistakes. That would mean all kinds of financial recommendations, journalism, economic predictions,<br>etc. In the IT world, you should pay special attention to consultants employed part-time.</p><p><strong><a href=\"https://www.amazon.com/Professional-JavaScript-Developers-Matt-Frisbie/dp/1119366445\" target=\"_blank\" rel=\"noreferrer\">Professional Javascript for Web Developers</a>-<br>Matt Frisbie</strong></p><img src=\"/images/blog/javascript.jpg\" alt=\"\">\n\n<p>A single language book recommendation? You may be wondering why I selected JavaScript instead of other languages. The reason is simple: Javascript is running in your browser right now. Every software tester was, is, or will be testing a web application. That&#39;s the future you should be prepared for.</p><p>Atwoodâ€™s Law says that any application that canbe written in JavaScript will eventually be written in JavaScript. I&#39;m not convinced entirely, but right now we have Node.js for backend and React Native for mobile. That means your whole technology stack can be based on a single programming language.</p><p>In the testing world, the trend seems to go towards JavaScript as well. <a href=\"https://github.com/puppeteer/puppeteer\" target=\"_blank\" rel=\"noreferrer\">Puppeteer</a>, <a href=\"https://webdriver.io/\" target=\"_blank\" rel=\"noreferrer\">WebDriverIO</a>,<br>and <a href=\"https://www.cypress.io/\" target=\"_blank\" rel=\"noreferrer\">Cypress</a> seem to be preferred choices in browser automation. API can be tested with <a href=\"https://jestjs.io/\" target=\"_blank\" rel=\"noreferrer\">Jest</a>, <a href=\"https://mochajs.org/\" target=\"_blank\" rel=\"noreferrer\">Mocha</a>, <a href=\"https://www.chaijs.com/\" target=\"_blank\" rel=\"noreferrer\">Chai</a>, <a href=\"https://sinonjs.org/\" target=\"_blank\" rel=\"noreferrer\">Sinon</a>,<br>etc. Even for performance testing, we have a new <a href=\"https://k6.io/\" target=\"_blank\" rel=\"noreferrer\">K6</a> tool.</p><p>Also, don&#39;t be discouraged by the world &#39;professional&#39;. On more than 1000+ pages you will find basic, intermediate, and advanced theory.</p><p><strong><a href=\"https://www.amazon.com/Leonardo-Vinci-Walter-Isaacson-ebook/dp/B071Y385Q1/ref=sr_1_1?dchild=1&keywords=Leonardo+da+vinci&qid=1591035104\" target=\"_blank\" rel=\"noreferrer\">Leonardo da Vinci</a>-<br>Walter Isaacson</strong></p><img src=\"/images/blog/davinci.jpg\" alt=\"\">\n\n<p>Every good tester I know is very curious about how things work. Leonardo da Vinci is perhaps the most curious-driver person who ever lived. Apart from painting, he was doing post-mortem examinations, architecture, wetland drying,<br>cannons, mines, siege machines, and much more. Just take a look at how his famous <a href=\"https://genius.com/Leonardo-da-vinci-letter-to-ludovico-sforza-annotated\" target=\"_blank\" rel=\"noreferrer\">motivation letter to Ludovico Sforza</a><br>looked like.</p><p>I feel like there is too little multidisciplinary in the world right now. That applies to testers as well. Don&#39;t sit too long in one project. If you test the web seek a movement into mobile native apps testing. Try a new tool, language,<br>approach. Expand soft skills. Do something, just like Leonardo da Vinci would do. You will find inspiration here.</p>"
}