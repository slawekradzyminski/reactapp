{
  "id": "2016-03-15-mapping-lean-principles-to-testing",
  "title": "Mapping lean principles to testing",
  "date": "2016-03-15",
  "categories": [
    "Testing thoughts"
  ],
  "tags": [
    "lean",
    "testops",
    "poppendieck",
    "test automation",
    "agile",
    "testing thoughts"
  ],
  "permalink": "/2016/03/mapping-lean-principles-to-testing",
  "content": "<p><img src=\"/images/blog/manifesto-thinklean.jpg\" alt=\"\" style=\"width: 100%;\"></p>\n<p><a href=\"https://awesome-testing.com/2016/02/dos-and-donts-for-testers-2016-edition.html\" target=\"_blank\" rel=\"noreferrer\">Do&#39;s and don&#39;ts for testers</a> is my most<br>viewed post so far. Because of that (and because it&#39;s always better to leave various doors open) I wouldn&#39;t focus on<br>technical posts only. Time for something my colleague accurately calls computer science belles-lettres.</p>\n<p>If you had read<br>my <a href=\"http://awesome-bookreviews.blogspot.com/2016/02/management-30-jurgen-apello.html\" target=\"_blank\" rel=\"noreferrer\">Management 3.0 review</a>you know<br>that I like to get familiar with views on software testing not only from our (QA&#39;s) side, by also from our peers (team<br>members, managers, project stakeholders, and clients) perspective. Actually, in my opinion, focusing only on the<br>testers&#39; view is probably <a href=\"http://www.istqb.org/\" target=\"_blank\" rel=\"noreferrer\">ISTQB&#39;s</a>biggest flaw. Never mind ISTQB, and let&#39;s move to the<br>business.</p>\n<p>Today I gave myself rather ambition task to<br>map <a href=\"http://www.slideshare.net/mvax/introduction-to-lean-software-development-5505495\" target=\"_blank\" rel=\"noreferrer\">Lean principles</a>to testing<br>activities. Why lean? I read recently Mary &amp; Tom<br>Poppendieck<a href=\"http://www.amazon.com/Lean-Software-Development-Agile-Toolkit/dp/0321150783\" target=\"_blank\" rel=\"noreferrer\">Lean Software Development - an Agile Toolkit</a><br>and Aaron Hodder <a href=\"http://testerkiwi.blogspot.com/2016/02/lean-testing-in-theory-and-practice.html\" target=\"_blank\" rel=\"noreferrer\">blog post</a>which<br>inspired me. Also, I like how lean practitioners focus on system thinking, trying<br>to <a href=\"http://qaspire.com/2015/03/09/optimize-the-whole/\" target=\"_blank\" rel=\"noreferrer\">optimize the whole</a> instead of a single activity.</p>\n<p>So how we, as testers, can adopt lean principles?</p>\n<p><strong>Eliminate waste</strong></p>\n<p>Anything that does not add value to a customer is a waste. In many old software testing books, we can read that every<br>release candidate has to be blessed by testers, and deployment to production without manual regression is not<br>acceptable. If you are familiar<br>with <a href=\"http://techblog.netflix.com/2013/08/deploying-netflix-api.html\" target=\"_blank\" rel=\"noreferrer\">the Netlflix deployment</a>cycle you know that smart<br>deployment is possible without any testing at all. However, in most cases, that&#39;s not possible, so how do we decide when<br>to go live?</p>\n<p>I think we should measure two things - <strong>the cost of delayed-release</strong> (due to testing) and <strong>the cost of finding a bug<br>in production</strong>. I can&#39;t tell you how to measure it, because it depends on your type of business. Make sure you&#39;re not<br>delaying your awesome feature release because you want to find all bugs in the manual regression process. We can&#39;t find<br>100% of bugs anyway. Simple as that.</p>\n<p>So to summarise it I suggest:</p>\n<ul>\n<li>expanding automated checks suite (according<br>to <a href=\"http://googletesting.blogspot.com/2015/04/just-say-no-to-more-end-to-end-tests.html\" target=\"_blank\" rel=\"noreferrer\">test pyramid</a>)</li>\n<li>hiring skilled exploratory testers which can quickly find flaws in release candidates</li>\n<li>automating deployment and measurement how it&#39;s working on production (all those continuous delivery and DevOps stuff)</li>\n<li>calculating costs of activities which I bolded above</li>\n</ul>\n<p><strong>Amplify learning</strong></p>\n<p>This one is simple and hard simultaneously. Software testing is a technical activity that requires more and more skills.<br>You may like it or not, but the best testers I had encountered in my short career had a broad knowledge of almost<br>every <a href=\"http://awesome-testing.blogspot.com/2016/02/dos-and-donts-for-testers-2016-edition.html\" target=\"_blank\" rel=\"noreferrer\">do&#39;s from my post</a>. So<br>the recipe here is simple: learn, analyze, make mistakes, fix, learn. Adopting the right mindset may be helpful here (<br>see<br>my &#39;<a href=\"http://awesome-bookreviews.blogspot.com/2015/12/the-obstacle-is-way-ryan-holiday.html\" target=\"_blank\" rel=\"noreferrer\">Obstacle is the Way review</a>&#39;).</p>\n<p>I&#39;m planning to write a post &#39;Recommended resources for testers&#39; soon. This may be helpful for you. Stay tuned :)</p>\n<p><strong>Decide as late as possible</strong></p>\n<p>Throughout every software project, the product under development changes considerably (if you don&#39;t believe just see<br>screenshots from an alpha version of video game - <a href=\"http://starcraft.wikia.com/wiki/StarCraft_alpha\" target=\"_blank\" rel=\"noreferrer\">Starcraft</a> for<br>example). Because of that preparing, detailed scripted test cases before is a waste of time. We should focus on building<br>a common understanding of business goals. If you are a BDD practitioner you probably know that&#39;s the key to success.</p>\n<p>The most popular testing design style - <a href=\"http://martinfowler.com/bliki/PageObject.html\" target=\"_blank\" rel=\"noreferrer\">Page Object</a>Pattern was<br>implemented to simplify maintenance work. When you write automated tests have in mind not only stability but and<br>maintainability. The product will change eventually.</p>\n<p><strong>Deliver as fast as possible</strong></p>\n<p>Make successful delivery of the right product (and in the right quality) your goal. We shouldn&#39;t block release just<br>because we think more will help us find more bugs. I had discussed it already in point 1. Testers should not be<br>considered as project bottleneck, because smart people tend to focus on them. Yahoo probably thought that, and<br>they <a href=\"http://spectrum.ieee.org/view-from-the-valley/computing/software/yahoos-engineers-move-to-coding-without-a-net\" target=\"_blank\" rel=\"noreferrer\">fixed it</a><br>spectacularly. Once again, because I think it&#39;s important: make successful delivery of the right product (and in the<br>right quality) your goal.</p>\n<p><strong>Empower the team</strong></p>\n<p>That&#39;s right, the team. Not developers, not managers, the team. This means that lean practitioners want to empower you.<br>All you need to do it to take this responsibility. In healthy companies, power depends on knowledge and experience. So,<br>theoretically, a tester can be the most important person in a team. Because why not?</p>\n<p><strong>Build integrity in</strong></p>\n<p>According to Poppendieck team, we have two types of integrity:</p>\n<ul>\n<li><p>Perceived integrity - a system is perceived to have integrity when a user thinks, &#39;Yes! That is exactly what I want.<br>Somebody got inside my mind!&#39;</p>\n</li>\n<li><p>Conceptual integrity - a system has conceptual integrity when it&#39;s stable, expandable, fast, releasable, meets legal<br>constraints and all those <code>*ility</code> testing types you may have encountered in books</p>\n</li>\n</ul>\n<p>It&#39;s tester job to think about that and ask developers unwelcome questions during standup meetings. :)</p>\n<p><strong>See the whole</strong></p>\n<p>Last but not least. As I said before, we should always try to optimize the whole project, not just testing. This means<br>that tester should do some quality control (QC) work too. If the process is inefficient, if we build a bad product it&#39;s<br>our job to report it and give it to consider. We should measure quality be project revenue, not by the number of bugs.</p>\n"
}