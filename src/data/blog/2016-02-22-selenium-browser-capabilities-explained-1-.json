{
  "id": "2016-02-22-selenium-browser-capabilities-explained-1-",
  "title": "Selenium - Browser Capabilities explained 1",
  "date": "2016-02-22",
  "categories": [
    "Selenium"
  ],
  "tags": [
    "browser capabilities",
    "selenium",
    "firefox",
    "test automation",
    "UI testing",
    "chrome"
  ],
  "permalink": "/2016/02/selenium-browser-capabilities-explained",
  "content": "<p><img src=\"/images/blog/is-this-selenium-ide.png\" alt=\"\" style=\"width: 100%;\"></p>\n<p>In my first post about<br>Selenium (<a href=\"http://awesome-testing.blogspot.com/2016/01/introducing-fluentlenium-1.html\" target=\"_blank\" rel=\"noreferrer\">FluentLenium</a> series will focus<br>on extension features only), I decided to tackle Chrome &amp; Firefox capabilities which allow us to preconfigure browser<br>settings before tests. This seemed quite easy at the beginning, but I quickly realized that a huge amount of information<br>available via Google is outdated. Hopefully, this post will make things straight.</p>\n<p><strong>Prerequisite</strong> - you need to understand which method initializes WebDriver in your project in order to override it.</p>\n<h2>Chrome</h2>\n<p>Only this <a href=\"https://sites.google.com/a/chromium.org/chromedriver/capabilities\" target=\"_blank\" rel=\"noreferrer\">piece of the documentation</a>tells us how to<br>properly configure the browser before running tests. It&#39;s done<br>via <a href=\"https://github.com/SeleniumHQ/selenium/blob/master/java/client/src/org/openqa/selenium/chrome/ChromeOptions.java\" target=\"_blank\" rel=\"noreferrer\">Chrome Options</a>.<br>Due to legacy reasons, desiredCapabilities still has to be initialized, which makes the code somehow weird. Here it is (<br>with my formatting):</p>\n<pre><code class=\"language-java\">private static final String PREFS = &quot;prefs&quot;;\n\n    @Override\n    public WebDriver getDefaultDriver() {\n        return new ChromeDriver(getChromeCapabilities());\n    }\n\n    private DesiredCapabilities getChromeCapabilities() {\n        DesiredCapabilities capabilities = DesiredCapabilities.chrome();\n        capabilities.setCapability(ChromeOptions.CAPABILITY, getChromeOptions());\n        return capabilities;\n    }\n\n    private ChromeOptions getChromeOptions() {\n        ChromeOptions options = new ChromeOptions();\n        options.addArguments(getChromeSwitches());\n        options.setExperimentalOption(PREFS, getChromePrefs());\n        return options;\n    }\n</code></pre>\n<p>As you can see above two methods preconfigure our Chrome (description<br>via <a href=\"https://github.com/SeleniumHQ/selenium/blob/master/java/client/src/org/openqa/selenium/chrome/ChromeOptions.java\" target=\"_blank\" rel=\"noreferrer\">Javadoc</a>):</p>\n<ul>\n<li><p><em>addArguments()</em> which adds additional command-line arguments to be used when starting Chrome</p>\n</li>\n<li><p><em>addExperimentalSettings()</em> which sets an experimental option. Useful for new ChromeDriver options not yet exposed<br>through the ChromeOptions API</p>\n</li>\n</ul>\n<p>We may also add extensions via <em>add extensions()</em> method</p>\n<p>This is when the easy part ends and Googling begins. For unknown reasons lists of available arguments (called very often<br>switches) and experimental settings aren&#39;t linked on the<br>official <a href=\"https://sites.google.com/a/chromium.org/chromedriver/getting-started\" target=\"_blank\" rel=\"noreferrer\">chromedriver site</a>. With some<br>determination I was able to obtain them:</p>\n<ul>\n<li><p>Arguments (switches) - <a href=\"http://peter.sh/experiments/chromium-command-line-switches/\" target=\"_blank\" rel=\"noreferrer\">peter.sh</a></p>\n</li>\n<li><p>Experimental<br>options - <a href=\"https://src.chromium.org/viewvc/chrome/trunk/src/chrome/common/pref_names.cc?view=markup\" target=\"_blank\" rel=\"noreferrer\">src.chromium.org</a></p>\n</li>\n</ul>\n<p>My implementation with example values - feel free to do some code review :)</p>\n<pre><code class=\"language-java\">public interface ChromeSwitchesInt {\n    String START_FULLSCREEN = &quot;start-fullscreen&quot;;\n    String ALLOW_INSECURE_CONTENT = &quot;allow-running-insecure-content&quot;;\n    String INCOGNITO = &quot;incognito&quot;;\n    String IGNORE_CERTIFICATE_ERRORS = &quot;--ignore-certificate-errors&quot;;\n}\n</code></pre>\n<pre><code class=\"language-java\">private static final String BROWSER_NOTIFICATIONS = &quot;profile.managed_default_content_settings.notifications&quot;;\n    private static final short DISABLED = 2;\n\n    /**\n     * Full list of available prefs - https://src.chromium.org/viewvc/chrome/trunk/src/chrome/common/pref_names.cc?view=markup\n     *\n     * @return prefs\n     */\n    private Map&lt;String, Object&gt; getChromePrefs() {\n        Map&lt;String, Object&gt; chromePrefs = new HashMap&lt;&gt;();\n        chromePrefs.put(BROWSER_NOTIFICATIONS, DISABLED);\n        return chromePrefs;\n    }\n\n    /**\n     * Full list of available switches - http://peter.sh/experiments/chromium-command-line-switches/\n     *\n     * @return switches List\n     */\n    private List&lt;String&gt; getChromeSwitches() {\n        List&lt;String&gt; chromeSwitches = new ArrayList&lt;&gt;();\n        chromeSwitches.add(ChromeSwitchesInt.INCOGNITO);\n        chromeSwitches.add(ChromeSwitchesInt.ALLOW_INSECURE_CONTENT);\n        chromeSwitches.add(ChromeSwitchesInt.IGNORE_CERTIFICATE_ERRORS);\n        chromeSwitches.add(ChromeSwitchesInt.START_FULLSCREEN);\n        return chromeSwitches;\n    }\n</code></pre>\n<h2>Demo</h2>\n<p>Comment this line &amp; Try running<br>my <a href=\"http://awesome-testing.blogspot.com/2016/01/introducing-fluentlenium-1.html\" target=\"_blank\" rel=\"noreferrer\">FluentLenium</a> test (or just log in on<br>Facebook via Selenium).</p>\n<pre><code class=\"language-java\">chromePrefs.put(BROWSER_NOTIFICATIONS, DISABLED);\n</code></pre>\n<p>You should see this popup/notification and test failure. An experimental option from above solves this problem.</p>\n<p><img src=\"/images/blog/Screenshot%2B2016-02-21%2B23.06.23.png\" alt=\"\" style=\"width: 100%;\"></p>\n<h2>Part II - Firefox</h2>\n<p>Update 16.09.2017</p>\n<p>Handling FirefoxDriver changed in 2017. For non-deprecated code take a look at my new post:</p>\n<p><a href=\"https://www.awesome-testing.com/2017/09/firefox-selenium-browser-capabilities.html\" target=\"_blank\" rel=\"noreferrer\">Firefox Selenium Browser Capabilities explained</a></p>\n"
}