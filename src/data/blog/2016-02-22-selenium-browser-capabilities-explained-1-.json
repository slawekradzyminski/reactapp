{
  "id": "2016-02-22-selenium-browser-capabilities-explained-1-",
  "title": "Selenium - Browser Capabilities explained 1",
  "date": "2016-02-22",
  "categories": [
    "Selenium"
  ],
  "tags": [
    "browser capabilities",
    "selenium",
    "firefox",
    "test automation",
    "UI testing",
    "chrome"
  ],
  "permalink": "/2016/02/selenium-browser-capabilities-explained",
  "content": "<img src=\"/images/blog/is-this-selenium-ide.png\" alt=\"\">\n\n<p>In my first post about Selenium (<a href=\"http://awesome-testing.blogspot.com/2016/01/introducing-fluentlenium-1.html\" target=\"_blank\" rel=\"noreferrer\">FluentLenium</a> series will focus on extension features only), I decided to tackle Chrome &amp; Firefox capabilities which allow us to preconfigure browser settings before tests. This seemed quite easy at the beginning, but I quickly realized that a huge amount of information available via Google is outdated. Hopefully, this post will make things straight.</p><p><strong>Prerequisite</strong> - you need to understand which method initializes WebDriver in your project in order to override it.</p><h2>Chrome</h2>\n<p>Only this <a href=\"https://sites.google.com/a/chromium.org/chromedriver/capabilities\" target=\"_blank\" rel=\"noreferrer\">piece of the documentation</a>tells us how to properly configure the browser before running tests. It&#39;s done via <a href=\"https://github.com/SeleniumHQ/selenium/blob/master/java/client/src/org/openqa/selenium/chrome/ChromeOptions.java\" target=\"_blank\" rel=\"noreferrer\">Chrome Options</a>.<br>Due to legacy reasons, desiredCapabilities still has to be initialized, which makes the code somehow weird. Here it is (<br>with my formatting):</p><pre><code class=\"hljs language-java\">\n<span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">PREFS</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;prefs&quot;</span>;\n\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-keyword\">public</span> WebDriver <span class=\"hljs-title function_\">getDefaultDriver</span><span class=\"hljs-params\">()</span> {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ChromeDriver</span>(getChromeCapabilities());\n    }\n\n    <span class=\"hljs-keyword\">private</span> DesiredCapabilities <span class=\"hljs-title function_\">getChromeCapabilities</span><span class=\"hljs-params\">()</span> {\n        <span class=\"hljs-type\">DesiredCapabilities</span> <span class=\"hljs-variable\">capabilities</span> <span class=\"hljs-operator\">=</span> DesiredCapabilities.chrome();\n        capabilities.setCapability(ChromeOptions.CAPABILITY, getChromeOptions());\n        <span class=\"hljs-keyword\">return</span> capabilities;\n    }\n\n    <span class=\"hljs-keyword\">private</span> ChromeOptions <span class=\"hljs-title function_\">getChromeOptions</span><span class=\"hljs-params\">()</span> {\n        <span class=\"hljs-type\">ChromeOptions</span> <span class=\"hljs-variable\">options</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ChromeOptions</span>();\n        options.addArguments(getChromeSwitches());\n        options.setExperimentalOption(PREFS, getChromePrefs());\n        <span class=\"hljs-keyword\">return</span> options;\n    }\n</code></pre><p>As you can see above two methods preconfigure our Chrome (description via <a href=\"https://github.com/SeleniumHQ/selenium/blob/master/java/client/src/org/openqa/selenium/chrome/ChromeOptions.java\" target=\"_blank\" rel=\"noreferrer\">Javadoc</a>):</p><ul>\n<li><p><em>addArguments()</em> which adds additional command-line arguments to be used when starting Chrome</p></li>\n<li><p><em>addExperimentalSettings()</em> which sets an experimental option. Useful for new ChromeDriver options not yet exposed through the ChromeOptions API</p></li>\n</ul>\n<p>We may also add extensions via <em>add extensions()</em> method</p><p>This is when the easy part ends and Googling begins. For unknown reasons lists of available arguments (called very often switches) and experimental settings aren&#39;t linked on the official <a href=\"https://sites.google.com/a/chromium.org/chromedriver/getting-started\" target=\"_blank\" rel=\"noreferrer\">chromedriver site</a>. With some determination I was able to obtain them:</p><ul>\n<li><p>Arguments (switches) - <a href=\"http://peter.sh/experiments/chromium-command-line-switches/\" target=\"_blank\" rel=\"noreferrer\">peter.sh</a></p></li>\n<li><p>Experimental options - <a href=\"https://src.chromium.org/viewvc/chrome/trunk/src/chrome/common/pref_names.cc?view=markup\" target=\"_blank\" rel=\"noreferrer\">src.chromium.org</a></p></li>\n</ul>\n<p>My implementation with example values - feel free to do some code review :)</p><pre><code class=\"hljs language-java\">\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">ChromeSwitchesInt</span> {\n    <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">START_FULLSCREEN</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;start-fullscreen&quot;</span>;\n    <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">ALLOW_INSECURE_CONTENT</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;allow-running-insecure-content&quot;</span>;\n    <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">INCOGNITO</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;incognito&quot;</span>;\n    <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">IGNORE_CERTIFICATE_ERRORS</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;--ignore-certificate-errors&quot;</span>;\n}\n</code></pre><pre><code class=\"hljs language-java\">\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">BROWSER_NOTIFICATIONS</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;profile.managed_default_content_settings.notifications&quot;</span>;\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">short</span> <span class=\"hljs-variable\">DISABLED</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">2</span>;\n\n    <span class=\"hljs-comment\">/**\n     * Full list of available prefs - https://src.chromium.org/viewvc/chrome/trunk/src/chrome/common/pref_names.cc?view=markup\n     *\n     * <span class=\"hljs-doctag\">@return</span> prefs\n     */</span>\n    <span class=\"hljs-keyword\">private</span> Map&lt;String, Object&gt; <span class=\"hljs-title function_\">getChromePrefs</span><span class=\"hljs-params\">()</span> {\n        Map&lt;String, Object&gt; chromePrefs = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HashMap</span>&lt;&gt;();\n        chromePrefs.put(BROWSER_NOTIFICATIONS, DISABLED);\n        <span class=\"hljs-keyword\">return</span> chromePrefs;\n    }\n\n    <span class=\"hljs-comment\">/**\n     * Full list of available switches - http://peter.sh/experiments/chromium-command-line-switches/\n     *\n     * <span class=\"hljs-doctag\">@return</span> switches List\n     */</span>\n    <span class=\"hljs-keyword\">private</span> List&lt;String&gt; <span class=\"hljs-title function_\">getChromeSwitches</span><span class=\"hljs-params\">()</span> {\n        List&lt;String&gt; chromeSwitches = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();\n        chromeSwitches.add(ChromeSwitchesInt.INCOGNITO);\n        chromeSwitches.add(ChromeSwitchesInt.ALLOW_INSECURE_CONTENT);\n        chromeSwitches.add(ChromeSwitchesInt.IGNORE_CERTIFICATE_ERRORS);\n        chromeSwitches.add(ChromeSwitchesInt.START_FULLSCREEN);\n        <span class=\"hljs-keyword\">return</span> chromeSwitches;\n    }\n</code></pre><h2>Demo</h2>\n<p>Comment this line &amp; Try running my <a href=\"http://awesome-testing.blogspot.com/2016/01/introducing-fluentlenium-1.html\" target=\"_blank\" rel=\"noreferrer\">FluentLenium</a> test (or just log in on Facebook via Selenium).</p><pre><code class=\"hljs language-java\">\nchromePrefs.put(BROWSER_NOTIFICATIONS, DISABLED);\n</code></pre><p>You should see this popup/notification and test failure. An experimental option from above solves this problem.</p><img src=\"/images/blog/Screenshot%2B2016-02-21%2B23.06.23.png\" alt=\"\">\n\n<h2>Part II - Firefox</h2>\n<p>Update 16.09.2017</p><p>Handling FirefoxDriver changed in 2017. For non-deprecated code take a look at my new post:</p><p><a href=\"https://www.awesome-testing.com/2017/09/firefox-selenium-browser-capabilities.html\" target=\"_blank\" rel=\"noreferrer\">Firefox Selenium Browser Capabilities explained</a></p>"
}