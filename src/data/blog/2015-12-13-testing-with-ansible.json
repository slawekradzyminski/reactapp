{
  "id": "2015-12-13-testing-with-ansible",
  "title": "Testing with Ansible",
  "date": "2015-12-13",
  "categories": [
    "TestOps"
  ],
  "tags": [
    "testing",
    "orchestration",
    "testops",
    "test automation",
    "testing tools",
    "automation",
    "ansible"
  ],
  "permalink": "/2015/12/testing-with-ansible",
  "content": "<p><img src=\"/images/blog/CONTINUOUS-DELIVERY-2.png\" alt=\"\" style=\"width: 100%;\"></p>\n<p>IEEE Spectrum has recently posted an article<br>about <a href=\"http://spectrum.ieee.org/view-from-the-valley/computing/software/yahoos-engineers-move-to-coding-without-a-net\" target=\"_blank\" rel=\"noreferrer\">Yahoo resigning from the QA team</a>.<br>After that maneuver quality of the final product not only didn&#39;t degrade but actually improved. Of course, if we delve<br>deeper into the article we will realize that the products got better after continuous delivery introduction (image<br>credit to<a href=\"http://www.cloudofit.com/\" target=\"_blank\" rel=\"noreferrer\">www.cloudofit.com</a>) and the QA team wasn&#39;t entirely to blame. However, that&#39;s a<br>clear signal to old school testers that programming/scripting skills are now necessary.</p>\n<p>One of my favorite tools that support Continuous Delivery (or Deployment if we assume what deploy to production is<br>automatic) is <a href=\"http://www.ansible.com/how-ansible-works\" target=\"_blank\" rel=\"noreferrer\">Ansible</a>. This simple automation agent allows us to execute<br>commands on external hosts via plays, which can later be organized to playbooks (list of plays). This is how example<br>playbook looks like:</p>\n<pre><code class=\"language-yaml\">- hosts: droplets\n  tasks:\n    - name: Installs nginx web server\n      apt: name=nginx force=yes update_cache=true\n\n    - name: start nginx\n      service: name=nginx state=started\n</code></pre>\n<p>What is this playbook doing?</p>\n<p>a) it checks hosts file for <code>[droplets]</code> string and connects to IP addresses below. Hosts file example:</p>\n<pre><code class=\"language-yaml\">[droplets]\n192.168.0.2\n192.168.0.3\n[webservers]\n192.168.3.222\n</code></pre>\n<p>b) apt-get update is called (<code>update_cache=true</code>)  </p>\n<p>c) <code>apt-get install nginx</code> is called with automatic confirmation (<code>name=nginx force=yes</code>)  </p>\n<p>d) nginx service is started  </p>\n<p>With very few lines we were able to install the necessary applications on two hosts. Imagine how much time you&#39;ll save if the number of machines would be bigger. Probably you have already realized how powerful Ansible can it be to testing, but let me give you a few more examples:  </p>\n<ul>\n<li>Environment setup (see example above)  </li>\n<li>Updating app configuration on all testing servers</li>\n</ul>\n<pre><code class=\"language-yaml\">- hosts: test_machines\n  tasks:\n    - name: Update config\n      template: src=config.xml.j2 dest={{ app_folder }}/config.xml\n</code></pre>\n<ul>\n<li>Jenkins / Selenium Grid / Selenium nodes auto-configuration</li>\n<li>Smoke tests after prod deployment</li>\n</ul>\n<pre><code class=\"language-yaml\">- hosts: PROD_machines\n  tasks:\n    - name: Check service\n      service: name=vsftpd state=started\n</code></pre>\n<ul>\n<li>Running commands and checking the output</li>\n</ul>\n<pre><code class=\"language-yaml\">- hosts: test_machines\n  tasks:\n    - name: Run X\n      shell: usr/bin/somefancycommand\n      register: cmd_result\n\n    - name: assert results\n      that: &quot;not ready not in cmd_result.stderr&quot;\n</code></pre>\n<p>Free knowledge:  </p>\n<ul>\n<li><a href=\"http://tomoconnor.eu/blogish/getting-started-ansible\" target=\"_blank\" rel=\"noreferrer\">http://tomoconnor.eu/blogish/getting-started-ansible</a></li>\n<li><a href=\"https://serversforhackers.com/an-ansible-tutorial\" target=\"_blank\" rel=\"noreferrer\">https://serversforhackers.com/an-ansible-tutorial</a></li>\n<li><a href=\"http://ryaneschinger.com/blog/ansible-quick-start/\" target=\"_blank\" rel=\"noreferrer\">http://ryaneschinger.com/blog/ansible-quick-start/</a></li>\n<li><a href=\"http://docs.ansible.com/ansible/intro_getting_started.html\" target=\"_blank\" rel=\"noreferrer\">http://docs.ansible.com/ansible/intro_getting_started.html</a></li>\n</ul>\n"
}