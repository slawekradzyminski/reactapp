{
  "id": "2017-03-13-learning-software-testing-checklist-2017-edition",
  "title": "Learning Software Testing Checklist - 2017 edition",
  "date": "2017-03-13",
  "categories": [
    "Testing thoughts"
  ],
  "tags": [
    "learning",
    "testing thoughts"
  ],
  "permalink": "/2017/03/learning-software-testing-checklist",
  "content": "<p><img src=\"/images/blog/Unknown.png\" alt=\"\" style=\"width: 100%;\"></p>\n<p>Time flies quickly, and it&#39;s been more than a year since one of my most popular<br>posts - <a href=\"http://www.awesome-testing.com/2016/02/dos-and-donts-for-testers-2016-edition.html\" target=\"_blank\" rel=\"noreferrer\">do and don&#39;t for testers</a>.<br>I decided to skip <em>dont&#39;s</em> this year, because I you follow my advices closely you won&#39;t have time for them anyway. If<br>it&#39;s possible try to <a href=\"http://www.awesome-testing.com/2016/03/learning-pathways-for-testers.html\" target=\"_blank\" rel=\"noreferrer\">learn mostly at work</a>,<br>solving real issues. Fill your knowledge gap by reading ferociously after work. Do not hesitate<br>to <a href=\"http://www.awesome-testing.com/2017/02/mentorship-how-to-skyrocket-your.html\" target=\"_blank\" rel=\"noreferrer\">seek mentors</a> in each of those fields.</p>\n<p>Remember that it&#39;s the combination of all those skills that make you great tester. Choose one of them as a<br>long <a href=\"http://www.ptc.com/product-lifecycle-report/why-engineers-need-to-develop-t-shaped-skills\" target=\"_blank\" rel=\"noreferrer\">T-shaped skills</a> tail<br>and become decent at the rest.</p>\n<p>Part of the credit for this article belongs to Jasper Ottosen. His quality<br>post -<a href=\"https://jlottosen.wordpress.com/2017/03/08/shift/\" target=\"_blank\" rel=\"noreferrer\">Testing roles are shifting</a>helped me confirm that I&#39;m not the<br>only one who thinks that you should focus on:</p>\n<h2>Programming skills</h2>\n<p>Despite of how often you hear that &#39;soft skills are the most important&#39; mantra one thing hasn&#39;t changed that much<br>recently:</p>\n<blockquote class=\"blog-quote\"><p>Almost every job related to Software Engineering requires strong programming skills. Software Testing is no exception.</p><p>You should be proficient at automating your checks/tests.  </p></p></blockquote><p>Most likely you are surrounded by great developers, and you work with them on daily basis. This is perfect opportunity<br>for learning begging to take advantage of. Pair with them as often as possible and use their broad knowledge.</p>\n<p><em>Sidenote:</em> Do not steal programmers time asking silly questions. You may quickly discourage them. Google knows stuff.</p>\n<h2>TestOps</h2>\n<p><a href=\"http://www.awesome-testing.com/search/label/testops\" target=\"_blank\" rel=\"noreferrer\">TestOps</a> is a loose term which keeps gaining popularity recently (I<br>like to believe that I helped resurrect it). To be excellent at TestOps (apart from reading<br>my <a href=\"http://www.awesome-testing.com/search/label/testops\" target=\"_blank\" rel=\"noreferrer\">posts</a>) work on:</p>\n<p><em>a) CI/CD proficiency</em> - a must for modern tester. Wherever there is possibility to work in this area volunteer and get<br>it done right. Automated regression tests should be run after each commit if possible.</p>\n<p><em>b) networking</em> - often overlooked skill required to quickly configure web applications and their environment</p>\n<p>c) <em>virtualisation/conternarisation</em>- make sure you understand how virtual machines and containers work</p>\n<p>d) <em>cloud computing</em> - AWS, Google Clound, OpenStack. It&#39;s used everywhere.</p>\n<p>e) <em><a href=\"https://martinfowler.com/bliki/InfrastructureAsCode.html\" target=\"_blank\" rel=\"noreferrer\">Infrastructure as a Code</a></em> - Servers you manage should<br>come back as quickly as Phoenix (I<br>recommend <a href=\"http://www.awesome-testing.com/2015/12/testing-with-ansible.html\" target=\"_blank\" rel=\"noreferrer\">Ansible</a>). Check linked Martin Fowler<br>article - it&#39;s excellent.</p>\n<h2>Security - Pentesting</h2>\n<p>My avid readers know that I want<br>to <a href=\"http://www.awesome-testing.com/2016/12/2016-summary-planning-and-more.html\" target=\"_blank\" rel=\"noreferrer\">get into security this year</a>. It&#39;s<br>becoming more and more interesting as I delve deeper into it. Looks like<br>in<a href=\"http://www.awesome-testing.com/2016/02/dos-and-donts-for-testers-2016-edition.html\" target=\"_blank\" rel=\"noreferrer\">my 2016 post</a>emphasis on this<br>topic was too weak.</p>\n<p>I recently finished security training run by leading polish company - <a href=\"http://niebezpiecznik.pl/\" target=\"_blank\" rel=\"noreferrer\">niebezpiecznik.pl</a>.<br>Lecturer was ex tester and I fully agree with one of his statement:</p>\n<blockquote class=\"blog-quote\"><p>Testers are excellent at finding security vulnerabilities, because the break-it mindset is already there.  </p></p></blockquote><p>Think about it. Developers often are blind to their errors so who, if not tester, is better qualified to find security<br>flaws in your application?</p>\n<p>With enough TestOps knowledge testers should also lead Continuous Security, perhaps starting<br>with <a href=\"http://www.awesome-testing.com/2017/02/continuous-security-with-owasp.html\" target=\"_blank\" rel=\"noreferrer\">OWASP Dependency Check</a>.</p>\n<h2>Coaching &amp; Persuasion</h2>\n<p>Another hugely important topic that I overlooked entirely in 2016. Testers understanding how testing pyramid works and<br>with enough experience are in very peculiar situation. They want to improve application quality, but they also know it<br>requires whole team effort. Developers play crucial role here - without sufficient unit tests coverage application just<br>won&#39;t be successful. It may of course luckily work on first iteration, but with each new feature it&#39;s going to be worse.</p>\n<p>So who should explain consequences of poor unit tests coverage? You guessed it right, software testers. What if there&#39;s<br>pressure to release low quality quality software? Who should explain consequences of possible production bugs? You<br>guessed it right again, software testers. There is no escape from this and the higher you go with your career, the more<br>important coaching &amp; persuasion become.</p>\n<p>Those skills are also important<br>in <a href=\"http://www.awesome-testing.com/2017/02/mentorship-how-to-skyrocket-your.html\" target=\"_blank\" rel=\"noreferrer\">mentoring</a>.</p>\n<h2>Conclusions</h2>\n<p><a href=\"http://www.awesome-testing.com/2017/01/testops-4-continuous-improvement.html\" target=\"_blank\" rel=\"noreferrer\">Continuous Improvement</a> is the key.</p>\n<h2>Further reading</h2>\n<p>Blog:</p>\n<ul>\n<li><a href=\"http://www.awesome-testing.com/2016/02/dos-and-donts-for-testers-2016-edition.html\" target=\"_blank\" rel=\"noreferrer\">Do&#39;s and dont&#39;s for testers - 2016 edition</a>  </li>\n<li><a href=\"https://jlottosen.wordpress.com/2017/03/08/shift/\" target=\"_blank\" rel=\"noreferrer\">Testing roles are shifting</a> - Jesper Ottosen</li>\n</ul>\n"
}