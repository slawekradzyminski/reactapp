{
  "id": "2019-06-20-throttling-network-in-selenium-tests-using-browsermob-proxy",
  "title": "Throttling network in Selenium tests using BrowserMob Proxy",
  "date": "2019-06-20",
  "categories": [
    "Selenium"
  ],
  "tags": [
    "selenium"
  ],
  "permalink": "/2019/06/throttling-network-in-selenium-tests",
  "content": "<p><img src=\"/images/blog/photo-1520869562399-e772f042f422.jpeg\" alt=\"\" style=\"width: 100%;\"></p>\n<p>It&#39;s a good testing practice to avoid as many external dependencies as possible. We want to run everything on localhost<br>and avoid test failures caused by things outside our application scope (environment issues, network problems,<br>unavailable web services).</p>\n<p>Unfortunately, our clients don&#39;t access applications in a sterile environment. Many of them use rather slow GPRS/3G<br>Internet connection with significant latency caused by cellular interface. Hence we need to check how our systems cope<br>with slow Internet connection.</p>\n<p>When it comes to manual verification the choice is<br>straightforward. <a href=\"https://developers.google.com/web/tools/chrome-devtools/device-mode/?utm_source=dcc&utm_medium=redirect&utm_campaign=2016q3\" target=\"_blank\" rel=\"noreferrer\">Chrome Dev Tools</a><br>have powerful network throttling functionalities. Sometimes though, we want to create an automated functional test which<br>checks that everything works fine with limited bandwidth. How to do it?</p>\n<p>The easiest solution is<br>to <a href=\"https://www.awesome-testing.com/2018/01/how-to-use-automated-functional-tests.html\" target=\"_blank\" rel=\"noreferrer\">set up a proxy</a> through which we<br>would pass network traffic. BrowserMob Proxy is a great tool that integrates nicely with Selenium and has very easy to<br>use Java API. BrowserMob Proxy allows you to manipulate HTTP requests and responses, capture HTTP content, and export<br>performance data as a HAR file. I&#39;ve described the performance measuring feature in<br>a <a href=\"https://www.awesome-testing.com/2016/10/browsermob-proxy-selenium-network.html\" target=\"_blank\" rel=\"noreferrer\">separate post</a>.</p>\n<h2>Understanding network bandwidth and latency</h2>\n<p>Before I&#39;ll show you how to throttle network in traditional demo let&#39;s clarify what exactly network latency and<br>bandwidth.</p>\n<p>Latency is the amount of time it takes for data to travel from source to destination. It is dependent on the distance<br>that data must travel through cords, networks, radio interfaces and the like to reach its destination. If you are an<br>online gamer you probably check your ping. That&#39;s also your network latency.</p>\n<p>Bandwidth is the rate of data transfer for a fixed period of time. The wider the communication band, the more data that<br>can flow through it simultaneously. If you buy an Internet connection you most likely pay for maximum bandwidth (like<br>200 Mb/s).</p>\n<h2>Demo</h2>\n<p>As usual, I have prepared a demo on my <a href=\"https://github.com/slawekradzyminski/AwesomeTesting\" target=\"_blank\" rel=\"noreferrer\">GitHub project</a>. I&#39;m going<br>to use <a href=\"https://fluentlenium.com/\" target=\"_blank\" rel=\"noreferrer\">FluentLenium</a> Selenium extension.</p>\n<p>At first, we would like to start a BrowserMob Proxy and change default configuration:</p>\n<p>a) By settings 300ms network latency</p>\n<p>b) By settings 1Mb/s (1 000 000 bytes/s) download and upload limit</p>\n<p>c) By changing HTTP request user agent header to custom value (this simplifies debugging)</p>\n<pre><code class=\"language-java\">private static final int BROWSER_MOB_PROXY_PORT = 9191;\n    private static final String USER_AGENT = &quot;User-Agent&quot;;\n\n    protected BrowserMobProxyServer server = new BrowserMobProxyServer();\n\n    @Before\n    public void startBMP() {\n        server.start(BROWSER_MOB_PROXY_PORT);\n        server.setReadBandwidthLimit(1000000);\n        server.setWriteBandwidthLimit(1000000);\n        server.setLatency(300, TimeUnit.MILLISECONDS);\n\n        server.removeHeader(USER_AGENT);\n        server.addHeader(USER_AGENT, &quot;Throttled Chrome Selenium Test&quot;);\n    }\n</code></pre>\n<p>Next, we need to create a Proxy object that will be used in tests. BrowserMob Proxy gives as a very useful static method<br>createSeleniumProxy() which simplifies setup. Next lines setup proxy IPv4 localhost urls.</p>\n<pre><code class=\"language-java\">private Proxy getProxy() {\n        Proxy seleniumProxy = ClientUtil.createSeleniumProxy(server);\n        String hostIp = null;\n        try {\n            hostIp = Inet4Address.getLocalHost().getHostAddress();\n        } catch (UnknownHostException e) {\n            e.printStackTrace();\n        }\n        String proxyUrl = String.format(&quot;%s:%s&quot;, hostIp, BROWSER_MOB_PROXY_PORT);\n        seleniumProxy.setHttpProxy(proxyUrl);\n        seleniumProxy.setSslProxy(proxyUrl);\n\n        return seleniumProxy;\n    }\nview raw\n</code></pre>\n<p>Now we just need to modify Selenium Capabilities. Chrome example below.</p>\n<pre><code class=\"language-java\">public WebDriver newWebDriver() {\n        return new ChromeDriver(getChromeOptions());\n    }\n\n    private ChromeOptions getChromeOptions() {\n        ChromeOptions options = new ChromeOptions();\n        options.setProxy(getProxy());\n        return options;\n    }\n</code></pre>\n<p>And here is final test that checks my blog with 1Mb/s network bandwidth.</p>\n<pre><code class=\"language-java\">public class SlowNetworkTest extends ThrottledChrome {\n\n    @Page\n    private AwesomeTestingPage awesomeTestingPage;\n\n    @Test\n    public void shouldLoadBlogOnSlowNetwork() {\n        goTo(awesomeTestingPage).isAt();\n    }\n\n}\n</code></pre>\n<p>Happy proxying :)</p>\n"
}