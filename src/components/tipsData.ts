export const tipsData = [
    { id: 1, title: "Antifragile", content: "<p>In our world, there are many things that can be considered fragile. Imagine, for example, a glass or a balloon. These\nobjects are destroyed by low-probability events. To visualize this, imagine a normal distribution. A glass functions\nnormally when we use it in a standard way (which means we are at the center of the &quot;bell&quot;), but there are quite a few\nevents in the tail (fat tails) that cause the glass to break.</p>\n<p>When thinking about the opposite of fragility, durability comes to mind first. To destroy a durable thing (e.g., a\nwall), we have to make a significant effort. The bell curve of normal distribution for durable things is very large, and\nthe entire tail is characterized by a very low probability.</p>\n<p>Antifragility, in the definition of Nassim Nicholas Taleb, goes a step further. Antifragility is a feature of things\nthat makes them stronger under the influence of low-probability events. An antifragile glass, for example, would gain\nvalue from an accidental fall (e.g., by filling up with beer).\nIn practice, achieving antifragility is usually very difficult, but the attempt itself brings many benefits. I would\nlike to encourage you to think about how to become an antifragile engineer.</p>\n<p>The number one rule of the famous investor, Warren Buffett, is: &quot;Never lose money.&quot; This can be easily translated to our\nsituation: &quot;Try to ensure your professional situation never worsens.&quot; In practice, this means taking great care of\nso-called &quot;employability,&quot; i.e., continuously improving your skills that are in demand in the job market. As Seniors+,\nwe have a significant influence on technology choices in the company. For experiments (e.g., with the Rust language), I\nrecommend using insignificant tools/projects. If you need to write a mock, it&#39;s best to base it on a proven stack (e.g.,\nSpring Boot in Java). When choosing testing tools, it&#39;s best to use something proven in the industry, like Playwright,\nCypress, Selenium, k6, Locust, Gatling, Rest Assured, Requests, etc. I want to point out that the choice I recommend\nbrings benefits not only to you but also to the company. It&#39;s easy to recruit specialists for solutions written in the\nstandard stack.</p>\n<p>As a Senior+, you will often be judged not by what you do, but by what others do based on your advice. In the case of\nthe so-called &quot;Individual Contributor&quot; (IC) path, there&#39;s no escaping a certain dose of leadership. Knowing this, it&#39;s\nbest to position yourself in a hybrid, leadership/technical role. In my case, I combine the duties of a Team Leader of a\nsmall team of testers with technical work.</p>\n<p>A high degree of antifragility is also guaranteed by all kinds of activities outside the organization. Conferences,\ntraining, Friday tips for Seniors, YouTube. Creating content has never been easier. I encourage you to think of yourself\nas a content producer, not just a consumer. If you&#39;re looking for training for yourself, first ask yourself: shouldn&#39;t I\nbe the one leading it?</p>\n<p>Books:</p>\n<ul>\n<li><a href=\"https://amzn.to/4d9rD3E\" target=\"_blank\" rel=\"noreferrer\">Antifragile</a></li>\n<li><a href=\"https://amzn.to/3xFx2yS\" target=\"_blank\" rel=\"noreferrer\">The Black Swan</a></li>\n<li><a href=\"https://amzn.to/4b5kmje\" target=\"_blank\" rel=\"noreferrer\">Fooled by Randomness</a></li>\n<li><a href=\"https://amzn.to/4d0rL5r\" target=\"_blank\" rel=\"noreferrer\">Skin in the Game</a></li>\n<li><a href=\"https://amzn.to/3W1TsEO\" target=\"_blank\" rel=\"noreferrer\">Full Incerto - all Taleb books in one</a></li>\n<li><a href=\"https://amzn.to/3Q8C0e3\" target=\"_blank\" rel=\"noreferrer\">The Software Engineer&#39;s Guidebook</a></li>\n</ul>\n" },
    { id: 2, title: "Deep Technical Understanding", content: "<p>In our testing bubble, much is said about a deep business understanding of the tested application/functionality. We have\ncoined many terms, more or less useful, which we can ask about in an interview (Three Amigos in Agile, BDD). Here, I&#39;m\ndeliberately omitting the effectiveness of these practices. Every Senior+ should organize this in a way that works for\nthem. It&#39;s unquestionable that building such understanding has been, is, and will be important. Incidentally, this is\nstill an area where people have a huge advantage over generative AI.</p>\n<p>For some reason, another aspect that I consider equally important hasn&#39;t yet penetrated our bubble - a deep TECHNICAL\nunderstanding of the tested application. What communicates with what? Where are the boundaries of our system? Where do\nwe integrate with other systems maintained by teams in our company? Where do we have integration with systems maintained\nby other companies (3rd-party dependency)? How to test integration within our system, between systems in the company,\nand between our system and external service providers? What protocol is used for communication? What are WebSockets? How\ndo frontend and backend know we are logged in? How to circumvent this? Can we move tests to a lower level?</p>\n<p>Building a deep technical understanding is very important in the era of microservices and ubiquitous asynchronous\ncommunication. How to test an event-based architecture? Why do architects decide to introduce queues/topics instead of\nrelying on a synchronous HTTP interface? How does this affect our functional and non-functional tests?</p>\n<p>Building a deep technical understanding is an excellent way to maximize the benefits we can derive from our work. By\norganizing this in our heads, we not only become better testers of the current system but also build transferable\nknowledge that becomes our personal capital. We build an advantage over the competition in the job market.</p>\n<p>Books that are great for connecting the dots:</p>\n<ul>\n<li><a href=\"https://amzn.to/4d3hgOD\" target=\"_blank\" rel=\"noreferrer\">Understanding Distributed Systems</a></li>\n<li><a href=\"https://amzn.to/3UBWwqd\" target=\"_blank\" rel=\"noreferrer\">Fundamentals of Software Architecture</a></li>\n<li><a href=\"https://amzn.to/3UrBR7V\" target=\"_blank\" rel=\"noreferrer\">Software Architecture - the Hard Parts</a></li>\n<li><a href=\"https://amzn.to/4aIMLvQ\" target=\"_blank\" rel=\"noreferrer\">Thinking in Systems</a></li>\n<li><a href=\"https://amzn.to/448eHGU\" target=\"_blank\" rel=\"noreferrer\">System Design Interview - Volume 1</a></li>\n<li><a href=\"https://amzn.to/4aIOTDJ\" target=\"_blank\" rel=\"noreferrer\">System Desing Interview - Volume 2</a></li>\n</ul>\n" },
    { id: 3, title: "Feynman Technique", content: "<p>Getting acquainted with and understanding the work of Professor Richard Feynman has greatly enriched my life. To fully\ngrasp his ideas, I recommend starting with two excellent books:</p>\n<ul>\n<li><a href=\"https://amzn.to/4b6SYBF\" target=\"_blank\" rel=\"noreferrer\">Surely You&#39;re Joking, Mr Feynman!</a></li>\n<li><a href=\"https://amzn.to/445WA4z\" target=\"_blank\" rel=\"noreferrer\">What Do You Care What Other People Think?</a></li>\n</ul>\n<p>One of the main recommendations from the professor is the encouragement to teach others. Most people who do not speak\npublicly, write blogs, run YouTube channels, or teach others tend to overestimate their knowledge. Explaining something\nin simple language to teach others forces us to build a deep understanding of the subject, thereby accumulating a lot of\nknowledge that begins to connect the dots. Having this knowledge connected into a coherent whole makes it much easier\nfor us to understand new concepts.</p>\n<img src=\"/images/feynman.png\" alt=\"Feynman Knowledge\" width=\"600\">\n\n<p>To build these visualized connections mentioned on the attached <a href=\"https://twitter.com/ProfFeynman/status/1763927221230776741\" target=\"_blank\" rel=\"noreferrer\">Twitter</a>, reading books from related fields is excellent.\nToday, I recommend:</p>\n<ul>\n<li><a href=\"https://amzn.to/4aH08g8\" target=\"_blank\" rel=\"noreferrer\">Continuous Delivery</a></li>\n<li><a href=\"https://amzn.to/3UBWwqd\" target=\"_blank\" rel=\"noreferrer\">Fundamentals of Software Architecture</a></li>\n<li><a href=\"https://sklep.securitum.pl/ksiazka-bezpieczenstwo-aplikacji-webowych\" target=\"_blank\" rel=\"noreferrer\">PL - Bezpieczeństwo Aplikacji Webowych</a></li>\n</ul>\n<p>Teaching others has a very bad PR due to the dubious practices of many companies, but please remember that most active\ntrainers started by writing publicly accessible blogs.</p>\n" },
    { id: 4, title: "Inderdisciplinary", content: "<p>As noted by many Staff and Principal engineers, a recurring theme emerges: interdisciplinarity. It is essential to move beyond the conventional realm of testing, for instance, by developing tools that enhance testing processes.</p>\n<p>The interdisciplinary approach is often absent on a global scale. Educators at all levels—from school teachers to university lecturers and even mentors, co-workers, and leaders—tend to share knowledge strictly within their areas of expertise. To broaden your perspective, consider exploring the lives and philosophies of the following individuals:</p>\n<p><strong>Leonardo da Vinci</strong>: A polymath whose approach to interconnected knowledge remains profoundly influential.</p>\n<ul>\n<li><a href=\"https://amzn.to/3Ugho4W\" target=\"_blank\" rel=\"noreferrer\">Biography</a></li>\n<li><a href=\"https://amzn.to/3U8m6RZ\" target=\"_blank\" rel=\"noreferrer\">How to Think Like Leonardo da Vinci</a></li>\n</ul>\n<p><strong>John Boyd</strong>: Known for the OODA loop, his strategies have applications beyond the military, in areas such as business and management.</p>\n<ul>\n<li><a href=\"https://amzn.to/4473vKA\" target=\"_blank\" rel=\"noreferrer\">Boyd: The Fighter Pilot Who Changed the Art of War</a></li>\n<li><a href=\"https://amzn.to/3xHSWBQ\" target=\"_blank\" rel=\"noreferrer\">The Mind of War: John Boyd and American Security</a></li>\n<li><a href=\"https://amzn.to/3JsZ7Mz\" target=\"_blank\" rel=\"noreferrer\">Certain to Win: The Strategy of John Boyd, Applied to Business</a></li>\n<li><a href=\"https://amzn.to/4b3GN8B\" target=\"_blank\" rel=\"noreferrer\">Science, Strategy and War (Strategy and History)</a></li>\n</ul>\n<p><strong>Taylor Swift</strong> - Analyze the strategic reasons behind the high costs and immense popularity of her concerts.</p>\n" },
    { id: 5, title: "Producer vs Consumer", content: "<p>One of the key challenges that seniors who want to continue developing face is the need to shift their mindset from\nbeing a passive consumer to becoming an active creator. Until now, we have been accustomed to others providing us with\nready-made content, knowledge, and tools. This situation cannot go on indefinitely. Every tool or language has its\napplication, but at a certain point, no training or tutorial can offer us anything new.</p>\n<p>The Model T encourages continuous learning of new things, but that&#39;s not enough. It is more effective to think of\noneself as a creator who brings value to others. Therefore, it is worthwhile to participate in a Call for Papers,\nconduct internal training, or start co-creating open source projects. Most of our new tasks should be creative.</p>\n<p>What I present here may seem obvious, but changing one&#39;s mindset and approach is not at all simple. Remaining an expert\nin one&#39;s field is one thing, but being able to share that knowledge with others and seek innovation is quite another\nmatter.</p>\n<p>Bibliography:</p>\n<ul>\n<li><a href=\"https://www.amazon.com/Implementing-Lean-Software-Development-Concept/dp/0321437381\" target=\"_blank\" rel=\"noreferrer\">Implementing Lean Software Development</a></li>\n<li><a href=\"https://www.amazon.com/Lean-Startup-Eric-September-13-2011-Paperback/dp/B0C1JJZDN3\" target=\"_blank\" rel=\"noreferrer\">Lean Startup</a></li>\n<li><a href=\"https://www.amazon.com/Steal-Like-Artist-Things-Creative/dp/0761169253\" target=\"_blank\" rel=\"noreferrer\">Steal Like An Artist</a></li>\n<li><a href=\"https://www.amazon.com/Show-Your-Work-Austin-Kleon/dp/076117897X\" target=\"_blank\" rel=\"noreferrer\">Show Your Work</a></li>\n<li><a href=\"https://www.amazon.com/Keep-Going-Ways-Creative-Times/dp/1523506644\" target=\"_blank\" rel=\"noreferrer\">Keep Going</a></li>\n</ul>\n" },
    { id: 6, title: "Staff Engineering Books", content: "<p>Books I recommend for seniors wanting to reach higher:</p>\n<ul>\n<li><a href=\"https://amzn.to/49HqvB3\" target=\"_blank\" rel=\"noreferrer\">Staff Engineer: Leadership beyond the management track</a></li>\n<li><a href=\"https://amzn.to/3Q8C0e3\" target=\"_blank\" rel=\"noreferrer\">The Software Engineer&#39;s Guidebook</a></li>\n<li><a href=\"https://amzn.to/4b2Ei6y\" target=\"_blank\" rel=\"noreferrer\">The Staff Engineer&#39;s Path</a></li>\n</ul>\n<p>From all these books emerges the image of a broadly understood engineer, rather than someone focusing on single specialty. One must consistently expand the scope of their work to include programming, DevOps, SRE, etc. I’m omitting soft skills like public speaking because that’s a necessity regardless of specialization 🙂</p>\n" },
    { id: 7, title: "T (Pi) model", content: "<p>The T-Model offers a straightforward way to assess our skills. The vertical part of the &quot;T&quot; represents deep expertise in\na specific area (like Java, Playwright, or Locust) or a few of them, while the horizontal part encompasses broad\nknowledge across various related fields (such as React, SRE, Ansible, Docker, Accessibility Testing). Regularly\nanalyzing job listings can help identify these related areas, thereby increasing our employability.</p>\n<p>Professionals advancing to senior roles often face sudden and varied expectations: from showcasing knowledge and\naligning processes to creating tools that enhance the impact of their work on others. There’s also a need to learn new\ntools (like React) to build dedicated pages for stakeholders.</p>\n<p>I observe many seniors who prefer to stay within their specialized &quot;bubble.&quot; This is permissible, but they must realize\nthat it could complicate their promotion to Senior+ positions. For testers, I often see an over fascination with a\nsingle tool, referred to as the &quot;Church of Playwright,&quot; overlooking more critical aspects like selecting the level of\ntests or the surrounding processes (e.g., CI). Sometimes, it&#39;s better to choose a testing tool and method in conjunction\nwith the frontend team, which requires empathy and a willingness to compromise.</p>\n<p>The T-Model is also an excellent tool for assessing the skills of our team members. If we notice a tendency to stick to\ncomfort zones (like only using Selenium and Java), we can create work systems that enforce greater versatility and\ndiscuss these issues during one-on-one meetings. As leaders, we should feel responsible for the employability level of\nour charges, especially in the current job market climate.</p>\n" }
  ];
